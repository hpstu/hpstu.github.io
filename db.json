{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/matery/source/js/click_show_text.js","path":"js/click_show_text.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/clipboard.min.js","path":"libs/codeBlock/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/explosion.min.js","path":"libs/others/explosion.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/fireworks.js","path":"libs/others/fireworks.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/text.js","path":"libs/others/text.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/csdn.ico","path":"medias/avatars/csdn.ico","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","path":"medias/avatars/myzhihu.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/24.jpg","path":"medias/featureimages/24.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/25.jpg","path":"medias/featureimages/25.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/26.jpg","path":"medias/featureimages/26.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/27.jpg","path":"medias/featureimages/27.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/28.jpg","path":"medias/featureimages/28.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/29.jpg","path":"medias/featureimages/29.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/30.jpg","path":"medias/featureimages/30.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/31.jpg","path":"medias/featureimages/31.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/32.jpg","path":"medias/featureimages/32.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/33.jpg","path":"medias/featureimages/33.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/34.jpg","path":"medias/featureimages/34.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/35.jpg","path":"medias/featureimages/35.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/36.jpg","path":"medias/featureimages/36.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/37.jpg","path":"medias/featureimages/37.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/38.jpg","path":"medias/featureimages/38.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/39.jpg","path":"medias/featureimages/39.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/40.jpg","path":"medias/featureimages/40.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/41.jpg","path":"medias/featureimages/41.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/42.jpg","path":"medias/featureimages/42.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/43.jpg","path":"medias/featureimages/43.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/44.jpg","path":"medias/featureimages/44.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/45.jpg","path":"medias/featureimages/45.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/46.jpg","path":"medias/featureimages/46.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/47.jpg","path":"medias/featureimages/47.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/48.jpg","path":"medias/featureimages/48.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/49.jpg","path":"medias/featureimages/49.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/总有一个人要先走.mp3","path":"medias/music/总有一个人要先走.mp3","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.jpg","path":"medias/reward/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/Like Real People Do.jpg","path":"medias/music/avatars/Like Real People Do.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/Shame.jpg","path":"medias/music/avatars/Shame.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/Stay Alive.jpg","path":"medias/music/avatars/Stay Alive.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/se.jpg","path":"medias/music/avatars/se.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/总有一个人要先走.jpg","path":"medias/music/avatars/总有一个人要先走.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"9e6f55d7c01343e1ffd36d55860587fd269d6cb6","modified":1635065021000},{"_id":"source/CNAME","hash":"09d9784c9e39dc97ce8f6a2840d15d05da834478","modified":1635065021000},{"_id":"source/robots.txt","hash":"96afc2fc25d1e9121f5eae9eaef811cd1ac04208","modified":1635065021000},{"_id":"source/_data/friends.json","hash":"16fdb72790a2eac7052a8dd9f9c11248cd6ed37e","modified":1635065021000},{"_id":"source/_data/musics.json","hash":"c505f1ee1c9102f74a54c7d594d79a844e09dbb3","modified":1635065021000},{"_id":"source/about/index.md","hash":"861988a1ea14daee4103681e05d583fb9622a9b0","modified":1635065021000},{"_id":"source/_posts/1.md","hash":"8ec09dd75c279b153b71aa13a55ff9e6cca81472","modified":1635065021000},{"_id":"source/archives/index.md","hash":"28ffe1788b7ec6b5e8096d3bdba6060afd5024b3","modified":1635065021000},{"_id":"source/categories/index.md","hash":"ea9413cff6268ec0cab02a3fd9628c90e9f9c08d","modified":1635065021000},{"_id":"source/contact/index.md","hash":"a6f0ef09621ee74bb13f29e4b0ccacb57a66dea6","modified":1635065021000},{"_id":"source/friends/index.md","hash":"e3c8d6b0ccd81b066b7b7566dd4afaa37e67348a","modified":1635065021000},{"_id":"source/tags/index.md","hash":"aed5e51001f4c51a4b3ffbd18c2320da8004901f","modified":1635065021000},{"_id":"themes/matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1635065021000},{"_id":"themes/matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1635065021000},{"_id":"themes/matery/_config.yml","hash":"1b64b5d1382361e261faf2fe0129116838a0364e","modified":1646487472425},{"_id":"themes/matery/languages/default.yml","hash":"08b43a89b366b45a84b572da8e7139104829df32","modified":1635065021000},{"_id":"themes/matery/layout/404.ejs","hash":"40c4af57aef2b77611042782e9f3b395f217408f","modified":1635065021000},{"_id":"themes/matery/languages/zh-CN.yml","hash":"4fd8aff7506cd282b3735a48bc2d77a6b3ea3e7e","modified":1635065021000},{"_id":"themes/matery/layout/about.ejs","hash":"8d3355f15ab3b4667243af81aa593d41f2f39557","modified":1635065021000},{"_id":"themes/matery/layout/archive.ejs","hash":"b09487edc56298e20e8d0c29b9b1131f3eb28fd2","modified":1635065021000},{"_id":"themes/matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1635065021000},{"_id":"themes/matery/layout/contact.ejs","hash":"7b0f365624f9fdc2fe242930c8de62535c00ae3f","modified":1635065021000},{"_id":"themes/matery/layout/category.ejs","hash":"8fa32a94aa3ba36d788e8f8f5906074e391f1739","modified":1635065021000},{"_id":"themes/matery/layout/friends.ejs","hash":"61c5c20b9d0061c71c8f81fb41351f4836e96f64","modified":1635065021000},{"_id":"themes/matery/layout/index.ejs","hash":"b1a8a07b1da8ab939cf9d30d3b35a5bcaf22a6e1","modified":1635065021000},{"_id":"themes/matery/layout/layout.ejs","hash":"de38cd533d70e281aa4337b4c51f27f46246b612","modified":1635065021000},{"_id":"themes/matery/layout/post.ejs","hash":"23fcd2d9bcf4256260e830339f0b2976a145705e","modified":1635065021000},{"_id":"themes/matery/layout/tag.ejs","hash":"b4ec6952112384961061c923847f19c5afba8d7a","modified":1635065021000},{"_id":"themes/matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1635065021000},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"8c91d2088c9bb323246b054d4940bde6cead6828","modified":1635065021000},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"dbe4391fba348972b1882951b6f453af09273ee4","modified":1635065021000},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1635065021000},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"a0f53d1a9b579d52e52ccad8c6e330bf3b89547e","modified":1635065021000},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"12872c3ba85e7117f5278b1aca5f0b6d32322004","modified":1635065021000},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"c07893e507971db87a3d3509cbd1c0440ab1b691","modified":1635065021000},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1635065021000},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"0abfb51dc80ad063fb2118bee28de6bb8d99ed4e","modified":1635065021000},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1635065021000},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"8f256b8d704076c85b32b762d427d813c6c22c38","modified":1635065021000},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"e253c813b3ee5ed924700a95133741802e58adc5","modified":1635065021000},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"294e51ad32426fb84da8daaee7c2155071dbd6b1","modified":1635065021000},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1635065021000},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"c0d37eaaa0ec59a7dabccccbec6b0f6562c9c92e","modified":1635065021000},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"33aa62639015661cda3650f5c96ee38975bf1189","modified":1635065021000},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"68a24cad2b2049c4dc3a250aa30bf4256f9e50cb","modified":1635065021000},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"8f90dba37cb824a037fe86f6b60b73056673cee0","modified":1635065021000},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"d4114c22126704cc1754d6d28cb00aec020b428b","modified":1635065021000},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"80991b987adc765fff991e0d352920cf9e009c19","modified":1635065021000},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"2b2fe8e8e94e65c52a4dbd454168e9b9df6baf10","modified":1635065021000},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"078cee6adc13ab4a88845d694454ac5dff77ee27","modified":1635065021000},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"3d61d4acde8d27a63072145130d2661df8c05df7","modified":1635065021000},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"3dff4f6a73973b0b32f40604244255f3c2a5bb78","modified":1635065021000},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"942609b9240d5c8c09b24562fc8fb31eabe1cae4","modified":1635065021000},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"34f8e4250bb66012026aa50686a7c89a0414ca1b","modified":1635065021000},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"cd435a1e20a809d11f3bcbeb9bcd7f646ea84500","modified":1635065021000},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"6ce8a347fdb40b8ae78f924ef6b9f972f2a101a5","modified":1635065021000},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"a5a10d6fa66a389d0253d7a52e0a646af6e8e9be","modified":1635065021000},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"f5561dd7d53d68897a33090bf677719213459b19","modified":1635065021000},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"96c43b244a9abf1f501ed61bad22cd315e2a863d","modified":1635065021000},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"8eafddbd73fed80e85c66d49837c1a241b087258","modified":1635065021000},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"f81eb2891bea326908057029e2a063001371ba9b","modified":1635065021000},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"b9bf70ec5d97b0e14bb1b4f60f92db7680be5949","modified":1635065021000},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"bb8609e8739c7625e5ebfc1998acfac259386273","modified":1635065021000},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"0b0a3eb6af29bf0d55d535958c44b01c0f18d10d","modified":1635065021000},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"af0604623db37ef800bb7ad48028d18d99efbbc3","modified":1635065021000},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"72ee5ed55e68101a9c560788659674c48e15f568","modified":1635065021000},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"a3725f0e3a405acb595b04630a27765b537fb580","modified":1635065021000},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"3a991d7292e0cf98e0eb7d899d0aba5a3ad8cf03","modified":1635065021000},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"bda810cc135b52f834f1c1ccf52defccacace714","modified":1635065021000},{"_id":"themes/matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1635065021000},{"_id":"themes/matery/source/css/matery.css","hash":"9177986b225313e4a986a9ff35085104e5886b2a","modified":1635065021000},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1635065021000},{"_id":"themes/matery/source/css/my.css","hash":"405d61aa393c79aeb2033ef227fc7beb7b20eff6","modified":1635065021000},{"_id":"themes/matery/source/js/click_show_text.js","hash":"613c5e7851df10317da8ac50ec91b26a3e2ef372","modified":1635065021000},{"_id":"themes/matery/source/js/matery.js","hash":"c5a9c4fae16126cae80719e7435705840718b628","modified":1635065021000},{"_id":"themes/matery/source/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1635065021000},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1635065021000},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1635065021000},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1635065021000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1635065021000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1635065021000},{"_id":"themes/matery/source/libs/codeBlock/clipboard.min.js","hash":"9cd57c67fbd3e3067f80793ef8445f5ff7783563","modified":1635065021000},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1635065021000},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"b74a381adf6ef8404d6a0452c2b9f44b47219c80","modified":1635065021000},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"ea8b51e4d75e7b2cd63e4d5bcb8db2cf7f23f5db","modified":1635065021000},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"215910dc8f63fd50b97957e5fcdc8480aa2728cb","modified":1635065021000},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1635065021000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1635065021000},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1635065021000},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1635065021000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1635065021000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1635065021000},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1635065021000},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1635065021000},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1635065021000},{"_id":"themes/matery/source/libs/others/explosion.min.js","hash":"417b68e2cf2c6de2119c57626f4412105a8457f5","modified":1635065021000},{"_id":"themes/matery/source/libs/others/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1635065021000},{"_id":"themes/matery/source/libs/others/snow.js","hash":"7f3b1ad2f64d4473210a2c3218893649c73c980e","modified":1635065021000},{"_id":"themes/matery/source/libs/others/text.js","hash":"1791782cde0d1e4197f2ed58ecb7dd6aefddd169","modified":1635065021000},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1635065021000},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1635065021000},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1635065021000},{"_id":"themes/matery/source/medias/avatars/csdn.ico","hash":"fff55f10e98084a888ac0b346ccdf0dbaad2ccb1","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"2e1ac235e6a6d80dbed651f993f319c1ed4b5925","modified":1635065021000},{"_id":"themes/matery/source/medias/reward/wechat.jpg","hash":"bf861ad684cd708ba5d864040eecdf9645685ae0","modified":1635065021000},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1635065021000},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1635065021000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1635065021000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1635065021000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1635065021000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1635065021000},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1635065021000},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1635065021000},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1635065021000},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1635065021000},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1635065021000},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1635065021000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1635065021000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1635065021000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1635065021000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1635065021000},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1635065021000},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1635065021000},{"_id":"themes/matery/source/medias/music/avatars/Like Real People Do.jpg","hash":"70d026f8ff9df7a5427e75e58c4b8bc6c637d85f","modified":1635065021000},{"_id":"themes/matery/source/medias/music/avatars/Shame.jpg","hash":"08464f06d5400d92431cfc4668cda9b0eccce0be","modified":1635065021000},{"_id":"themes/matery/source/medias/music/avatars/Stay Alive.jpg","hash":"c0611b3db7a0acb91c8d1972e6ffe99545289bc8","modified":1635065021000},{"_id":"themes/matery/source/medias/music/avatars/se.jpg","hash":"2afb8904ae101e2a7dc719226ad4d05032a635c1","modified":1635065021000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1635065021000},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1635065021000},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1635065021000},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"4e34802ccbb59f1daa58a62241ff57f923e50600","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"164bda04d4ef6ae75f149c2e822d0d0f0b79e15c","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"867c9882842f84290ba173292d551a626106a45d","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"9ad4b78782e69f0ace50f76daa7a4bd687738332","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/27.jpg","hash":"ea65367dab59059c343cd0a211f41ca4bd0dc2c9","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/35.jpg","hash":"2f001a7d045a952ba059eb3575664347ebbf4d1f","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/36.jpg","hash":"a71a869c98c68123e94706fa970333235990f0ab","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/37.jpg","hash":"515fd43e0acddf316a5753ea1cdc259c9571eec6","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/38.jpg","hash":"fc728ac4c69d06e911bbc4d6cba9c9ef1b158b9f","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/47.jpg","hash":"ee4de6373759e67d96c0fe7237620ccdd190f188","modified":1635065021000},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"318823c8af1fd810cf7f7724bc6428dfff762089","modified":1635065021000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1635065021000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1635065021000},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"28bdb33c9eb609c2f30d431df1a4cf8ca70bf841","modified":1635065021000},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"4d46df5f22cbc24eefa76228c7ee308dc3585594","modified":1635065021000},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1635065021000},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"4e9f83cbe1575a44fe9315f937e7505ed05b6920","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"aaf5863bed7563a86a6da15cef0b5d44740e449c","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"53f3eb05edab87ee07c889f26fc550e9b5e5cb91","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"4e4ed3d6f8466b3362cbaaa04dc31b8859d3e202","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"87100d52e5077c77f9e74856a1c5330d81708ae3","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"8567da47271a81b74ca341d170e057bb42f42bf5","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"e854df6ea24c22c999216db611dfd3785b76b834","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/24.jpg","hash":"33fc0af42186fa2c0e41712d5e45c716dd47bce6","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"c2f1f9387db7dd99d3c0e4df42a160d482dde5bd","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/28.jpg","hash":"565fb296d8e4e2e520d6f15985f1de33d7bd98c8","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/29.jpg","hash":"a8ff01c7f29be6d703040fad7889f5afba1eb844","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/30.jpg","hash":"6dfe6d277ec3ef36e8c958a71712702a5be3e4d8","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/31.jpg","hash":"50eedc29287470f333612e6f71d88c3121357257","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/33.jpg","hash":"851fadf999b21c4e42d7a5e4114a10abd21f81cd","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/39.jpg","hash":"2b914a3b098aa874f68b4fcda7c85613140c6420","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/41.jpg","hash":"51ccac5c36201f1c04f66e5d54babbb21cf5dc5f","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/43.jpg","hash":"76bf6095d8e92aa5d6a4e2dff4c2d710c61da07e","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/46.jpg","hash":"1e73f8ed0bd91c4443c4f7e57d2ea5cf94d419c6","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"e0eb036bf77aacc91dffea2d75f590f9f1b2b961","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"b04f9b49261b2486260e64e6543da45689e272de","modified":1635065021000},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1635065021000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1635065021000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1635065021000},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"38272cddbb09c70c7785aed877f6c9b45a61262a","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"1eed284202ae51c4f3051d943b3d97a7602a9fc6","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"b8108799fbf3eadf0462fba04034a277a462018b","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"2beb56f529f0ce49f36a84d55890b7c0de3d7705","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/25.jpg","hash":"97930cf52f9e68ccf24d26b383704ca4724dae34","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/26.jpg","hash":"9c2eaf5aff8abdc4e215af96002c8525be9ddd06","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"4cabac02df559a5eb1b9abc8a0359fe6573a738b","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/32.jpg","hash":"e440f9bdcdff7c181904b26b2774c48632e4d24a","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/34.jpg","hash":"6fca10e13cae2a089909ea266fa6be510e57a2bd","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"d7139f883aad272d619ce181ebcd86672a2a7bdc","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/42.jpg","hash":"c05648a22e1f083d13f40e76fed535f027fae0b6","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/44.jpg","hash":"6bca5b340c7e16350e3040da2416f6184ccd64a4","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/45.jpg","hash":"5c22e8d627f763ebae1d080025aee103383a8460","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/48.jpg","hash":"13754e6efc8f6db46088d736ed2c290b0d9bfb33","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"38272cddbb09c70c7785aed877f6c9b45a61262a","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"26833abcdd65e10c48e8d0553cb3543d3e0ca4d8","modified":1635065021000},{"_id":"themes/matery/source/medias/music/avatars/总有一个人要先走.jpg","hash":"2beb56f529f0ce49f36a84d55890b7c0de3d7705","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"29f884076a7fbed6900a1a05c41ffd3ce122a123","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"4cbd4926b13132903c465685a127c577b56b2b8b","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/40.jpg","hash":"7a69b037ce05312d9322fe3f11c4d645b88645aa","modified":1635065021000},{"_id":"themes/matery/source/medias/logo.png","hash":"4a9aec7e236615e3b698adfd3b36bc34ec05e5c7","modified":1635065021000},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","hash":"4a9aec7e236615e3b698adfd3b36bc34ec05e5c7","modified":1635065021000},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"73bae0e6812c46509b91e3155bd12ce8640b245a","modified":1635065021000},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"cd3fc47d2042a3277e4b375ad084365abdc28f5d","modified":1635065021000},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"c2980f75f2c047d0957e3c8227b3f8d84e67f752","modified":1635065021000},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"4d6f31f86966584360bcdbfecb6f6a2ec94f944d","modified":1635065021000},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"5be9274e63d6ac02607e3d659fd32532291385fa","modified":1635065021000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1635065021000},{"_id":"themes/matery/source/favicon.png","hash":"7bb5d2128dbe1ecfd6d8640174a34c2c402d999a","modified":1635065021000},{"_id":"themes/matery/source/medias/featureimages/49.jpg","hash":"90ad50712c339a89402a363288dcd355e98d0fbb","modified":1635065021000},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1635065021000},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"42a57b512acce7f09f122b6b8c4f85c3803cd438","modified":1635065021000},{"_id":"themes/matery/source/medias/music/总有一个人要先走.mp3","hash":"a9a64e4e6da5bb508be368267c5c1fbbcd1f5b7f","modified":1635065021000},{"_id":"public/baidu_urls.txt","hash":"de6b55557c2e3a1c1a0c235d75bff7e944951439","modified":1647224238800},{"_id":"public/baidusitemap.xml","hash":"47b44569792978a688bd3347fde6cc7f70acbbc9","modified":1647224238800},{"_id":"public/atom.xml","hash":"5579ba4ea80947cdab645eb4a3d2b925b9a43649","modified":1647224238800},{"_id":"public/sitemap.xml","hash":"6068b1b68d0ee867af792692fe40071b035a1cc7","modified":1647224238800},{"_id":"public/search.xml","hash":"0e2bd0d9afd66aa19ac02c83dfa1ce90358ecfb5","modified":1647224238800},{"_id":"public/404.html","hash":"8af29b151911ec5d1a649c703a702a03291e54d5","modified":1647224238800},{"_id":"public/about/index.html","hash":"ec02dc0a9f57e4ffe06c11dc1b08d42c53469de0","modified":1647224238800},{"_id":"public/archives/index.html","hash":"641560bbeed15e70d2adc96870f7d0bbf6c18b55","modified":1647224238800},{"_id":"public/categories/index.html","hash":"d923a953277715aa4656f51cc3a0b151e8de7a79","modified":1647224238800},{"_id":"public/contact/index.html","hash":"ad82bce28fa1cdff50e40e208d9d30db74625b56","modified":1647224238800},{"_id":"public/friends/index.html","hash":"b3bfd68c3e64afa0aca21b7bade1b30129c3a04a","modified":1647224238800},{"_id":"public/tags/index.html","hash":"f7dcb5d4d2a49c45b7a2eb3b9492183ff8667139","modified":1647224238800},{"_id":"public/1.html","hash":"79ea64115c43debdb7e790e5fcb78b34a337fb3e","modified":1647224238800},{"_id":"public/archives/2020/index.html","hash":"ccf571d4de70cd5efac3e31cb49d03fb23c6dab9","modified":1647224238800},{"_id":"public/archives/2020/02/index.html","hash":"14f1f965d9969ccf89f67409e0478461989bf00e","modified":1647224238800},{"_id":"public/categories/Blog/index.html","hash":"b6351240ca1d9c3b69d256f03809565b78e43554","modified":1647224238800},{"_id":"public/index.html","hash":"4c87e1eed6c962a81316cf130c909e4577fdcb1c","modified":1647224238800},{"_id":"public/tags/Github/index.html","hash":"def498bab92e8689ab691bd8b787dee659dbb0f6","modified":1647224238800},{"_id":"public/tags/Hexo/index.html","hash":"aeaffee34c3e36c199f026930fb32c10da663dff","modified":1647224238800},{"_id":"public/tags/博客搭建/index.html","hash":"343c3a0219e0929be42282a31b8c7bbacbf1bc81","modified":1647224238800},{"_id":"public/robots.txt","hash":"96afc2fc25d1e9121f5eae9eaef811cd1ac04208","modified":1646484131281},{"_id":"public/CNAME","hash":"09d9784c9e39dc97ce8f6a2840d15d05da834478","modified":1646484131281},{"_id":"public/medias/avatars/csdn.ico","hash":"fff55f10e98084a888ac0b346ccdf0dbaad2ccb1","modified":1646484131281},{"_id":"public/medias/featureimages/9.jpg","hash":"2e1ac235e6a6d80dbed651f993f319c1ed4b5925","modified":1646484131281},{"_id":"public/medias/reward/wechat.jpg","hash":"bf861ad684cd708ba5d864040eecdf9645685ae0","modified":1646484131281},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1646484131281},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1646484131281},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1646484131281},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1646484131281},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1646484131281},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1646484131281},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1646484131281},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1646484131281},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1646484131281},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1646484131281},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1646484131281},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1646484131281},{"_id":"public/medias/music/avatars/Like Real People Do.jpg","hash":"70d026f8ff9df7a5427e75e58c4b8bc6c637d85f","modified":1646484131281},{"_id":"public/medias/music/avatars/Shame.jpg","hash":"08464f06d5400d92431cfc4668cda9b0eccce0be","modified":1646484131281},{"_id":"public/medias/music/avatars/Stay Alive.jpg","hash":"c0611b3db7a0acb91c8d1972e6ffe99545289bc8","modified":1646484131281},{"_id":"public/medias/music/avatars/se.jpg","hash":"2afb8904ae101e2a7dc719226ad4d05032a635c1","modified":1646484131281},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1646484131281},{"_id":"public/css/prism-line-numbers.css","hash":"a1692758d22c6cdf6fd1a8dafc9b4b98e41d3138","modified":1646484131281},{"_id":"public/medias/featureimages/14.jpg","hash":"164bda04d4ef6ae75f149c2e822d0d0f0b79e15c","modified":1646484131281},{"_id":"public/medias/featureimages/15.jpg","hash":"867c9882842f84290ba173292d551a626106a45d","modified":1646484131281},{"_id":"public/medias/featureimages/21.jpg","hash":"9ad4b78782e69f0ace50f76daa7a4bd687738332","modified":1646484131281},{"_id":"public/medias/featureimages/27.jpg","hash":"ea65367dab59059c343cd0a211f41ca4bd0dc2c9","modified":1646484131281},{"_id":"public/medias/featureimages/35.jpg","hash":"2f001a7d045a952ba059eb3575664347ebbf4d1f","modified":1646484131281},{"_id":"public/medias/featureimages/36.jpg","hash":"a71a869c98c68123e94706fa970333235990f0ab","modified":1646484131281},{"_id":"public/medias/featureimages/37.jpg","hash":"515fd43e0acddf316a5753ea1cdc259c9571eec6","modified":1646484131281},{"_id":"public/medias/featureimages/38.jpg","hash":"fc728ac4c69d06e911bbc4d6cba9c9ef1b158b9f","modified":1646484131281},{"_id":"public/medias/featureimages/47.jpg","hash":"ee4de6373759e67d96c0fe7237620ccdd190f188","modified":1646484131281},{"_id":"public/medias/reward/alipay.jpg","hash":"318823c8af1fd810cf7f7724bc6428dfff762089","modified":1646484131281},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1646484131281},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1646484131281},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1646484131281},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1646484131281},{"_id":"public/css/my.css","hash":"405d61aa393c79aeb2033ef227fc7beb7b20eff6","modified":1646484131281},{"_id":"public/js/click_show_text.js","hash":"613c5e7851df10317da8ac50ec91b26a3e2ef372","modified":1646484131281},{"_id":"public/js/matery.js","hash":"c5a9c4fae16126cae80719e7435705840718b628","modified":1646484131281},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1646484131281},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1646484131281},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1646484131281},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1646484131281},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"b74a381adf6ef8404d6a0452c2b9f44b47219c80","modified":1646484131281},{"_id":"public/libs/codeBlock/codeLang.js","hash":"ea8b51e4d75e7b2cd63e4d5bcb8db2cf7f23f5db","modified":1646484131281},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"215910dc8f63fd50b97957e5fcdc8480aa2728cb","modified":1646484131281},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1646484131281},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1646484131281},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1646484131281},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1646484131281},{"_id":"public/libs/others/explosion.min.js","hash":"417b68e2cf2c6de2119c57626f4412105a8457f5","modified":1646484131281},{"_id":"public/libs/others/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1646484131281},{"_id":"public/libs/others/snow.js","hash":"7f3b1ad2f64d4473210a2c3218893649c73c980e","modified":1646484131281},{"_id":"public/libs/others/text.js","hash":"1791782cde0d1e4197f2ed58ecb7dd6aefddd169","modified":1646484131281},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1646484131281},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1646484131281},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1646484131281},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1646484131281},{"_id":"public/css/matery.css","hash":"9177986b225313e4a986a9ff35085104e5886b2a","modified":1646484131281},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1646484131281},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1646484131281},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1646484131281},{"_id":"public/libs/codeBlock/clipboard.min.js","hash":"9cd57c67fbd3e3067f80793ef8445f5ff7783563","modified":1646484131281},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1646484131281},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1646484131281},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1646484131281},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1646484131281},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1646484131281},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1646484131281},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"28bdb33c9eb609c2f30d431df1a4cf8ca70bf841","modified":1646484131281},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1646484131281},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1646484131281},{"_id":"public/libs/materialize/materialize.min.css","hash":"4d46df5f22cbc24eefa76228c7ee308dc3585594","modified":1646484131281},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1646484131281},{"_id":"public/libs/valine/Valine.min.js","hash":"4e34802ccbb59f1daa58a62241ff57f923e50600","modified":1646484131281},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1646484131281},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1646484131281},{"_id":"public/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1646484131281},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1646484131281},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1646484131281},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1646484131281},{"_id":"public/medias/featureimages/0.jpg","hash":"4e9f83cbe1575a44fe9315f937e7505ed05b6920","modified":1646484131281},{"_id":"public/medias/featureimages/1.jpg","hash":"aaf5863bed7563a86a6da15cef0b5d44740e449c","modified":1646484131281},{"_id":"public/medias/featureimages/10.jpg","hash":"53f3eb05edab87ee07c889f26fc550e9b5e5cb91","modified":1646484131281},{"_id":"public/medias/featureimages/11.jpg","hash":"4e4ed3d6f8466b3362cbaaa04dc31b8859d3e202","modified":1646484131281},{"_id":"public/medias/featureimages/16.jpg","hash":"87100d52e5077c77f9e74856a1c5330d81708ae3","modified":1646484131281},{"_id":"public/medias/featureimages/2.jpg","hash":"8567da47271a81b74ca341d170e057bb42f42bf5","modified":1646484131281},{"_id":"public/medias/featureimages/20.jpg","hash":"e854df6ea24c22c999216db611dfd3785b76b834","modified":1646484131281},{"_id":"public/medias/featureimages/23.jpg","hash":"c2f1f9387db7dd99d3c0e4df42a160d482dde5bd","modified":1646484131281},{"_id":"public/medias/featureimages/24.jpg","hash":"33fc0af42186fa2c0e41712d5e45c716dd47bce6","modified":1646484131281},{"_id":"public/medias/featureimages/28.jpg","hash":"565fb296d8e4e2e520d6f15985f1de33d7bd98c8","modified":1646484131281},{"_id":"public/medias/featureimages/29.jpg","hash":"a8ff01c7f29be6d703040fad7889f5afba1eb844","modified":1646484131281},{"_id":"public/medias/featureimages/30.jpg","hash":"6dfe6d277ec3ef36e8c958a71712702a5be3e4d8","modified":1646484131281},{"_id":"public/medias/featureimages/31.jpg","hash":"50eedc29287470f333612e6f71d88c3121357257","modified":1646484131281},{"_id":"public/medias/featureimages/33.jpg","hash":"851fadf999b21c4e42d7a5e4114a10abd21f81cd","modified":1646484131281},{"_id":"public/medias/featureimages/39.jpg","hash":"2b914a3b098aa874f68b4fcda7c85613140c6420","modified":1646484131281},{"_id":"public/medias/featureimages/41.jpg","hash":"51ccac5c36201f1c04f66e5d54babbb21cf5dc5f","modified":1646484131281},{"_id":"public/medias/featureimages/43.jpg","hash":"76bf6095d8e92aa5d6a4e2dff4c2d710c61da07e","modified":1646484131281},{"_id":"public/medias/featureimages/46.jpg","hash":"1e73f8ed0bd91c4443c4f7e57d2ea5cf94d419c6","modified":1646484131281},{"_id":"public/medias/featureimages/6.jpg","hash":"e0eb036bf77aacc91dffea2d75f590f9f1b2b961","modified":1646484131281},{"_id":"public/medias/featureimages/8.jpg","hash":"b04f9b49261b2486260e64e6543da45689e272de","modified":1646484131281},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1646484131281},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1646484131281},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1646484131281},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1646484131281},{"_id":"public/medias/banner/5.jpg","hash":"38272cddbb09c70c7785aed877f6c9b45a61262a","modified":1646484131281},{"_id":"public/medias/featureimages/13.jpg","hash":"1eed284202ae51c4f3051d943b3d97a7602a9fc6","modified":1646484131281},{"_id":"public/medias/featureimages/18.jpg","hash":"b8108799fbf3eadf0462fba04034a277a462018b","modified":1646484131281},{"_id":"public/medias/featureimages/22.jpg","hash":"2beb56f529f0ce49f36a84d55890b7c0de3d7705","modified":1646484131281},{"_id":"public/medias/featureimages/25.jpg","hash":"97930cf52f9e68ccf24d26b383704ca4724dae34","modified":1646484131281},{"_id":"public/medias/featureimages/26.jpg","hash":"9c2eaf5aff8abdc4e215af96002c8525be9ddd06","modified":1646484131281},{"_id":"public/medias/featureimages/3.jpg","hash":"4cabac02df559a5eb1b9abc8a0359fe6573a738b","modified":1646484131281},{"_id":"public/medias/featureimages/32.jpg","hash":"e440f9bdcdff7c181904b26b2774c48632e4d24a","modified":1646484131281},{"_id":"public/medias/featureimages/34.jpg","hash":"6fca10e13cae2a089909ea266fa6be510e57a2bd","modified":1646484131281},{"_id":"public/medias/featureimages/4.jpg","hash":"d7139f883aad272d619ce181ebcd86672a2a7bdc","modified":1646484131281},{"_id":"public/medias/featureimages/42.jpg","hash":"c05648a22e1f083d13f40e76fed535f027fae0b6","modified":1646484131281},{"_id":"public/medias/featureimages/44.jpg","hash":"6bca5b340c7e16350e3040da2416f6184ccd64a4","modified":1646484131281},{"_id":"public/medias/featureimages/45.jpg","hash":"5c22e8d627f763ebae1d080025aee103383a8460","modified":1646484131281},{"_id":"public/medias/featureimages/48.jpg","hash":"13754e6efc8f6db46088d736ed2c290b0d9bfb33","modified":1646484131281},{"_id":"public/medias/featureimages/5.jpg","hash":"38272cddbb09c70c7785aed877f6c9b45a61262a","modified":1646484131281},{"_id":"public/medias/featureimages/7.jpg","hash":"26833abcdd65e10c48e8d0553cb3543d3e0ca4d8","modified":1646484131281},{"_id":"public/medias/music/avatars/总有一个人要先走.jpg","hash":"2beb56f529f0ce49f36a84d55890b7c0de3d7705","modified":1646484131281},{"_id":"public/medias/featureimages/12.jpg","hash":"29f884076a7fbed6900a1a05c41ffd3ce122a123","modified":1646484131281},{"_id":"public/medias/featureimages/17.jpg","hash":"4cbd4926b13132903c465685a127c577b56b2b8b","modified":1646484131281},{"_id":"public/medias/featureimages/40.jpg","hash":"7a69b037ce05312d9322fe3f11c4d645b88645aa","modified":1646484131281},{"_id":"public/medias/logo.png","hash":"4a9aec7e236615e3b698adfd3b36bc34ec05e5c7","modified":1646484131281},{"_id":"public/medias/avatars/myzhihu.png","hash":"4a9aec7e236615e3b698adfd3b36bc34ec05e5c7","modified":1646484131281},{"_id":"public/medias/banner/0.jpg","hash":"73bae0e6812c46509b91e3155bd12ce8640b245a","modified":1646484131281},{"_id":"public/medias/banner/1.jpg","hash":"cd3fc47d2042a3277e4b375ad084365abdc28f5d","modified":1646484131281},{"_id":"public/medias/banner/2.jpg","hash":"c2980f75f2c047d0957e3c8227b3f8d84e67f752","modified":1646484131281},{"_id":"public/medias/banner/4.jpg","hash":"4d6f31f86966584360bcdbfecb6f6a2ec94f944d","modified":1646484131281},{"_id":"public/medias/banner/6.jpg","hash":"5be9274e63d6ac02607e3d659fd32532291385fa","modified":1646484131281},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1646484131281},{"_id":"public/favicon.png","hash":"7bb5d2128dbe1ecfd6d8640174a34c2c402d999a","modified":1646484131281},{"_id":"public/medias/featureimages/49.jpg","hash":"90ad50712c339a89402a363288dcd355e98d0fbb","modified":1646484131281},{"_id":"public/medias/banner/3.jpg","hash":"42a57b512acce7f09f122b6b8c4f85c3803cd438","modified":1646484131281},{"_id":"public/medias/music/总有一个人要先走.mp3","hash":"a9a64e4e6da5bb508be368267c5c1fbbcd1f5b7f","modified":1646484131281},{"_id":"source/_posts/cmake.md","hash":"f2dcce1357599488f4856e2251118ecc4d958207","modified":1646488030208},{"_id":"source/_posts/python.md","hash":"a2a45239958d9970d85fe6cc8a8396d258571aae","modified":1646484808979},{"_id":"public/cmake.html","hash":"503a258da4d4aad9854657aa55cf0bc27594cbc8","modified":1647224238800},{"_id":"public/python.html","hash":"3b0307d4c18fe23b6ed25b459e78fe57b17c2202","modified":1646486870671},{"_id":"public/archives/2022/03/index.html","hash":"0922b57af0d2923042a320cf630b387f0ac5b07a","modified":1647224238800},{"_id":"public/archives/2022/index.html","hash":"4c441741b9ec27a1d6c1472dec56e47b8d62a79d","modified":1647224238800},{"_id":"source/_posts/Bash.md","hash":"397b791c159914516ac02551b71e9350da7a1f01","modified":1640742293939},{"_id":"source/_posts/C++.md","hash":"414d3d8f327eda44d61f1fa5007cc53fae576dcc","modified":1640676610509},{"_id":"source/_posts/Git.md","hash":"4db03d63d9418e7fc9358458c49775e21c1de2a0","modified":1636028809707},{"_id":"source/_posts/Github密钥.txt","hash":"8dc4c5ecb5cd88f47044ebd5f074df21c37b87b4","modified":1633672725078},{"_id":"source/_posts/Git操作.md","hash":"74cf3c374bf18c8d2da50ba91f78c87000dc090b","modified":1633682724755},{"_id":"source/_posts/Latex.md","hash":"303f6fa8c467ffd0dbfa3ec89a6bf57d4f707f8b","modified":1637934403681},{"_id":"source/_posts/Python.md","hash":"d9de7301c33724c76dfc690beeba66770bdedacc","modified":1638953015102},{"_id":"source/_posts/Pytorch.md","hash":"4ac655acb36cf27d615d6331c5c7b393a01d8da9","modified":1630301743475},{"_id":"source/_posts/Ubuntu.md","hash":"c1fe184310743674a46cdea573929b0a5c669740","modified":1646539652000},{"_id":"source/_posts/bash 使用教程.md","hash":"58d2047704c5922649774d6a0d993ca11b5905b2","modified":1640759620654},{"_id":"source/_posts/cmake 查找库文件模板.md","hash":"297591c4ec4049ef12a458edc4ec9430e62b5fe2","modified":1638153588104},{"_id":"source/_posts/img/2021-10-14_14-22.png","hash":"20dc0aedab833f059b8d252c3cd4cd0b3c8d7766","modified":1634192577824},{"_id":"source/_posts/img/2021-10-14_14-52.png","hash":"003032317d43c65970459750b69f88757d4b08ea","modified":1634194326849},{"_id":"source/_posts/paper/笔记.md","hash":"e89e2b3fcff4e5cf22e8e7051bef1bc695adf0ec","modified":1636102659449},{"_id":"source/_posts/img/clion.png","hash":"5a6d4353d97a8b2638ddb8c1c3707375be28ae08","modified":1634442751208},{"_id":"source/_posts/cmake实践.pdf","hash":"5e63a6c1a8fd6cbd128a32dbea19a7357147a9cc","modified":1644055658258},{"_id":"source/_posts/tlcl-cn.pdf","hash":"b28ed76108b73349ff9ee6564242e38f188bc156","modified":1640759604854},{"_id":"source/_posts/paper/paper/融合深度学习和几何定姿的光流视觉里程计研究.pdf","hash":"4df656420d9f8c57baef2de3fd08316982f5679d","modified":1636101451296},{"_id":"source/_posts/paper/paper/LiteFlowNet.pdf","hash":"6d3e829eaad1add20660c0f0c8c60f5546a795b8","modified":1636100987973},{"_id":"source/_posts/paper/paper/MonoDepth2.pdf","hash":"582b9959ad086a13720c050932b980ff2b43607c","modified":1636100037346},{"_id":"source/_posts/paper/paper/RAFT.pdf","hash":"aca55fcb6ae010dd2276308a3bb166351bb6c732","modified":1636096546526},{"_id":"source/_posts/paper/paper/LiteFlowNet2.pdf","hash":"558d42f5603f9993f26709a3483f5c0cc9240b2b","modified":1636101182626},{"_id":"source/_posts/paper/paper/LiteFlowNet3.pdf","hash":"47f1b28cdb2b5cb64a31637a66a47bb7d9a87abd","modified":1636097723307},{"_id":"public/ubuntu.html","hash":"eccb1876d040c76db6a92a35c4e394f784cf4a9f","modified":1647224238800},{"_id":"public/latex.html","hash":"802f35aafefc72f829a75ccb475d90513a754619","modified":1646486870671},{"_id":"public/pytorch.html","hash":"e9d7a252f0158f8350b358a5912fab441b729173","modified":1646486870671},{"_id":"public/git.html","hash":"b7401c2a1bd7ce5bd735f7ab15ae31b866028935","modified":1647224238800},{"_id":"public/git-cao-zuo.html","hash":"f337ce903f8b26208c4d84db6bb800b5f9466fc0","modified":1646486870671},{"_id":"public/cmake-cha-zhao-ku-wen-jian-mo-ban.html","hash":"f1a55aa41b19d36623968ec138fe3b08fa3f938e","modified":1646486870671},{"_id":"public/bash.html","hash":"a9f7d8155b82ab78f1cc87d5e5190f53ab4da095","modified":1647224238800},{"_id":"public/c.html","hash":"911a9a4e04f690d4062686bebc3b52795695431a","modified":1646486870671},{"_id":"public/bash-shi-yong-jiao-cheng.html","hash":"b87393188b57132f8bebb7123076186a8fd2a70b","modified":1646486870671},{"_id":"public/paper/bi-ji.html","hash":"6c49ad1639765f0c7dae87680b40d7f213887f93","modified":1647224238800},{"_id":"public/archives/page/2/index.html","hash":"93edc029bb51fbc435f01e224f5f7fa0ddadbb9b","modified":1647224238800},{"_id":"public/page/2/index.html","hash":"7a14046082873a6070811c4638a386ff654ef643","modified":1647224238800},{"_id":"public/tags/ubuntu/index.html","hash":"68da3be7d6739d1af239f0666a48c59d76c68668","modified":1647224238800},{"_id":"source/_posts/bash.md","hash":"b9e8da0591eb846947383eb331dacda0943be6ee","modified":1646540737000},{"_id":"source/_posts/git.md","hash":"70c5045807eb67cda4ff7cbcf2035597be07a38c","modified":1646919640258},{"_id":"source/_posts/C关键字.md","hash":"51be7ab5d44e710a67d1a6b9f18cf930053df7e4","modified":1647181830938},{"_id":"source/_posts/hexo.md","hash":"418a2d18515e5d56510b5b898267114d00e2725c","modified":1646919348329},{"_id":"source/_posts/git2.md","hash":"e05c9738c37f6917ffd19ce3299e465adb679fbf","modified":1646922734735},{"_id":"source/_posts/git2/git1.png","hash":"861313a0d822c58a4aa9127d8655ce0874af4257","modified":1646922617506},{"_id":"public/c-guan-jian-zi.html","hash":"d4848ea07fab2a6da60478220f9931b9527444e6","modified":1647224238800},{"_id":"public/git2.html","hash":"8fd87887812eaf57388f47b4d81597339a515b58","modified":1647224238800},{"_id":"public/hexo.html","hash":"42d3944e58960dc9e62c247c7c267b2fb5b755e7","modified":1647224238800},{"_id":"public/tags/bash/index.html","hash":"a0c5c5f177ff9a0de9eed204335e0122eb3cd3b4","modified":1647224238800},{"_id":"public/tags/git/index.html","hash":"1485663fa5c6d47c59995b97f93712fe829e5829","modified":1647224238800},{"_id":"public/git2/git1.png","hash":"861313a0d822c58a4aa9127d8655ce0874af4257","modified":1646965892085},{"_id":"source/_posts/C面向对象.md","hash":"ca650afb3d39bf6adff9b05c9c63e258d4354f13","modified":1646976578312},{"_id":"public/c-mian-xiang-dui-xiang.html","hash":"0977adba688c93e468e3cd373fcec1b59314678a","modified":1647224238800},{"_id":"source/_posts/Eigen.md","hash":"7a05962aede383ecd141688898bcd59ad556c0ab","modified":1647173883238},{"_id":"source/_posts/c多线程.md","hash":"00a014918c5a88785d87e2089d095c57e89f08d0","modified":1647081708431},{"_id":"public/eigen.html","hash":"2ed497fd1851f815c6585f47a52c445ad09d196e","modified":1647224238800},{"_id":"public/c-duo-xian-cheng.html","hash":"39febab55ed45e42296576f4ca068efa551aa8c8","modified":1647224238800},{"_id":"source/_posts/Markdown语法.md","hash":"be825d1cba26976f5b0d19a36b9438a9183d3699","modified":1647224219242},{"_id":"public/markdown-yu-fa.html","hash":"9b328d075da031cc3c0f3cec662155d515f34604","modified":1647224238800}],"Category":[{"name":"Blog","_id":"cl0du52rn0003fie943e0dbva"}],"Data":[{"_id":"friends","data":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}]},{"_id":"musics","data":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}],"Page":[{"title":"404","date":"2019-07-19T08:41:10.000Z","type":"404","layout":"404","description":"你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n","updated":"2021-10-24T08:43:41.000Z","path":"404.html","comments":1,"_id":"cl0du52rh0000fie984mi3net","content":"","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":""},{"title":"about","date":"2020-01-01T08:41:10.000Z","type":"about","layout":"about","_content":"\n\n# 教育经历\n\n* <b>本科 计算机科学与技术</b>\n\n2019/09 - 现在\n<b>努力小白</b>\n\n\n\n# 联系方式\n\n* <b>电子邮箱</b>\n1571504536@qq.com\n* <b>地址</b>\n重庆市合川区交通路593号\n* <b>微信</b>\ngodxiaolong\n* <b>QQ</b>\n1571504536","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-01-01 16:41:10\ntype: \"about\"\nlayout: \"about\"\n---\n\n\n# 教育经历\n\n* <b>本科 计算机科学与技术</b>\n\n2019/09 - 现在\n<b>努力小白</b>\n\n\n\n# 联系方式\n\n* <b>电子邮箱</b>\n1571504536@qq.com\n* <b>地址</b>\n重庆市合川区交通路593号\n* <b>微信</b>\ngodxiaolong\n* <b>QQ</b>\n1571504536","updated":"2021-10-24T08:43:41.000Z","path":"about/index.html","comments":1,"_id":"cl0du52rm0002fie928w13rf5","content":"<h1 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h1><ul>\n<li><b>本科 计算机科学与技术</b></li>\n</ul>\n<p>2019&#x2F;09 - 现在<br><b>努力小白</b></p>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:&#x31;&#x35;&#x37;&#x31;&#53;&#x30;&#x34;&#53;&#51;&#x36;&#x40;&#x71;&#x71;&#46;&#99;&#x6f;&#109;\">&#x31;&#x35;&#x37;&#x31;&#53;&#x30;&#x34;&#53;&#51;&#x36;&#x40;&#x71;&#x71;&#46;&#99;&#x6f;&#109;</a></li>\n<li><b>地址</b><br>重庆市合川区交通路593号</li>\n<li><b>微信</b><br>godxiaolong</li>\n<li><b>QQ</b><br>1571504536</li>\n</ul>\n","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<h1 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h1><ul>\n<li><b>本科 计算机科学与技术</b></li>\n</ul>\n<p>2019&#x2F;09 - 现在<br><b>努力小白</b></p>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:&#x31;&#x35;&#x37;&#x31;&#53;&#x30;&#x34;&#53;&#51;&#x36;&#x40;&#x71;&#x71;&#46;&#99;&#x6f;&#109;\">&#x31;&#x35;&#x37;&#x31;&#53;&#x30;&#x34;&#53;&#51;&#x36;&#x40;&#x71;&#x71;&#46;&#99;&#x6f;&#109;</a></li>\n<li><b>地址</b><br>重庆市合川区交通路593号</li>\n<li><b>微信</b><br>godxiaolong</li>\n<li><b>QQ</b><br>1571504536</li>\n</ul>\n"},{"title":"archives","date":"2020-01-01T08:39:20.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2020-01-01 16:39:20\ntype: \"archives\"\nlayout: \"archives\"\n---","updated":"2021-10-24T08:43:41.000Z","path":"archives/index.html","comments":1,"_id":"cl0du52ro0005fie97i85e5kk","content":"","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":""},{"title":"categories","date":"2020-01-01T08:39:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-01-01 16:39:20\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2021-10-24T08:43:41.000Z","path":"categories/index.html","comments":1,"_id":"cl0du52rp0006fie9bwmrhcxd","content":"","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":""},{"title":"contact","date":"2020-01-01T09:17:02.000Z","type":"contact","layout":"contact","_content":"\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加我联系方式：\n* QQ：**1571504536**\n* 微信：**godxiaolong**\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n**当然不介意小改改加我哦~~**\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**godxiaolong\n* **地址：**https://www.yashwlon.com\n* **简介：**Yshawlon\n* **头像：**https://cdn.jsdelivr.net/gh/MUYIio/CDN@1.2/Images/avatars/favicon.jpg","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-01-01 17:17:02\ntype: \"contact\"\nlayout: \"contact\"\n---\n\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加我联系方式：\n* QQ：**1571504536**\n* 微信：**godxiaolong**\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n**当然不介意小改改加我哦~~**\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**godxiaolong\n* **地址：**https://www.yashwlon.com\n* **简介：**Yshawlon\n* **头像：**https://cdn.jsdelivr.net/gh/MUYIio/CDN@1.2/Images/avatars/favicon.jpg","updated":"2021-10-24T08:43:41.000Z","path":"contact/index.html","comments":1,"_id":"cl0du52rp0007fie99nqm2x56","content":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加我联系方式：</p>\n<ul>\n<li>QQ：<strong>1571504536</strong></li>\n<li>微信：<strong>godxiaolong</strong></li>\n</ul>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。<br><strong>当然不介意小改改加我哦~~</strong></p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>godxiaolong</li>\n<li><strong>地址：</strong><a href=\"https://www.yashwlon.com/\">https://www.yashwlon.com</a></li>\n<li><strong>简介：</strong>Yshawlon</li>\n<li><strong>头像：</strong><a href=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@1.2/Images/avatars/favicon.jpg\">https://cdn.jsdelivr.net/gh/MUYIio/CDN@1.2/Images/avatars/favicon.jpg</a></li>\n</ul>\n","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加我联系方式：</p>\n<ul>\n<li>QQ：<strong>1571504536</strong></li>\n<li>微信：<strong>godxiaolong</strong></li>\n</ul>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。<br><strong>当然不介意小改改加我哦~~</strong></p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>godxiaolong</li>\n<li><strong>地址：</strong><a href=\"https://www.yashwlon.com/\">https://www.yashwlon.com</a></li>\n<li><strong>简介：</strong>Yshawlon</li>\n<li><strong>头像：</strong><a href=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@1.2/Images/avatars/favicon.jpg\">https://cdn.jsdelivr.net/gh/MUYIio/CDN@1.2/Images/avatars/favicon.jpg</a></li>\n</ul>\n"},{"title":"friends","date":"2020-01-01T08:42:10.000Z","type":"friends","layout":"friends","_content":"\n# 赞赏名单\n感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！\n`panakot`\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**Tyzhao\n* **地址：**https://www.muyiio.com\n* **简介：**Yshawlon\n* **头像：**https://cdn.jsdelivr.net/gh/MUYIio/CDN@1.2/Images/avatars/favicon.jpg","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2020-01-01 16:42:10\ntype: \"friends\"\nlayout: \"friends\"\n---\n\n# 赞赏名单\n感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！\n`panakot`\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**Tyzhao\n* **地址：**https://www.muyiio.com\n* **简介：**Yshawlon\n* **头像：**https://cdn.jsdelivr.net/gh/MUYIio/CDN@1.2/Images/avatars/favicon.jpg","updated":"2021-10-24T08:43:41.000Z","path":"friends/index.html","comments":1,"_id":"cl0du52rq0009fie9bw2u46f2","content":"<h1 id=\"赞赏名单\"><a href=\"#赞赏名单\" class=\"headerlink\" title=\"赞赏名单\"></a>赞赏名单</h1><p>感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！<br><code>panakot</code></p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>Tyzhao</li>\n<li><strong>地址：</strong><a href=\"https://www.muyiio.com/\">https://www.muyiio.com</a></li>\n<li><strong>简介：</strong>Yshawlon</li>\n<li><strong>头像：</strong><a href=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@1.2/Images/avatars/favicon.jpg\">https://cdn.jsdelivr.net/gh/MUYIio/CDN@1.2/Images/avatars/favicon.jpg</a></li>\n</ul>\n","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<h1 id=\"赞赏名单\"><a href=\"#赞赏名单\" class=\"headerlink\" title=\"赞赏名单\"></a>赞赏名单</h1><p>感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！<br><code>panakot</code></p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>Tyzhao</li>\n<li><strong>地址：</strong><a href=\"https://www.muyiio.com/\">https://www.muyiio.com</a></li>\n<li><strong>简介：</strong>Yshawlon</li>\n<li><strong>头像：</strong><a href=\"https://cdn.jsdelivr.net/gh/MUYIio/CDN@1.2/Images/avatars/favicon.jpg\">https://cdn.jsdelivr.net/gh/MUYIio/CDN@1.2/Images/avatars/favicon.jpg</a></li>\n</ul>\n"},{"title":"tags","date":"2020-01-01T08:40:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-01-01 16:40:27\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2021-10-24T08:43:41.000Z","path":"tags/index.html","comments":1,"_id":"cl0du52rr000afie9grjd6xun","content":"","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":""}],"Post":[{"title":"Github + Hexo 搭建个人博客超详细教程","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2020-02-18T13:17:35.000Z","password":null,"summary":"搭建博客的初衷是希望用博客记录下自己的学习过程，帮助自己复习。","_content":"![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/01.png)\n\n<font color=magenta size=4>**在搭建过程中遇到问题欢迎来骚扰我哈！<font color=red size=4> V：godxiaolong，QQ:1571504536</font>，如果觉得有帮助的话不介意打赏一杯奶茶哟~**</font>\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/02.png)\n\n# 前言 #\n- 作为一名计算机爱好者，摸索了一周搭建出自己的博客。目前只学    习了c语言，没有任何前端知识和网站开发经验，总的来说，算不上很难，     但也要费些心思。网上各类教程应有尽有，只要肯摸索，还是水到渠成的事。另外，写下这篇文章，记录下自己的经验，给需要的朋友，祝你早日拥有自己的博客！\n\n- 搭建博客的初衷是希望用博客记录下自己的学习过程，帮助自己复习，分享一部分不成熟的思考，敦促自己把既定的目标完成。\n- **为什么要搭建自己的博客？可以看看这三篇文章：**\n\n[《为什么你应该（从现在开始就）写博客》](http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/ \"为什么你应该（从现在开始就）写博客\")   (By 刘未鹏 | Mind Hacks)\n\n[《为什么要自建博客？》](https://www.zhihu.com/question/19916345 \"为什么要自建博客？\")   (By 知乎)\n\n[《我为什么写博客》](https://www.cnblogs.com/jhzhu/p/3893297.html \"我为什么写博客\") （By 知明所以）\n\n\n我们需要知道搭建博客要用到的框架。<font color=red size=3>Hexo</font>是高效的静态站点生成框架，它基于<font color=red size=3>Node.js</font>。我们使用<font color=red size=3>MarkDown</font>在本地编辑我们的博客文章，通过<font color=red size=3>Hexo</font>生成静态页面，再用两条命令即可部署到我们的网站。无需关心网页源代码的具体细节，我们只需要用心写好自己的博客内容就行。\n\n## 本文目录 ##\n- **快速搭建**\n- 安装<font color=red size=3>Node.js</font>\n- 添加国内镜像\n- 安装<font color=red size=3>Git </font>\n- 注册<font color=red size=3>Github</font>账号\n- 创建<font color=red size=3>Git</font>仓库\n- 安装<font color=red size=3>Hexo</font> \n- 配置本地<font color=red size=3>Hexo</font>\n- 连接<font color=red size=3>Github</font>与本地 \n- 写文章、发布文章 \n- <font color=red size=3>MarkDown</font>文章编辑器说明\n- 配置个性化域名\n- 更换自己喜欢的<font color=red size=3>Hexo</font>主题\n- 我的博客源代码\n- 结语\n\n----\n\n# 快速搭建 #\n有的朋友可能不想去折腾，自定义主题也比较麻烦，亦或有尝试几次搭建却失败，那就可以看这部分。快速搭建可以帮助我们更快搭建出自己的博客，优点是别人博客有的东西你都有，就跟复制差不多；缺点是博客里的配置信息都是别人的，不过不要紧，稍稍改改配置就可以。\n\n在这里以我的博客为例。\n\n## 一、下载博客源代码 ##\n\n大家可以直接素质二连，<font color=red size=3>Star&Fork</font>我的博客源代码：<https://github.com/MUYIio/hexo-themes-matery>，这里我给出两种下载方法：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/03.png)\n\n**第一种**：直接<font color=red size=3>DownLoad</font>，下载到本地就可以。（**不推荐**）\n\n**第二种**：如果你已经安装了[Git](https://git-scm.com/download/win \"Git\")，就可以右键单击<font color=red size=3>Come Bash Here</font>运行\n\n\n\n```bash\ngit clone git@github.com:MUYIio/hexo-themes-matery.git\n```\n\n\n\n将所有文件下载到本地，这个复杂一点。\n\n## 二、修改博客文档配置 ##\n\n首先将我们下载的博客源代码解压，然后修改主要配置：\n\n- 根目录配置文件<font color=red size=3>_config.yml</font>和主题目录配置文件<font color=red size=3>_config.yml</font>中修改个人信息。\n- 根目录配置文件中修改<font color=red size=3>deploy</font>一栏的<font color=red size=3>repository</font>。\n- 根目录配置文件中修改<font color=red size=3>baidu_url_submit</font>一栏的<font color=red size=3>token</font>。\n- 主题配置文件中修改<font color=red size=3>gitalk</font>一栏，修改方法见正文。\n\n我给出的是博客比较明显的几个地方，先修改这几个地方，其它的可以自己慢慢摸索修改。\n\n最后一步，**本地的运行环境还是需要搭建好的**，跟着下文操作到连接Github与本地，环境就算是搭建完成。\n\n**本地环境搭建好之后会生成的文件：**\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/35.png)\n\n然后直接把<font color=red size=3>Hexo</font>文件夹里面的文件删掉，把我的源代码的文件全部移动过来，就是这样了：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/37.png)\n\n然后在<font color=red size=3>Hexo</font>文件夹下右键单击鼠标，点击 <font color=red size=3>Git Bash Here</font>点击输入以下命令上传就可以了：\n\n    hexo clean\n    hexo g\n    hexo d\n\n# 安装Node.js #\n了解一下什么是<font color=red size=3>Node.js</font>：\n\n> <font color=red size=3>Node.js</font>就是一个用于创建服务器端应用程序的运行系统，它可以轻松构建网络或其他事件驱动的应用程序服务器。\n\n需要用到的命令：\n        \n    $ git --version\n    $ node -v\n    $ npm -v\n\n[点击此处](https://nodejs.org/en/download/ \"Node.js\")进入<font color=red size=3>Node.js</font>官网下载相应版本即可，安装时选项全部默认，一路点击<font color=red size=3>Next</font>。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/04.png)\n\n检验是否安装成功：\n按<font color=red size=3>Win+R</font>打开命令提示符，输入<font color=red size=3>node -v</font>和<font color=red size=3>npm -v</font>，如果出现版本号，那么就安装成功了。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/05.png)\n\n# 添加国内镜像 #\n这里我们使用阿里的国内镜像进行加速，按Win+R打开命令提示符输入：\n\n    npm config set registry https://registry.npm.taobao.org\n\n# 安装Git #\n> <font color=red size=3>Git</font>是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理，帮助我们把本地网页上传到<font color=red size=3>Github</font>。\n\n[点击此处](https://git-scm.com/download/win \"Git\")进入Git官网下载相应版本，默认安装即可。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/005.png)\n\n参考资料：[《如何在windows下安装GIT》](https://www.cnblogs.com/jytx/p/5602927.html \"如何在windows下安装GIT\") (By 俊雨廷休)\n\n检验是否安装成功：\n\n安装完成后在命令提示符中输入<font color=red size=3>git --version</font>验证是否安装成功\n\n    git --version\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/06.png)\n\n# 注册Github账号 #\n\n<font color=red size=3>Github</font>作为全球最大的开源社区，相信朋友们都已经有了吧，如果没有，[点击此处](https://github.com/ \"Github\")进入<font color=red size=3>Github</font>官网点击 <font color=red size=3>Sign Up </font>注册账户。\n\n# 创建git仓库 #\n登录<font color=red size=3>Github</font>创建一个仓库\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/07.png)\n\n如下图所示，**输入自己的项目名字，后面一定要加<font color=red size=3>.github.io</font>后缀，<font color=red size=3>README</font>初始化也要勾上。名称一定要和你的<font color=red size=3>Github</font>名字完全一样，比如你<font color=red size=3>github</font>名字叫<font color=red size=3>A</font>，那么仓库名字一定要是<font color=red size=3>A.github.io</font>。**\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/08.png)\n\n选择一个自己喜欢的主题：\n在上面创建的仓库里面点击<font color=red size=3>Settings</font>（不是头像下面那个<font color=red size=3>Settings</font>），向下拉到最后有个<font color=red size=3>GitHub Pages</font>，点击<font color=red size=3>Choose a theme</font>选择一个主题。然后等一会儿，再回到<font color=red size=3>GitHub Pages</font>，就可以预览效果啦。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/09.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/10.png)\n\n# 安装Hexo #\n> <font color=red size=3>Hexo</font>是一款基于<font color=red size=3>Node.js</font>的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在<font color=red size=3>GitHub</font>和<font color=red size=3>Heroku</font>上，是搭建博客的首选框架。\n\n选择一个磁盘，新建一个文件夹用来存放博客文件。比如我的<font color=red size=3>（C/panakot Blog）</font>，在该文件夹下右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>，输入以下<font color=red size=3> npm </font>命令即可安装\n\n    $ npm install hexo-cli -g\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/11.png)\n\n输入<font color=red size=3>hexo -v</font>即可检验是否安装成功，我这里就不演示了。\n\n# 配置本地hexo #\n还是在刚才新建的文件夹下再新建一个<font color=red size=3>Hexo</font>文件夹，比如我的<font color=red size=3>（C/panakot Blog/Hexo）</font>，在<font color=red size=3>Hexo</font>文件夹下右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>，依次输入以下<font color=red size=3> npm </font>命令即可初始化。\n\n    hexo init\n    npm install\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/12.png)\n\n初始化成功生成的文件：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/13.png)\n\n接着我们输入<font color=red size=3>hexo g</font>生成静态网页，然后输入<font color=red size=3>hexo s</font>打开本地服务器，然后浏览器打开<http://localhost:4000/>，就可以预览我们的博客啦，如图：\n\n显示以下信息说明操作正确：\n\n```INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.```\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/14.png)\n\n按<font color=red size=3>ctrl+c</font>关闭本地服务器。\n\n**我们以后常用到的<font color=red size=3>Hexo</font>命令：**\n\n- <font color=red size=3>hexo s</font>等价于 <font color=red size=3>hexo server</font>  #<font color=red size=3>Hexo</font> 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。\n\n- <font color=red size=3>hexo g</font> 等价于 <font color=red size=3>hexo generate</font>  #生成静态网页 (执行 $ <font color=red size=3>hexo g</font>后会在站点根目录下生成<font color=red size=3>public</font>文件夹,<font color=red size=3> hexo</font>会将\"<font color=red size=3>/blog/source/</font>\" 下面的<font color=red size=3>.md</font>后缀的文件编译为<font color=red size=3>.html</font>后缀的文件,存放在\"<font color=red size=3>/blog/public/ </font>\" 路径下)\n\n- <font color=red size=3>hexo d </font>等价于 <font color=red size=3>hexo deploy</font>  #将本地数据部署到远端服务器(如<font color=red size=3>github</font>)\n- <font color=red size=3>hexo clean </font> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的<font color=red size=3>public</font>文件夹\n\n# 连接Github与本地 #\n## 一、生成密钥 ##\n\n右键单击鼠标，点击 <font color=red size=3>Git Bash Here</font>输入以下命令：\n\n    git config --global user.name \"Name\"\n    git config --global user.email \"Email\"\n\n**<font color=red size=3>Name</font>和<font color=red size=3>Email</font>是我们注册<font color=red size=3>Github</font>时的用户名和邮箱。**\n\n然后生成密钥：\n\n    ssh-keygen -t rsa -C \"Email\"\n\n\n**<font color=red size=3>Email</font>是我们注册<font color=red size=3>Github</font>时的邮箱**\n\n然后会出现：\n\n    Generating public/private rsa key pair.\n    Enter file in which to save the key (/c/Users/you/.ssh/id_rsa):\n    //到这里可以直接回车将密钥按默认文件进行存储\n\n回车之后：\n\n    Enter passphrase (empty for no passphrase):\n    //这里是要你输入密码，其实不需要输什么密码，直接回车就行\n    Enter same passphrase again:\n\n接下来会有：\n\n    Your identification has been saved in /c/Users/you/.ssh/id_rsa.\n    Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.\n    The key fingerprint is:\n    这里是各种字母数字组成的字符串，结尾是你的邮箱\n    The key's randomart image is:\n    这里也是各种字母数字符号组成的字符串\n\n现在密钥已经生成，一般存放在<font color=red size=3>（/c/Users/you/.ssh/id_rsa.pub.）</font>，我们运行下面的命令将密钥复制为粘贴板：\n\n     clip < ~/.ssh/id_rsa.pub\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/15.png)\n\n## 二、连接Github ##\n在<font color=red size=3>Github</font>头像下面点击<font color=red size=3>Settings</font>，再点击<font color=red size=3>SSH and GPG keys</font>，新建一个<font color=red size=3>SSH</font>，名字任意。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/16.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/17.png)\n\n然后将刚才复制的密钥添加就可以了，像这样：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/18.png)\n\n**本地连接Github**\n\n右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>输入以下命令，如果如下图所示，出现你的用户名，那就成功了\n\n    ssh -T git@github.com\n    //注意不要做任何修改\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/19.png)\n\n用记事本打开博客根目录下的<font color=red size=3>_config.yml</font>文件，这是博客的配置文件，我们需要修改一下才能连接<font color=red size=3>Github</font>。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/20.png)\n\n修改最后一行的配置：\n\n    # Deployment\n    ## Docs: https://hexo.io/docs/deployment.html\n    deploy:\n      type:\n改为：\n\n    # Deployment\n    ## Docs: https://hexo.io/docs/deployment.html\n    deploy:\n      type: git\n      repository: git@github.com:panakot/panakot.github.io.git\n      branch: master\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/21.png)\n\n切记：\n\n- **<font color=red size=3>repository</font>修改为你自己的<font color=red size=3>github</font>项目地址**。\n- **每一个冒号后面都有一个空格。**\n\n# 写文章、发布文章 #\n首先在博客根目录下右键打开<font color=red size=3>Git Bash Here</font>输入以下命令，安装一个扩展.\n\n    npm i hexo-deployer-git\n\n然后输入下面的命令，新建一篇文章。\n\n    hexo new post \"article title\"\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/22.png)\n\n然后打开<font color=red size=3>C:\\panakot Blog\\Hexo\\source\\_posts</font>的目录，可以发现下面多了一个文件夹和一个<font color=red size=3>.md</font>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/23.png)\n\n编写完<font color=red size=3>markdown</font>文件后，根目录下右键打开<font color=red size=3>Git Bash Here</font>输入<font color=red size=3>hexo g</font>生成静态网页，然后输入<font color=red size=3>hexo s</font>可以本地预览效果，最后输入<font color=red size=3>hexo d</font>上传到<font color=red size=3>github</font>上。\n\n你的博客地址：<font color=red size=3>https://你的用户名.github.io</font>，比如我的是：<https://muyiio.github.io>，现在每个人都可以通过此链接访问你的博客\n\n# MarkDown文章编辑器说明 #\n> 前面我们提到了使用<font color=red size=3>MarkDown</font>编辑我们的博客文章。<font color=red size=3> Markdown</font> 是<font color=red size=3> 2004</font> 年由 <font color=red size=3>John Gruberis </font>设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会，<font color=red size=3> .md </font>文件可以使用支持 <font color=red size=3>Markdown </font>语法的编辑器编辑，然后将写好的文章<font color=red size=3>（.md文件）</font>保存到<font color=red size=3> \\Hexo\\source\\_posts </font>文件夹下即可。\n\n <font color=red size=3>Windows </font>上推荐使用 <font color=red size=3>MarkdownPad2 </font>或者<font color=red size=3>小书匠</font>编辑器，<font color=red size=3>macOS </font>上使用<font color=red size=3> Mou</font> 编辑器，<font color=red size=3>Linux </font>上使用 <font color=red size=3>Remarkable</font> 编辑器，<font color=red size=3>Web </font>端上使用 简书。\n\n**[点击此处](http://markdownpad.com/download.html \"MarkDown\")下载<font color=red size=3>MarkDown</font>\n，刚使用的朋友或许不知道如何使用这个编辑器，只需要几分钟就可以掌握啦，给出以下几个我觉得不错的参考：**\n\n[《献给写作者的 Markdown 新手指南》](https://www.jianshu.com/p/q81RER/ \"献给写作者的 Markdown 新手指南\") （By 简书）\n\n[《Markdown语法图文全面详解(10分钟学会)》](https://blog.csdn.net/u014061630/article/details/81359144?utm_source=app \"Markdown语法图文全面详解\")（By 黑暗星球）\n\n[《Markdown 语法手册 （完整整理版）》](https://blog.csdn.net/witnessai1/article/details/52551362?utm_source=app \"Markdown 语法手册 （完整整理版）\") （By witnessai1）\n\n[《认识与入门 Markdown》](https://sspai.com/post/25137 \"认识与入门 Markdown\")（By Te_Lee）\n\n写完文章记得在博客根目录<font color=red size=3>Bash Here</font>输入<font color=red size=3>hexo g</font>和<font color=red size=3>hexo d</font>上传到网站。\n# 配置个性化域名 #\n一顿操作下来，打开我们的博客还是：<font color=red size=3>www.xxx.github.io</font>，是不是很没有牌面？我们可以考虑购买一个专属域名，以后打开博客就是这样：<font color=red size=3>www.xxx.com </font>。\n\n[阿里云](https://www.aliyun.com/ \"阿里云\")和[腾讯云](https://cloud.tencent.com/ \"腾讯云\")都可以，我的是腾讯云，购买域名后首先需要添加解析：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/24.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/25.png)\n\n**方法一：**点击添加记录，需要添加两个记录，两个记录类型都是 <font color=red size=3>CNAME </font>，第一个主机记录为<font color=red size=3> @ </font>，第二个主机记录为<font color=red size=3> www</font>，记录值都是填你自己的博客地址（比如我的是：<font color=red size=3>muyiio.github.io</font>），保存之后域名解析就完成了！\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/27.png)\n\n**方法二：**两个记录类型为<font color=red size=3> A </font>，第一个主机记录为<font color=red size=3> @ </font>，第二个主机记录为<font color=red size=3> www</font>，记录值都为博客的<font color=red size=3> IP</font> 地址，<font color=red size=3>IP </font>地址可以<font color=red size=3> cmd</font> 中输入<font color=red size=3> ping</font> 你的博客地址 获得（比如我的：<font color=red size=3>ping muyiio.github.io</font>），保存之后域名解析就完成了！\n\n参考资料：\n\n[《域名解析中A记录、CNAME、MX记录、NS记录的区别和联系》](https://blog.csdn.net/it_man/article/details/9017307 \"域名解析中A记录、CNAME、MX记录、NS记录的区别和联系\")\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/26.png)\n\n**不管在哪个平台购买域名，操作都大同小异，这里说明两点**：\n\n> 如果你填写的是没有<font color=red size=3>www</font>的，比如 <font color=red size=3>muyio.com</font>，那么无论是访问<font color=red size=3> https://www.muyiio.com </font>还是<font color=red size=3> https://muyiio.com</font> ，都会自动跳转到<font color=red size=3> https://muyiio.com</font>。\n\n\n> 如果你填写的是带<font color=red size=3>www</font>的，比如 <font color=red size=3>www.muyiio.com </font>，那么无论是访问 <font color=red size=3>https://www.muyiio.com</font> 还是 <font color=red size=3>https://muyiio.com </font>，都会自动跳转到 <font color=red size=3>http://www.imuyiio.com</font>。\n\n然后打开你的<font color=red size=3>github</font>博客项目，点击settings，拉到下面<font color=red size=3>Custom domain</font>处，填上你自己的域名，保存就可以了。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/28.png)\n\n现在我们的项目根目录应该会出现一个名为<font color=red size=3>CNAME</font>的文件了。如果没有的话，打开你本地博客<font color=red size=3>/source</font>目录，我的是<font color=red size=3>C:\\Blog\\Hexo\\source</font>，新建<font color=red size=3>CNAME</font>文件，<font color=red size=3>（注意不要加.txt，没有任何后缀名！）</font>。然后在里面写上你的域名，保存。最后运行<font color=red size=3>hexo g、hexo d</font>上传到<font color=red size=3>github</font>。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/29.png)\n\n现在就可以通过我们的个性化域名：<font color=red size=3>www.xxx.com、xxx.com</font>访问自己的博客了。\n\n# 更换自己喜欢的Hexo主题 #\n点击进入[Hexo主题专栏](https://hexo.io/themes/ \"Hexo主题专栏\")可以看到很多<font color=red size=3>Hexo</font>主题：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/30.png)\n\n推荐：\n\n[几个好用的hexo主题](https://blog.csdn.net/fail_perfectly/article/details/83791781?utm_source=app \"几个好用的hexo主题\") (By fail_perfectly)\n\n这里我们以[Bean Tech](http://huangxuan.me/ \"Bean Tech\")主题为例，下滑到底部我们可以看到他的<font color=red size=3>GitHub</font>（<font color=red size=3>有的主题是：Theme by xxx，点击那里也是进入GitHub地址</font>）：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/31.png)\n\n点击进入主题的<font color=red size=3>GitHub</font>地址：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/32.png)\n\n复制该项目地址：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/33.png)\n\n然后打开<font color=red size=3> Hexo </font>文件夹下的<font color=red size=3> themes</font> 目录（如：<font color=red size=3>C:\\MUYIio Blog\\Hexo\\themes</font>），右键<font color=red size=3> Git Bash Here</font>，输入以下命令：\n\n    $ git clone 此处填写你刚才复制的主题地址\n\n以我们刚才复制的为例：\n\n    $ git clone https://github.com/Huxpro/huxpro.github.io\n\n下载完成后即可在<font color=red size=3> themes </font>目录下生成 <font color=red size=3>hexo-theme-Bean-Tech </font>文件夹，然后打开 <font color=red size=3>Hexo</font> 文件夹下的配置文件 <font color=red size=3>_config.yml </font>，找到关键字 <font color=red size=3>theme</font>，修改参数为：<font color=red size=3>theme：hexo-theme-Bean-Tech </font>（其他主题修改成相应名称即可），**再次注意冒号后面有一个空格！**\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/34.png)\n\n现在我们的主题已经替换完成，将它部署到我们的博客，博客根目录下右键<font color=red size=3> Git Bash Here</font>，输入以下命令：\n\n    hexo clean\n    hexo g\n    hexo d\n\n现在访问我们的网站就可以看到主题已经更换了，但是比如网站标题，图标等都没有更换，我们博客文件中有两份主要的配置文件，名称都是 <font color=red size=3>_config.yml</font> ，它们均是用于站点配置使用的。其中，一份位于站点根目录下（比如我的：<font color=red size=3>C:\\MUYIio Blog\\Hexo\\_config.yml</font>），主要包含<font color=red size=3> Hexo</font> 本身整站的配置；另一份位于主题目录下（比如我的：<font color=red size=3>C:\\MUYIio Blog\\Hexo\\themes\\hexo-theme-matery\\_config.yml</font>），这份配置由主题作者提供，主要用于配置主题相关的选项，一般<font color=red size=3> _config.yml </font>文件里都有相关注释，按需修改即可。\n\n\n# 我的博客源代码 #\n**我的博客源代码地址：<https://github.com/MUYIio/hexo-themes-matery>，有心的话可以给个<font color=red size=3>Star&Fork</font>。**\n\n下载源代码：git clone git@github.com:MUYIio/hexo-themes-matery.git\n\n\n\n在文章开头给出了快速搭建教程，相对于自己从头开始搭建还是比较方便的，修复了很多<font color=red size=3>Bug</font>，也添加了一些插件，下载就可以使用，可以帮你们省去个性化配置带来的很多麻烦。\n\n主题的原地址在这里：[hexo-theme-matery](https://github.com/blinkfox/hexo-theme-matery)，作者把文档写得也非常的详细，还有中英文两个版本，建议可以多看几遍，在本地修改的时候轻松一些。\n\n使用我的源代码之前本地的环境还是要搭建好，就是前面一部分。\n\n\n<table><tr><td bgcolor=orange>\n-----------------------------------------------------------------------------------------------------------                                                                                                                                                                                                            \n</td></tr></table>\n\n# 结语 #\n初学者可能会觉得困难，毕竟很多东西都是第一次接触，当初我也尝试了好几次才成功，不要放弃，弄错了就删掉重新来过，当你把博客搭建出来会觉得受益良多的。\n\n文章中难免有错误的地方，有大佬发现了欢迎给我指正！有的地方解释不够详细，可以百度一下看看细节，文章中的引用以及参考资料涉及侵权请联系我删除！\n","source":"_posts/1.md","raw":"---\ntitle: Github + Hexo 搭建个人博客超详细教程\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-02-18 21:17:35\npassword:\nsummary: 搭建博客的初衷是希望用博客记录下自己的学习过程，帮助自己复习。\ntags:\n- Github\n- Hexo\n- 博客搭建\ncategories:\n- Blog\n---\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/01.png)\n\n<font color=magenta size=4>**在搭建过程中遇到问题欢迎来骚扰我哈！<font color=red size=4> V：godxiaolong，QQ:1571504536</font>，如果觉得有帮助的话不介意打赏一杯奶茶哟~**</font>\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/02.png)\n\n# 前言 #\n- 作为一名计算机爱好者，摸索了一周搭建出自己的博客。目前只学    习了c语言，没有任何前端知识和网站开发经验，总的来说，算不上很难，     但也要费些心思。网上各类教程应有尽有，只要肯摸索，还是水到渠成的事。另外，写下这篇文章，记录下自己的经验，给需要的朋友，祝你早日拥有自己的博客！\n\n- 搭建博客的初衷是希望用博客记录下自己的学习过程，帮助自己复习，分享一部分不成熟的思考，敦促自己把既定的目标完成。\n- **为什么要搭建自己的博客？可以看看这三篇文章：**\n\n[《为什么你应该（从现在开始就）写博客》](http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/ \"为什么你应该（从现在开始就）写博客\")   (By 刘未鹏 | Mind Hacks)\n\n[《为什么要自建博客？》](https://www.zhihu.com/question/19916345 \"为什么要自建博客？\")   (By 知乎)\n\n[《我为什么写博客》](https://www.cnblogs.com/jhzhu/p/3893297.html \"我为什么写博客\") （By 知明所以）\n\n\n我们需要知道搭建博客要用到的框架。<font color=red size=3>Hexo</font>是高效的静态站点生成框架，它基于<font color=red size=3>Node.js</font>。我们使用<font color=red size=3>MarkDown</font>在本地编辑我们的博客文章，通过<font color=red size=3>Hexo</font>生成静态页面，再用两条命令即可部署到我们的网站。无需关心网页源代码的具体细节，我们只需要用心写好自己的博客内容就行。\n\n## 本文目录 ##\n- **快速搭建**\n- 安装<font color=red size=3>Node.js</font>\n- 添加国内镜像\n- 安装<font color=red size=3>Git </font>\n- 注册<font color=red size=3>Github</font>账号\n- 创建<font color=red size=3>Git</font>仓库\n- 安装<font color=red size=3>Hexo</font> \n- 配置本地<font color=red size=3>Hexo</font>\n- 连接<font color=red size=3>Github</font>与本地 \n- 写文章、发布文章 \n- <font color=red size=3>MarkDown</font>文章编辑器说明\n- 配置个性化域名\n- 更换自己喜欢的<font color=red size=3>Hexo</font>主题\n- 我的博客源代码\n- 结语\n\n----\n\n# 快速搭建 #\n有的朋友可能不想去折腾，自定义主题也比较麻烦，亦或有尝试几次搭建却失败，那就可以看这部分。快速搭建可以帮助我们更快搭建出自己的博客，优点是别人博客有的东西你都有，就跟复制差不多；缺点是博客里的配置信息都是别人的，不过不要紧，稍稍改改配置就可以。\n\n在这里以我的博客为例。\n\n## 一、下载博客源代码 ##\n\n大家可以直接素质二连，<font color=red size=3>Star&Fork</font>我的博客源代码：<https://github.com/MUYIio/hexo-themes-matery>，这里我给出两种下载方法：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/03.png)\n\n**第一种**：直接<font color=red size=3>DownLoad</font>，下载到本地就可以。（**不推荐**）\n\n**第二种**：如果你已经安装了[Git](https://git-scm.com/download/win \"Git\")，就可以右键单击<font color=red size=3>Come Bash Here</font>运行\n\n\n\n```bash\ngit clone git@github.com:MUYIio/hexo-themes-matery.git\n```\n\n\n\n将所有文件下载到本地，这个复杂一点。\n\n## 二、修改博客文档配置 ##\n\n首先将我们下载的博客源代码解压，然后修改主要配置：\n\n- 根目录配置文件<font color=red size=3>_config.yml</font>和主题目录配置文件<font color=red size=3>_config.yml</font>中修改个人信息。\n- 根目录配置文件中修改<font color=red size=3>deploy</font>一栏的<font color=red size=3>repository</font>。\n- 根目录配置文件中修改<font color=red size=3>baidu_url_submit</font>一栏的<font color=red size=3>token</font>。\n- 主题配置文件中修改<font color=red size=3>gitalk</font>一栏，修改方法见正文。\n\n我给出的是博客比较明显的几个地方，先修改这几个地方，其它的可以自己慢慢摸索修改。\n\n最后一步，**本地的运行环境还是需要搭建好的**，跟着下文操作到连接Github与本地，环境就算是搭建完成。\n\n**本地环境搭建好之后会生成的文件：**\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/35.png)\n\n然后直接把<font color=red size=3>Hexo</font>文件夹里面的文件删掉，把我的源代码的文件全部移动过来，就是这样了：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/37.png)\n\n然后在<font color=red size=3>Hexo</font>文件夹下右键单击鼠标，点击 <font color=red size=3>Git Bash Here</font>点击输入以下命令上传就可以了：\n\n    hexo clean\n    hexo g\n    hexo d\n\n# 安装Node.js #\n了解一下什么是<font color=red size=3>Node.js</font>：\n\n> <font color=red size=3>Node.js</font>就是一个用于创建服务器端应用程序的运行系统，它可以轻松构建网络或其他事件驱动的应用程序服务器。\n\n需要用到的命令：\n        \n    $ git --version\n    $ node -v\n    $ npm -v\n\n[点击此处](https://nodejs.org/en/download/ \"Node.js\")进入<font color=red size=3>Node.js</font>官网下载相应版本即可，安装时选项全部默认，一路点击<font color=red size=3>Next</font>。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/04.png)\n\n检验是否安装成功：\n按<font color=red size=3>Win+R</font>打开命令提示符，输入<font color=red size=3>node -v</font>和<font color=red size=3>npm -v</font>，如果出现版本号，那么就安装成功了。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/05.png)\n\n# 添加国内镜像 #\n这里我们使用阿里的国内镜像进行加速，按Win+R打开命令提示符输入：\n\n    npm config set registry https://registry.npm.taobao.org\n\n# 安装Git #\n> <font color=red size=3>Git</font>是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理，帮助我们把本地网页上传到<font color=red size=3>Github</font>。\n\n[点击此处](https://git-scm.com/download/win \"Git\")进入Git官网下载相应版本，默认安装即可。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/005.png)\n\n参考资料：[《如何在windows下安装GIT》](https://www.cnblogs.com/jytx/p/5602927.html \"如何在windows下安装GIT\") (By 俊雨廷休)\n\n检验是否安装成功：\n\n安装完成后在命令提示符中输入<font color=red size=3>git --version</font>验证是否安装成功\n\n    git --version\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/06.png)\n\n# 注册Github账号 #\n\n<font color=red size=3>Github</font>作为全球最大的开源社区，相信朋友们都已经有了吧，如果没有，[点击此处](https://github.com/ \"Github\")进入<font color=red size=3>Github</font>官网点击 <font color=red size=3>Sign Up </font>注册账户。\n\n# 创建git仓库 #\n登录<font color=red size=3>Github</font>创建一个仓库\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/07.png)\n\n如下图所示，**输入自己的项目名字，后面一定要加<font color=red size=3>.github.io</font>后缀，<font color=red size=3>README</font>初始化也要勾上。名称一定要和你的<font color=red size=3>Github</font>名字完全一样，比如你<font color=red size=3>github</font>名字叫<font color=red size=3>A</font>，那么仓库名字一定要是<font color=red size=3>A.github.io</font>。**\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/08.png)\n\n选择一个自己喜欢的主题：\n在上面创建的仓库里面点击<font color=red size=3>Settings</font>（不是头像下面那个<font color=red size=3>Settings</font>），向下拉到最后有个<font color=red size=3>GitHub Pages</font>，点击<font color=red size=3>Choose a theme</font>选择一个主题。然后等一会儿，再回到<font color=red size=3>GitHub Pages</font>，就可以预览效果啦。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/09.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/10.png)\n\n# 安装Hexo #\n> <font color=red size=3>Hexo</font>是一款基于<font color=red size=3>Node.js</font>的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在<font color=red size=3>GitHub</font>和<font color=red size=3>Heroku</font>上，是搭建博客的首选框架。\n\n选择一个磁盘，新建一个文件夹用来存放博客文件。比如我的<font color=red size=3>（C/panakot Blog）</font>，在该文件夹下右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>，输入以下<font color=red size=3> npm </font>命令即可安装\n\n    $ npm install hexo-cli -g\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/11.png)\n\n输入<font color=red size=3>hexo -v</font>即可检验是否安装成功，我这里就不演示了。\n\n# 配置本地hexo #\n还是在刚才新建的文件夹下再新建一个<font color=red size=3>Hexo</font>文件夹，比如我的<font color=red size=3>（C/panakot Blog/Hexo）</font>，在<font color=red size=3>Hexo</font>文件夹下右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>，依次输入以下<font color=red size=3> npm </font>命令即可初始化。\n\n    hexo init\n    npm install\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/12.png)\n\n初始化成功生成的文件：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/13.png)\n\n接着我们输入<font color=red size=3>hexo g</font>生成静态网页，然后输入<font color=red size=3>hexo s</font>打开本地服务器，然后浏览器打开<http://localhost:4000/>，就可以预览我们的博客啦，如图：\n\n显示以下信息说明操作正确：\n\n```INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.```\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/14.png)\n\n按<font color=red size=3>ctrl+c</font>关闭本地服务器。\n\n**我们以后常用到的<font color=red size=3>Hexo</font>命令：**\n\n- <font color=red size=3>hexo s</font>等价于 <font color=red size=3>hexo server</font>  #<font color=red size=3>Hexo</font> 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。\n\n- <font color=red size=3>hexo g</font> 等价于 <font color=red size=3>hexo generate</font>  #生成静态网页 (执行 $ <font color=red size=3>hexo g</font>后会在站点根目录下生成<font color=red size=3>public</font>文件夹,<font color=red size=3> hexo</font>会将\"<font color=red size=3>/blog/source/</font>\" 下面的<font color=red size=3>.md</font>后缀的文件编译为<font color=red size=3>.html</font>后缀的文件,存放在\"<font color=red size=3>/blog/public/ </font>\" 路径下)\n\n- <font color=red size=3>hexo d </font>等价于 <font color=red size=3>hexo deploy</font>  #将本地数据部署到远端服务器(如<font color=red size=3>github</font>)\n- <font color=red size=3>hexo clean </font> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的<font color=red size=3>public</font>文件夹\n\n# 连接Github与本地 #\n## 一、生成密钥 ##\n\n右键单击鼠标，点击 <font color=red size=3>Git Bash Here</font>输入以下命令：\n\n    git config --global user.name \"Name\"\n    git config --global user.email \"Email\"\n\n**<font color=red size=3>Name</font>和<font color=red size=3>Email</font>是我们注册<font color=red size=3>Github</font>时的用户名和邮箱。**\n\n然后生成密钥：\n\n    ssh-keygen -t rsa -C \"Email\"\n\n\n**<font color=red size=3>Email</font>是我们注册<font color=red size=3>Github</font>时的邮箱**\n\n然后会出现：\n\n    Generating public/private rsa key pair.\n    Enter file in which to save the key (/c/Users/you/.ssh/id_rsa):\n    //到这里可以直接回车将密钥按默认文件进行存储\n\n回车之后：\n\n    Enter passphrase (empty for no passphrase):\n    //这里是要你输入密码，其实不需要输什么密码，直接回车就行\n    Enter same passphrase again:\n\n接下来会有：\n\n    Your identification has been saved in /c/Users/you/.ssh/id_rsa.\n    Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.\n    The key fingerprint is:\n    这里是各种字母数字组成的字符串，结尾是你的邮箱\n    The key's randomart image is:\n    这里也是各种字母数字符号组成的字符串\n\n现在密钥已经生成，一般存放在<font color=red size=3>（/c/Users/you/.ssh/id_rsa.pub.）</font>，我们运行下面的命令将密钥复制为粘贴板：\n\n     clip < ~/.ssh/id_rsa.pub\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/15.png)\n\n## 二、连接Github ##\n在<font color=red size=3>Github</font>头像下面点击<font color=red size=3>Settings</font>，再点击<font color=red size=3>SSH and GPG keys</font>，新建一个<font color=red size=3>SSH</font>，名字任意。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/16.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/17.png)\n\n然后将刚才复制的密钥添加就可以了，像这样：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/18.png)\n\n**本地连接Github**\n\n右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>输入以下命令，如果如下图所示，出现你的用户名，那就成功了\n\n    ssh -T git@github.com\n    //注意不要做任何修改\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/19.png)\n\n用记事本打开博客根目录下的<font color=red size=3>_config.yml</font>文件，这是博客的配置文件，我们需要修改一下才能连接<font color=red size=3>Github</font>。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/20.png)\n\n修改最后一行的配置：\n\n    # Deployment\n    ## Docs: https://hexo.io/docs/deployment.html\n    deploy:\n      type:\n改为：\n\n    # Deployment\n    ## Docs: https://hexo.io/docs/deployment.html\n    deploy:\n      type: git\n      repository: git@github.com:panakot/panakot.github.io.git\n      branch: master\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/21.png)\n\n切记：\n\n- **<font color=red size=3>repository</font>修改为你自己的<font color=red size=3>github</font>项目地址**。\n- **每一个冒号后面都有一个空格。**\n\n# 写文章、发布文章 #\n首先在博客根目录下右键打开<font color=red size=3>Git Bash Here</font>输入以下命令，安装一个扩展.\n\n    npm i hexo-deployer-git\n\n然后输入下面的命令，新建一篇文章。\n\n    hexo new post \"article title\"\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/22.png)\n\n然后打开<font color=red size=3>C:\\panakot Blog\\Hexo\\source\\_posts</font>的目录，可以发现下面多了一个文件夹和一个<font color=red size=3>.md</font>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/23.png)\n\n编写完<font color=red size=3>markdown</font>文件后，根目录下右键打开<font color=red size=3>Git Bash Here</font>输入<font color=red size=3>hexo g</font>生成静态网页，然后输入<font color=red size=3>hexo s</font>可以本地预览效果，最后输入<font color=red size=3>hexo d</font>上传到<font color=red size=3>github</font>上。\n\n你的博客地址：<font color=red size=3>https://你的用户名.github.io</font>，比如我的是：<https://muyiio.github.io>，现在每个人都可以通过此链接访问你的博客\n\n# MarkDown文章编辑器说明 #\n> 前面我们提到了使用<font color=red size=3>MarkDown</font>编辑我们的博客文章。<font color=red size=3> Markdown</font> 是<font color=red size=3> 2004</font> 年由 <font color=red size=3>John Gruberis </font>设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会，<font color=red size=3> .md </font>文件可以使用支持 <font color=red size=3>Markdown </font>语法的编辑器编辑，然后将写好的文章<font color=red size=3>（.md文件）</font>保存到<font color=red size=3> \\Hexo\\source\\_posts </font>文件夹下即可。\n\n <font color=red size=3>Windows </font>上推荐使用 <font color=red size=3>MarkdownPad2 </font>或者<font color=red size=3>小书匠</font>编辑器，<font color=red size=3>macOS </font>上使用<font color=red size=3> Mou</font> 编辑器，<font color=red size=3>Linux </font>上使用 <font color=red size=3>Remarkable</font> 编辑器，<font color=red size=3>Web </font>端上使用 简书。\n\n**[点击此处](http://markdownpad.com/download.html \"MarkDown\")下载<font color=red size=3>MarkDown</font>\n，刚使用的朋友或许不知道如何使用这个编辑器，只需要几分钟就可以掌握啦，给出以下几个我觉得不错的参考：**\n\n[《献给写作者的 Markdown 新手指南》](https://www.jianshu.com/p/q81RER/ \"献给写作者的 Markdown 新手指南\") （By 简书）\n\n[《Markdown语法图文全面详解(10分钟学会)》](https://blog.csdn.net/u014061630/article/details/81359144?utm_source=app \"Markdown语法图文全面详解\")（By 黑暗星球）\n\n[《Markdown 语法手册 （完整整理版）》](https://blog.csdn.net/witnessai1/article/details/52551362?utm_source=app \"Markdown 语法手册 （完整整理版）\") （By witnessai1）\n\n[《认识与入门 Markdown》](https://sspai.com/post/25137 \"认识与入门 Markdown\")（By Te_Lee）\n\n写完文章记得在博客根目录<font color=red size=3>Bash Here</font>输入<font color=red size=3>hexo g</font>和<font color=red size=3>hexo d</font>上传到网站。\n# 配置个性化域名 #\n一顿操作下来，打开我们的博客还是：<font color=red size=3>www.xxx.github.io</font>，是不是很没有牌面？我们可以考虑购买一个专属域名，以后打开博客就是这样：<font color=red size=3>www.xxx.com </font>。\n\n[阿里云](https://www.aliyun.com/ \"阿里云\")和[腾讯云](https://cloud.tencent.com/ \"腾讯云\")都可以，我的是腾讯云，购买域名后首先需要添加解析：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/24.png)\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/25.png)\n\n**方法一：**点击添加记录，需要添加两个记录，两个记录类型都是 <font color=red size=3>CNAME </font>，第一个主机记录为<font color=red size=3> @ </font>，第二个主机记录为<font color=red size=3> www</font>，记录值都是填你自己的博客地址（比如我的是：<font color=red size=3>muyiio.github.io</font>），保存之后域名解析就完成了！\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/27.png)\n\n**方法二：**两个记录类型为<font color=red size=3> A </font>，第一个主机记录为<font color=red size=3> @ </font>，第二个主机记录为<font color=red size=3> www</font>，记录值都为博客的<font color=red size=3> IP</font> 地址，<font color=red size=3>IP </font>地址可以<font color=red size=3> cmd</font> 中输入<font color=red size=3> ping</font> 你的博客地址 获得（比如我的：<font color=red size=3>ping muyiio.github.io</font>），保存之后域名解析就完成了！\n\n参考资料：\n\n[《域名解析中A记录、CNAME、MX记录、NS记录的区别和联系》](https://blog.csdn.net/it_man/article/details/9017307 \"域名解析中A记录、CNAME、MX记录、NS记录的区别和联系\")\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/26.png)\n\n**不管在哪个平台购买域名，操作都大同小异，这里说明两点**：\n\n> 如果你填写的是没有<font color=red size=3>www</font>的，比如 <font color=red size=3>muyio.com</font>，那么无论是访问<font color=red size=3> https://www.muyiio.com </font>还是<font color=red size=3> https://muyiio.com</font> ，都会自动跳转到<font color=red size=3> https://muyiio.com</font>。\n\n\n> 如果你填写的是带<font color=red size=3>www</font>的，比如 <font color=red size=3>www.muyiio.com </font>，那么无论是访问 <font color=red size=3>https://www.muyiio.com</font> 还是 <font color=red size=3>https://muyiio.com </font>，都会自动跳转到 <font color=red size=3>http://www.imuyiio.com</font>。\n\n然后打开你的<font color=red size=3>github</font>博客项目，点击settings，拉到下面<font color=red size=3>Custom domain</font>处，填上你自己的域名，保存就可以了。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/28.png)\n\n现在我们的项目根目录应该会出现一个名为<font color=red size=3>CNAME</font>的文件了。如果没有的话，打开你本地博客<font color=red size=3>/source</font>目录，我的是<font color=red size=3>C:\\Blog\\Hexo\\source</font>，新建<font color=red size=3>CNAME</font>文件，<font color=red size=3>（注意不要加.txt，没有任何后缀名！）</font>。然后在里面写上你的域名，保存。最后运行<font color=red size=3>hexo g、hexo d</font>上传到<font color=red size=3>github</font>。\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/29.png)\n\n现在就可以通过我们的个性化域名：<font color=red size=3>www.xxx.com、xxx.com</font>访问自己的博客了。\n\n# 更换自己喜欢的Hexo主题 #\n点击进入[Hexo主题专栏](https://hexo.io/themes/ \"Hexo主题专栏\")可以看到很多<font color=red size=3>Hexo</font>主题：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/30.png)\n\n推荐：\n\n[几个好用的hexo主题](https://blog.csdn.net/fail_perfectly/article/details/83791781?utm_source=app \"几个好用的hexo主题\") (By fail_perfectly)\n\n这里我们以[Bean Tech](http://huangxuan.me/ \"Bean Tech\")主题为例，下滑到底部我们可以看到他的<font color=red size=3>GitHub</font>（<font color=red size=3>有的主题是：Theme by xxx，点击那里也是进入GitHub地址</font>）：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/31.png)\n\n点击进入主题的<font color=red size=3>GitHub</font>地址：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/32.png)\n\n复制该项目地址：\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/33.png)\n\n然后打开<font color=red size=3> Hexo </font>文件夹下的<font color=red size=3> themes</font> 目录（如：<font color=red size=3>C:\\MUYIio Blog\\Hexo\\themes</font>），右键<font color=red size=3> Git Bash Here</font>，输入以下命令：\n\n    $ git clone 此处填写你刚才复制的主题地址\n\n以我们刚才复制的为例：\n\n    $ git clone https://github.com/Huxpro/huxpro.github.io\n\n下载完成后即可在<font color=red size=3> themes </font>目录下生成 <font color=red size=3>hexo-theme-Bean-Tech </font>文件夹，然后打开 <font color=red size=3>Hexo</font> 文件夹下的配置文件 <font color=red size=3>_config.yml </font>，找到关键字 <font color=red size=3>theme</font>，修改参数为：<font color=red size=3>theme：hexo-theme-Bean-Tech </font>（其他主题修改成相应名称即可），**再次注意冒号后面有一个空格！**\n\n![](https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/34.png)\n\n现在我们的主题已经替换完成，将它部署到我们的博客，博客根目录下右键<font color=red size=3> Git Bash Here</font>，输入以下命令：\n\n    hexo clean\n    hexo g\n    hexo d\n\n现在访问我们的网站就可以看到主题已经更换了，但是比如网站标题，图标等都没有更换，我们博客文件中有两份主要的配置文件，名称都是 <font color=red size=3>_config.yml</font> ，它们均是用于站点配置使用的。其中，一份位于站点根目录下（比如我的：<font color=red size=3>C:\\MUYIio Blog\\Hexo\\_config.yml</font>），主要包含<font color=red size=3> Hexo</font> 本身整站的配置；另一份位于主题目录下（比如我的：<font color=red size=3>C:\\MUYIio Blog\\Hexo\\themes\\hexo-theme-matery\\_config.yml</font>），这份配置由主题作者提供，主要用于配置主题相关的选项，一般<font color=red size=3> _config.yml </font>文件里都有相关注释，按需修改即可。\n\n\n# 我的博客源代码 #\n**我的博客源代码地址：<https://github.com/MUYIio/hexo-themes-matery>，有心的话可以给个<font color=red size=3>Star&Fork</font>。**\n\n下载源代码：git clone git@github.com:MUYIio/hexo-themes-matery.git\n\n\n\n在文章开头给出了快速搭建教程，相对于自己从头开始搭建还是比较方便的，修复了很多<font color=red size=3>Bug</font>，也添加了一些插件，下载就可以使用，可以帮你们省去个性化配置带来的很多麻烦。\n\n主题的原地址在这里：[hexo-theme-matery](https://github.com/blinkfox/hexo-theme-matery)，作者把文档写得也非常的详细，还有中英文两个版本，建议可以多看几遍，在本地修改的时候轻松一些。\n\n使用我的源代码之前本地的环境还是要搭建好，就是前面一部分。\n\n\n<table><tr><td bgcolor=orange>\n-----------------------------------------------------------------------------------------------------------                                                                                                                                                                                                            \n</td></tr></table>\n\n# 结语 #\n初学者可能会觉得困难，毕竟很多东西都是第一次接触，当初我也尝试了好几次才成功，不要放弃，弄错了就删掉重新来过，当你把博客搭建出来会觉得受益良多的。\n\n文章中难免有错误的地方，有大佬发现了欢迎给我指正！有的地方解释不够详细，可以百度一下看看细节，文章中的引用以及参考资料涉及侵权请联系我删除！\n","slug":"1","published":1,"updated":"2021-10-24T08:43:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0du52rj0001fie9brtw7j1z","content":"<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/01.png\"></p>\n<p><font color=magenta size=4><strong>在搭建过程中遇到问题欢迎来骚扰我哈！<font color=red size=4> V：godxiaolong，QQ:1571504536</font>，如果觉得有帮助的话不介意打赏一杯奶茶哟~</strong></font></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/02.png\"></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><ul>\n<li><p>作为一名计算机爱好者，摸索了一周搭建出自己的博客。目前只学    习了c语言，没有任何前端知识和网站开发经验，总的来说，算不上很难，     但也要费些心思。网上各类教程应有尽有，只要肯摸索，还是水到渠成的事。另外，写下这篇文章，记录下自己的经验，给需要的朋友，祝你早日拥有自己的博客！</p>\n</li>\n<li><p>搭建博客的初衷是希望用博客记录下自己的学习过程，帮助自己复习，分享一部分不成熟的思考，敦促自己把既定的目标完成。</p>\n</li>\n<li><p><strong>为什么要搭建自己的博客？可以看看这三篇文章：</strong></p>\n</li>\n</ul>\n<p><a href=\"http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/\" title=\"为什么你应该（从现在开始就）写博客\">《为什么你应该（从现在开始就）写博客》</a>   (By 刘未鹏 | Mind Hacks)</p>\n<p><a href=\"https://www.zhihu.com/question/19916345\" title=\"为什么要自建博客？\">《为什么要自建博客？》</a>   (By 知乎)</p>\n<p><a href=\"https://www.cnblogs.com/jhzhu/p/3893297.html\" title=\"我为什么写博客\">《我为什么写博客》</a> （By 知明所以）</p>\n<p>我们需要知道搭建博客要用到的框架。<font color=red size=3>Hexo</font>是高效的静态站点生成框架，它基于<font color=red size=3>Node.js</font>。我们使用<font color=red size=3>MarkDown</font>在本地编辑我们的博客文章，通过<font color=red size=3>Hexo</font>生成静态页面，再用两条命令即可部署到我们的网站。无需关心网页源代码的具体细节，我们只需要用心写好自己的博客内容就行。</p>\n<h2 id=\"本文目录\"><a href=\"#本文目录\" class=\"headerlink\" title=\"本文目录\"></a>本文目录</h2><ul>\n<li><strong>快速搭建</strong></li>\n<li>安装<font color=red size=3>Node.js</font></li>\n<li>添加国内镜像</li>\n<li>安装<font color=red size=3>Git </font></li>\n<li>注册<font color=red size=3>Github</font>账号</li>\n<li>创建<font color=red size=3>Git</font>仓库</li>\n<li>安装<font color=red size=3>Hexo</font> </li>\n<li>配置本地<font color=red size=3>Hexo</font></li>\n<li>连接<font color=red size=3>Github</font>与本地 </li>\n<li>写文章、发布文章 </li>\n<li><font color=red size=3>MarkDown</font>文章编辑器说明</li>\n<li>配置个性化域名</li>\n<li>更换自己喜欢的<font color=red size=3>Hexo</font>主题</li>\n<li>我的博客源代码</li>\n<li>结语</li>\n</ul>\n<hr>\n<h1 id=\"快速搭建\"><a href=\"#快速搭建\" class=\"headerlink\" title=\"快速搭建\"></a>快速搭建</h1><p>有的朋友可能不想去折腾，自定义主题也比较麻烦，亦或有尝试几次搭建却失败，那就可以看这部分。快速搭建可以帮助我们更快搭建出自己的博客，优点是别人博客有的东西你都有，就跟复制差不多；缺点是博客里的配置信息都是别人的，不过不要紧，稍稍改改配置就可以。</p>\n<p>在这里以我的博客为例。</p>\n<h2 id=\"一、下载博客源代码\"><a href=\"#一、下载博客源代码\" class=\"headerlink\" title=\"一、下载博客源代码\"></a>一、下载博客源代码</h2><p>大家可以直接素质二连，<font color=red size=3>Star&amp;Fork</font>我的博客源代码：<a href=\"https://github.com/MUYIio/hexo-themes-matery\">https://github.com/MUYIio/hexo-themes-matery</a>，这里我给出两种下载方法：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/03.png\"></p>\n<p><strong>第一种</strong>：直接<font color=red size=3>DownLoad</font>，下载到本地就可以。（<strong>不推荐</strong>）</p>\n<p><strong>第二种</strong>：如果你已经安装了<a href=\"https://git-scm.com/download/win\" title=\"Git\">Git</a>，就可以右键单击<font color=red size=3>Come Bash Here</font>运行</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone git@github.com:MUYIio/hexo-themes-matery.git\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>将所有文件下载到本地，这个复杂一点。</p>\n<h2 id=\"二、修改博客文档配置\"><a href=\"#二、修改博客文档配置\" class=\"headerlink\" title=\"二、修改博客文档配置\"></a>二、修改博客文档配置</h2><p>首先将我们下载的博客源代码解压，然后修改主要配置：</p>\n<ul>\n<li>根目录配置文件<font color=red size=3>_config.yml</font>和主题目录配置文件<font color=red size=3>_config.yml</font>中修改个人信息。</li>\n<li>根目录配置文件中修改<font color=red size=3>deploy</font>一栏的<font color=red size=3>repository</font>。</li>\n<li>根目录配置文件中修改<font color=red size=3>baidu_url_submit</font>一栏的<font color=red size=3>token</font>。</li>\n<li>主题配置文件中修改<font color=red size=3>gitalk</font>一栏，修改方法见正文。</li>\n</ul>\n<p>我给出的是博客比较明显的几个地方，先修改这几个地方，其它的可以自己慢慢摸索修改。</p>\n<p>最后一步，<strong>本地的运行环境还是需要搭建好的</strong>，跟着下文操作到连接Github与本地，环境就算是搭建完成。</p>\n<p><strong>本地环境搭建好之后会生成的文件：</strong></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/35.png\"></p>\n<p>然后直接把<font color=red size=3>Hexo</font>文件夹里面的文件删掉，把我的源代码的文件全部移动过来，就是这样了：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/37.png\"></p>\n<p>然后在<font color=red size=3>Hexo</font>文件夹下右键单击鼠标，点击 <font color=red size=3>Git Bash Here</font>点击输入以下命令上传就可以了：</p>\n<pre><code>hexo clean\nhexo g\nhexo d\n</code></pre>\n<h1 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h1><p>了解一下什么是<font color=red size=3>Node.js</font>：</p>\n<blockquote>\n<p><font color=red size=3>Node.js</font>就是一个用于创建服务器端应用程序的运行系统，它可以轻松构建网络或其他事件驱动的应用程序服务器。</p>\n</blockquote>\n<p>需要用到的命令：</p>\n<pre><code>$ git --version\n$ node -v\n$ npm -v\n</code></pre>\n<p><a href=\"https://nodejs.org/en/download/\" title=\"Node.js\">点击此处</a>进入<font color=red size=3>Node.js</font>官网下载相应版本即可，安装时选项全部默认，一路点击<font color=red size=3>Next</font>。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/04.png\"></p>\n<p>检验是否安装成功：<br>按<font color=red size=3>Win+R</font>打开命令提示符，输入<font color=red size=3>node -v</font>和<font color=red size=3>npm -v</font>，如果出现版本号，那么就安装成功了。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/05.png\"></p>\n<h1 id=\"添加国内镜像\"><a href=\"#添加国内镜像\" class=\"headerlink\" title=\"添加国内镜像\"></a>添加国内镜像</h1><p>这里我们使用阿里的国内镜像进行加速，按Win+R打开命令提示符输入：</p>\n<pre><code>npm config set registry https://registry.npm.taobao.org\n</code></pre>\n<h1 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h1><blockquote>\n<p><font color=red size=3>Git</font>是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理，帮助我们把本地网页上传到<font color=red size=3>Github</font>。</p>\n</blockquote>\n<p><a href=\"https://git-scm.com/download/win\" title=\"Git\">点击此处</a>进入Git官网下载相应版本，默认安装即可。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/005.png\"></p>\n<p>参考资料：<a href=\"https://www.cnblogs.com/jytx/p/5602927.html\" title=\"如何在windows下安装GIT\">《如何在windows下安装GIT》</a> (By 俊雨廷休)</p>\n<p>检验是否安装成功：</p>\n<p>安装完成后在命令提示符中输入<font color=red size=3>git –version</font>验证是否安装成功</p>\n<pre><code>git --version\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/06.png\"></p>\n<h1 id=\"注册Github账号\"><a href=\"#注册Github账号\" class=\"headerlink\" title=\"注册Github账号\"></a>注册Github账号</h1><p><font color=red size=3>Github</font>作为全球最大的开源社区，相信朋友们都已经有了吧，如果没有，<a href=\"https://github.com/\" title=\"Github\">点击此处</a>进入<font color=red size=3>Github</font>官网点击 <font color=red size=3>Sign Up </font>注册账户。</p>\n<h1 id=\"创建git仓库\"><a href=\"#创建git仓库\" class=\"headerlink\" title=\"创建git仓库\"></a>创建git仓库</h1><p>登录<font color=red size=3>Github</font>创建一个仓库</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/07.png\"></p>\n<p>如下图所示，<strong>输入自己的项目名字，后面一定要加<font color=red size=3>.github.io</font>后缀，<font color=red size=3>README</font>初始化也要勾上。名称一定要和你的<font color=red size=3>Github</font>名字完全一样，比如你<font color=red size=3>github</font>名字叫<font color=red size=3>A</font>，那么仓库名字一定要是<font color=red size=3>A.github.io</font>。</strong></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/08.png\"></p>\n<p>选择一个自己喜欢的主题：<br>在上面创建的仓库里面点击<font color=red size=3>Settings</font>（不是头像下面那个<font color=red size=3>Settings</font>），向下拉到最后有个<font color=red size=3>GitHub Pages</font>，点击<font color=red size=3>Choose a theme</font>选择一个主题。然后等一会儿，再回到<font color=red size=3>GitHub Pages</font>，就可以预览效果啦。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/09.png\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/10.png\"></p>\n<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h1><blockquote>\n<p><font color=red size=3>Hexo</font>是一款基于<font color=red size=3>Node.js</font>的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在<font color=red size=3>GitHub</font>和<font color=red size=3>Heroku</font>上，是搭建博客的首选框架。</p>\n</blockquote>\n<p>选择一个磁盘，新建一个文件夹用来存放博客文件。比如我的<font color=red size=3>（C&#x2F;panakot Blog）</font>，在该文件夹下右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>，输入以下<font color=red size=3> npm </font>命令即可安装</p>\n<pre><code>$ npm install hexo-cli -g\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/11.png\"></p>\n<p>输入<font color=red size=3>hexo -v</font>即可检验是否安装成功，我这里就不演示了。</p>\n<h1 id=\"配置本地hexo\"><a href=\"#配置本地hexo\" class=\"headerlink\" title=\"配置本地hexo\"></a>配置本地hexo</h1><p>还是在刚才新建的文件夹下再新建一个<font color=red size=3>Hexo</font>文件夹，比如我的<font color=red size=3>（C&#x2F;panakot Blog&#x2F;Hexo）</font>，在<font color=red size=3>Hexo</font>文件夹下右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>，依次输入以下<font color=red size=3> npm </font>命令即可初始化。</p>\n<pre><code>hexo init\nnpm install\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/12.png\"></p>\n<p>初始化成功生成的文件：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/13.png\"></p>\n<p>接着我们输入<font color=red size=3>hexo g</font>生成静态网页，然后输入<font color=red size=3>hexo s</font>打开本地服务器，然后浏览器打开<a href=\"http://localhost:4000/\">http://localhost:4000/</a>，就可以预览我们的博客啦，如图：</p>\n<p>显示以下信息说明操作正确：</p>\n<p><code>INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/14.png\"></p>\n<p>按<font color=red size=3>ctrl+c</font>关闭本地服务器。</p>\n<p><strong>我们以后常用到的<font color=red size=3>Hexo</font>命令：</strong></p>\n<ul>\n<li><p><font color=red size=3>hexo s</font>等价于 <font color=red size=3>hexo server</font>  #<font color=red size=3>Hexo</font> 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</p>\n</li>\n<li><p><font color=red size=3>hexo g</font> 等价于 <font color=red size=3>hexo generate</font>  #生成静态网页 (执行 $ <font color=red size=3>hexo g</font>后会在站点根目录下生成<font color=red size=3>public</font>文件夹,<font color=red size=3> hexo</font>会将”<font color=red size=3>&#x2F;blog&#x2F;source&#x2F;</font>“ 下面的<font color=red size=3>.md</font>后缀的文件编译为<font color=red size=3>.html</font>后缀的文件,存放在”<font color=red size=3>&#x2F;blog&#x2F;public&#x2F; </font>“ 路径下)</p>\n</li>\n<li><p><font color=red size=3>hexo d </font>等价于 <font color=red size=3>hexo deploy</font>  #将本地数据部署到远端服务器(如<font color=red size=3>github</font>)</p>\n</li>\n<li><p><font color=red size=3>hexo clean </font> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的<font color=red size=3>public</font>文件夹</p>\n</li>\n</ul>\n<h1 id=\"连接Github与本地\"><a href=\"#连接Github与本地\" class=\"headerlink\" title=\"连接Github与本地\"></a>连接Github与本地</h1><h2 id=\"一、生成密钥\"><a href=\"#一、生成密钥\" class=\"headerlink\" title=\"一、生成密钥\"></a>一、生成密钥</h2><p>右键单击鼠标，点击 <font color=red size=3>Git Bash Here</font>输入以下命令：</p>\n<pre><code>git config --global user.name &quot;Name&quot;\ngit config --global user.email &quot;Email&quot;\n</code></pre>\n<p><strong><font color=red size=3>Name</font>和<font color=red size=3>Email</font>是我们注册<font color=red size=3>Github</font>时的用户名和邮箱。</strong></p>\n<p>然后生成密钥：</p>\n<pre><code>ssh-keygen -t rsa -C &quot;Email&quot;\n</code></pre>\n<p><strong><font color=red size=3>Email</font>是我们注册<font color=red size=3>Github</font>时的邮箱</strong></p>\n<p>然后会出现：</p>\n<pre><code>Generating public/private rsa key pair.\nEnter file in which to save the key (/c/Users/you/.ssh/id_rsa):\n//到这里可以直接回车将密钥按默认文件进行存储\n</code></pre>\n<p>回车之后：</p>\n<pre><code>Enter passphrase (empty for no passphrase):\n//这里是要你输入密码，其实不需要输什么密码，直接回车就行\nEnter same passphrase again:\n</code></pre>\n<p>接下来会有：</p>\n<pre><code>Your identification has been saved in /c/Users/you/.ssh/id_rsa.\nYour public key has been saved in /c/Users/you/.ssh/id_rsa.pub.\nThe key fingerprint is:\n这里是各种字母数字组成的字符串，结尾是你的邮箱\nThe key&#39;s randomart image is:\n这里也是各种字母数字符号组成的字符串\n</code></pre>\n<p>现在密钥已经生成，一般存放在<font color=red size=3>（&#x2F;c&#x2F;Users&#x2F;you&#x2F;.ssh&#x2F;id_rsa.pub.）</font>，我们运行下面的命令将密钥复制为粘贴板：</p>\n<pre><code> clip &lt; ~/.ssh/id_rsa.pub\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/15.png\"></p>\n<h2 id=\"二、连接Github\"><a href=\"#二、连接Github\" class=\"headerlink\" title=\"二、连接Github\"></a>二、连接Github</h2><p>在<font color=red size=3>Github</font>头像下面点击<font color=red size=3>Settings</font>，再点击<font color=red size=3>SSH and GPG keys</font>，新建一个<font color=red size=3>SSH</font>，名字任意。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/16.png\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/17.png\"></p>\n<p>然后将刚才复制的密钥添加就可以了，像这样：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/18.png\"></p>\n<p><strong>本地连接Github</strong></p>\n<p>右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>输入以下命令，如果如下图所示，出现你的用户名，那就成功了</p>\n<pre><code>ssh -T git@github.com\n//注意不要做任何修改\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/19.png\"></p>\n<p>用记事本打开博客根目录下的<font color=red size=3>_config.yml</font>文件，这是博客的配置文件，我们需要修改一下才能连接<font color=red size=3>Github</font>。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/20.png\"></p>\n<p>修改最后一行的配置：</p>\n<pre><code># Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type:\n</code></pre>\n<p>改为：</p>\n<pre><code># Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: git@github.com:panakot/panakot.github.io.git\n  branch: master\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/21.png\"></p>\n<p>切记：</p>\n<ul>\n<li><strong><font color=red size=3>repository</font>修改为你自己的<font color=red size=3>github</font>项目地址</strong>。</li>\n<li><strong>每一个冒号后面都有一个空格。</strong></li>\n</ul>\n<h1 id=\"写文章、发布文章\"><a href=\"#写文章、发布文章\" class=\"headerlink\" title=\"写文章、发布文章\"></a>写文章、发布文章</h1><p>首先在博客根目录下右键打开<font color=red size=3>Git Bash Here</font>输入以下命令，安装一个扩展.</p>\n<pre><code>npm i hexo-deployer-git\n</code></pre>\n<p>然后输入下面的命令，新建一篇文章。</p>\n<pre><code>hexo new post &quot;article title&quot;\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/22.png\"></p>\n<p>然后打开<font color=red size=3>C:\\panakot Blog\\Hexo\\source_posts</font>的目录，可以发现下面多了一个文件夹和一个<font color=red size=3>.md</font>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/23.png\"></p>\n<p>编写完<font color=red size=3>markdown</font>文件后，根目录下右键打开<font color=red size=3>Git Bash Here</font>输入<font color=red size=3>hexo g</font>生成静态网页，然后输入<font color=red size=3>hexo s</font>可以本地预览效果，最后输入<font color=red size=3>hexo d</font>上传到<font color=red size=3>github</font>上。</p>\n<p>你的博客地址：<font color=red size=3>https:&#x2F;&#x2F;你的用户名.github.io</font>，比如我的是：<a href=\"https://muyiio.github.io/\">https://muyiio.github.io</a>，现在每个人都可以通过此链接访问你的博客</p>\n<h1 id=\"MarkDown文章编辑器说明\"><a href=\"#MarkDown文章编辑器说明\" class=\"headerlink\" title=\"MarkDown文章编辑器说明\"></a>MarkDown文章编辑器说明</h1><blockquote>\n<p>前面我们提到了使用<font color=red size=3>MarkDown</font>编辑我们的博客文章。<font color=red size=3> Markdown</font> 是<font color=red size=3> 2004</font> 年由 <font color=red size=3>John Gruberis </font>设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会，<font color=red size=3> .md </font>文件可以使用支持 <font color=red size=3>Markdown </font>语法的编辑器编辑，然后将写好的文章<font color=red size=3>（.md文件）</font>保存到<font color=red size=3> \\Hexo\\source_posts </font>文件夹下即可。</p>\n</blockquote>\n<p> <font color=red size=3>Windows </font>上推荐使用 <font color=red size=3>MarkdownPad2 </font>或者<font color=red size=3>小书匠</font>编辑器，<font color=red size=3>macOS </font>上使用<font color=red size=3> Mou</font> 编辑器，<font color=red size=3>Linux </font>上使用 <font color=red size=3>Remarkable</font> 编辑器，<font color=red size=3>Web </font>端上使用 简书。</p>\n<p><strong><a href=\"http://markdownpad.com/download.html\" title=\"MarkDown\">点击此处</a>下载<font color=red size=3>MarkDown</font><br>，刚使用的朋友或许不知道如何使用这个编辑器，只需要几分钟就可以掌握啦，给出以下几个我觉得不错的参考：</strong></p>\n<p><a href=\"https://www.jianshu.com/p/q81RER/\" title=\"献给写作者的 Markdown 新手指南\">《献给写作者的 Markdown 新手指南》</a> （By 简书）</p>\n<p><a href=\"https://blog.csdn.net/u014061630/article/details/81359144?utm_source=app\" title=\"Markdown语法图文全面详解\">《Markdown语法图文全面详解(10分钟学会)》</a>（By 黑暗星球）</p>\n<p><a href=\"https://blog.csdn.net/witnessai1/article/details/52551362?utm_source=app\" title=\"Markdown 语法手册 （完整整理版）\">《Markdown 语法手册 （完整整理版）》</a> （By witnessai1）</p>\n<p><a href=\"https://sspai.com/post/25137\" title=\"认识与入门 Markdown\">《认识与入门 Markdown》</a>（By Te_Lee）</p>\n<p>写完文章记得在博客根目录<font color=red size=3>Bash Here</font>输入<font color=red size=3>hexo g</font>和<font color=red size=3>hexo d</font>上传到网站。</p>\n<h1 id=\"配置个性化域名\"><a href=\"#配置个性化域名\" class=\"headerlink\" title=\"配置个性化域名\"></a>配置个性化域名</h1><p>一顿操作下来，打开我们的博客还是：<font color=red size=3><a href=\"http://www.xxx.github.io/\">www.xxx.github.io</a></font>，是不是很没有牌面？我们可以考虑购买一个专属域名，以后打开博客就是这样：<font color=red size=3><a href=\"http://www.xxx.com/\">www.xxx.com</a> </font>。</p>\n<p><a href=\"https://www.aliyun.com/\" title=\"阿里云\">阿里云</a>和<a href=\"https://cloud.tencent.com/\" title=\"腾讯云\">腾讯云</a>都可以，我的是腾讯云，购买域名后首先需要添加解析：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/24.png\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/25.png\"></p>\n<p><strong>方法一：</strong>点击添加记录，需要添加两个记录，两个记录类型都是 <font color=red size=3>CNAME </font>，第一个主机记录为<font color=red size=3> @ </font>，第二个主机记录为<font color=red size=3> www</font>，记录值都是填你自己的博客地址（比如我的是：<font color=red size=3>muyiio.github.io</font>），保存之后域名解析就完成了！</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/27.png\"></p>\n<p><strong>方法二：</strong>两个记录类型为<font color=red size=3> A </font>，第一个主机记录为<font color=red size=3> @ </font>，第二个主机记录为<font color=red size=3> www</font>，记录值都为博客的<font color=red size=3> IP</font> 地址，<font color=red size=3>IP </font>地址可以<font color=red size=3> cmd</font> 中输入<font color=red size=3> ping</font> 你的博客地址 获得（比如我的：<font color=red size=3>ping muyiio.github.io</font>），保存之后域名解析就完成了！</p>\n<p>参考资料：</p>\n<p><a href=\"https://blog.csdn.net/it_man/article/details/9017307\" title=\"域名解析中A记录、CNAME、MX记录、NS记录的区别和联系\">《域名解析中A记录、CNAME、MX记录、NS记录的区别和联系》</a></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/26.png\"></p>\n<p><strong>不管在哪个平台购买域名，操作都大同小异，这里说明两点</strong>：</p>\n<blockquote>\n<p>如果你填写的是没有<font color=red size=3>www</font>的，比如 <font color=red size=3>muyio.com</font>，那么无论是访问<font color=red size=3> <a href=\"https://www.muyiio.com/\">https://www.muyiio.com</a> </font>还是<font color=red size=3> <a href=\"https://muyiio.com/\">https://muyiio.com</a></font> ，都会自动跳转到<font color=red size=3> <a href=\"https://muyiio.com/\">https://muyiio.com</a></font>。</p>\n</blockquote>\n<blockquote>\n<p>如果你填写的是带<font color=red size=3>www</font>的，比如 <font color=red size=3><a href=\"http://www.muyiio.com/\">www.muyiio.com</a> </font>，那么无论是访问 <font color=red size=3><a href=\"https://www.muyiio.com/\">https://www.muyiio.com</a></font> 还是 <font color=red size=3><a href=\"https://muyiio.com/\">https://muyiio.com</a> </font>，都会自动跳转到 <font color=red size=3><a href=\"http://www.imuyiio.com/\">http://www.imuyiio.com</a></font>。</p>\n</blockquote>\n<p>然后打开你的<font color=red size=3>github</font>博客项目，点击settings，拉到下面<font color=red size=3>Custom domain</font>处，填上你自己的域名，保存就可以了。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/28.png\"></p>\n<p>现在我们的项目根目录应该会出现一个名为<font color=red size=3>CNAME</font>的文件了。如果没有的话，打开你本地博客<font color=red size=3>&#x2F;source</font>目录，我的是<font color=red size=3>C:\\Blog\\Hexo\\source</font>，新建<font color=red size=3>CNAME</font>文件，<font color=red size=3>（注意不要加.txt，没有任何后缀名！）</font>。然后在里面写上你的域名，保存。最后运行<font color=red size=3>hexo g、hexo d</font>上传到<font color=red size=3>github</font>。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/29.png\"></p>\n<p>现在就可以通过我们的个性化域名：<font color=red size=3><a href=\"http://www.xxx.com、xxx.com/\">www.xxx.com、xxx.com</a></font>访问自己的博客了。</p>\n<h1 id=\"更换自己喜欢的Hexo主题\"><a href=\"#更换自己喜欢的Hexo主题\" class=\"headerlink\" title=\"更换自己喜欢的Hexo主题\"></a>更换自己喜欢的Hexo主题</h1><p>点击进入<a href=\"https://hexo.io/themes/\" title=\"Hexo主题专栏\">Hexo主题专栏</a>可以看到很多<font color=red size=3>Hexo</font>主题：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/30.png\"></p>\n<p>推荐：</p>\n<p><a href=\"https://blog.csdn.net/fail_perfectly/article/details/83791781?utm_source=app\" title=\"几个好用的hexo主题\">几个好用的hexo主题</a> (By fail_perfectly)</p>\n<p>这里我们以<a href=\"http://huangxuan.me/\" title=\"Bean Tech\">Bean Tech</a>主题为例，下滑到底部我们可以看到他的<font color=red size=3>GitHub</font>（<font color=red size=3>有的主题是：Theme by xxx，点击那里也是进入GitHub地址</font>）：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/31.png\"></p>\n<p>点击进入主题的<font color=red size=3>GitHub</font>地址：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/32.png\"></p>\n<p>复制该项目地址：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/33.png\"></p>\n<p>然后打开<font color=red size=3> Hexo </font>文件夹下的<font color=red size=3> themes</font> 目录（如：<font color=red size=3>C:\\MUYIio Blog\\Hexo\\themes</font>），右键<font color=red size=3> Git Bash Here</font>，输入以下命令：</p>\n<pre><code>$ git clone 此处填写你刚才复制的主题地址\n</code></pre>\n<p>以我们刚才复制的为例：</p>\n<pre><code>$ git clone https://github.com/Huxpro/huxpro.github.io\n</code></pre>\n<p>下载完成后即可在<font color=red size=3> themes </font>目录下生成 <font color=red size=3>hexo-theme-Bean-Tech </font>文件夹，然后打开 <font color=red size=3>Hexo</font> 文件夹下的配置文件 <font color=red size=3>_config.yml </font>，找到关键字 <font color=red size=3>theme</font>，修改参数为：<font color=red size=3>theme：hexo-theme-Bean-Tech </font>（其他主题修改成相应名称即可），<strong>再次注意冒号后面有一个空格！</strong></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/34.png\"></p>\n<p>现在我们的主题已经替换完成，将它部署到我们的博客，博客根目录下右键<font color=red size=3> Git Bash Here</font>，输入以下命令：</p>\n<pre><code>hexo clean\nhexo g\nhexo d\n</code></pre>\n<p>现在访问我们的网站就可以看到主题已经更换了，但是比如网站标题，图标等都没有更换，我们博客文件中有两份主要的配置文件，名称都是 <font color=red size=3>_config.yml</font> ，它们均是用于站点配置使用的。其中，一份位于站点根目录下（比如我的：<font color=red size=3>C:\\MUYIio Blog\\Hexo_config.yml</font>），主要包含<font color=red size=3> Hexo</font> 本身整站的配置；另一份位于主题目录下（比如我的：<font color=red size=3>C:\\MUYIio Blog\\Hexo\\themes\\hexo-theme-matery_config.yml</font>），这份配置由主题作者提供，主要用于配置主题相关的选项，一般<font color=red size=3> _config.yml </font>文件里都有相关注释，按需修改即可。</p>\n<h1 id=\"我的博客源代码\"><a href=\"#我的博客源代码\" class=\"headerlink\" title=\"我的博客源代码\"></a>我的博客源代码</h1><p><strong>我的博客源代码地址：<a href=\"https://github.com/MUYIio/hexo-themes-matery\">https://github.com/MUYIio/hexo-themes-matery</a>，有心的话可以给个<font color=red size=3>Star&amp;Fork</font>。</strong></p>\n<p>下载源代码：git clone <a href=\"mailto:&#x67;&#105;&#x74;&#64;&#x67;&#105;&#x74;&#x68;&#117;&#x62;&#x2e;&#x63;&#111;&#x6d;\">&#x67;&#105;&#x74;&#64;&#x67;&#105;&#x74;&#x68;&#117;&#x62;&#x2e;&#x63;&#111;&#x6d;</a>:MUYIio&#x2F;hexo-themes-matery.git</p>\n<p>在文章开头给出了快速搭建教程，相对于自己从头开始搭建还是比较方便的，修复了很多<font color=red size=3>Bug</font>，也添加了一些插件，下载就可以使用，可以帮你们省去个性化配置带来的很多麻烦。</p>\n<p>主题的原地址在这里：<a href=\"https://github.com/blinkfox/hexo-theme-matery\">hexo-theme-matery</a>，作者把文档写得也非常的详细，还有中英文两个版本，建议可以多看几遍，在本地修改的时候轻松一些。</p>\n<p>使用我的源代码之前本地的环境还是要搭建好，就是前面一部分。</p>\n<table><tr><td bgcolor=orange>\n-----------------------------------------------------------------------------------------------------------                                                                                                                                                                                                            \n</td></tr></table>\n\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>初学者可能会觉得困难，毕竟很多东西都是第一次接触，当初我也尝试了好几次才成功，不要放弃，弄错了就删掉重新来过，当你把博客搭建出来会觉得受益良多的。</p>\n<p>文章中难免有错误的地方，有大佬发现了欢迎给我指正！有的地方解释不够详细，可以百度一下看看细节，文章中的引用以及参考资料涉及侵权请联系我删除！</p>\n","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/01.png\"></p>\n<p><font color=magenta size=4><strong>在搭建过程中遇到问题欢迎来骚扰我哈！<font color=red size=4> V：godxiaolong，QQ:1571504536</font>，如果觉得有帮助的话不介意打赏一杯奶茶哟~</strong></font></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/02.png\"></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><ul>\n<li><p>作为一名计算机爱好者，摸索了一周搭建出自己的博客。目前只学    习了c语言，没有任何前端知识和网站开发经验，总的来说，算不上很难，     但也要费些心思。网上各类教程应有尽有，只要肯摸索，还是水到渠成的事。另外，写下这篇文章，记录下自己的经验，给需要的朋友，祝你早日拥有自己的博客！</p>\n</li>\n<li><p>搭建博客的初衷是希望用博客记录下自己的学习过程，帮助自己复习，分享一部分不成熟的思考，敦促自己把既定的目标完成。</p>\n</li>\n<li><p><strong>为什么要搭建自己的博客？可以看看这三篇文章：</strong></p>\n</li>\n</ul>\n<p><a href=\"http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/\" title=\"为什么你应该（从现在开始就）写博客\">《为什么你应该（从现在开始就）写博客》</a>   (By 刘未鹏 | Mind Hacks)</p>\n<p><a href=\"https://www.zhihu.com/question/19916345\" title=\"为什么要自建博客？\">《为什么要自建博客？》</a>   (By 知乎)</p>\n<p><a href=\"https://www.cnblogs.com/jhzhu/p/3893297.html\" title=\"我为什么写博客\">《我为什么写博客》</a> （By 知明所以）</p>\n<p>我们需要知道搭建博客要用到的框架。<font color=red size=3>Hexo</font>是高效的静态站点生成框架，它基于<font color=red size=3>Node.js</font>。我们使用<font color=red size=3>MarkDown</font>在本地编辑我们的博客文章，通过<font color=red size=3>Hexo</font>生成静态页面，再用两条命令即可部署到我们的网站。无需关心网页源代码的具体细节，我们只需要用心写好自己的博客内容就行。</p>\n<h2 id=\"本文目录\"><a href=\"#本文目录\" class=\"headerlink\" title=\"本文目录\"></a>本文目录</h2><ul>\n<li><strong>快速搭建</strong></li>\n<li>安装<font color=red size=3>Node.js</font></li>\n<li>添加国内镜像</li>\n<li>安装<font color=red size=3>Git </font></li>\n<li>注册<font color=red size=3>Github</font>账号</li>\n<li>创建<font color=red size=3>Git</font>仓库</li>\n<li>安装<font color=red size=3>Hexo</font> </li>\n<li>配置本地<font color=red size=3>Hexo</font></li>\n<li>连接<font color=red size=3>Github</font>与本地 </li>\n<li>写文章、发布文章 </li>\n<li><font color=red size=3>MarkDown</font>文章编辑器说明</li>\n<li>配置个性化域名</li>\n<li>更换自己喜欢的<font color=red size=3>Hexo</font>主题</li>\n<li>我的博客源代码</li>\n<li>结语</li>\n</ul>\n<hr>\n<h1 id=\"快速搭建\"><a href=\"#快速搭建\" class=\"headerlink\" title=\"快速搭建\"></a>快速搭建</h1><p>有的朋友可能不想去折腾，自定义主题也比较麻烦，亦或有尝试几次搭建却失败，那就可以看这部分。快速搭建可以帮助我们更快搭建出自己的博客，优点是别人博客有的东西你都有，就跟复制差不多；缺点是博客里的配置信息都是别人的，不过不要紧，稍稍改改配置就可以。</p>\n<p>在这里以我的博客为例。</p>\n<h2 id=\"一、下载博客源代码\"><a href=\"#一、下载博客源代码\" class=\"headerlink\" title=\"一、下载博客源代码\"></a>一、下载博客源代码</h2><p>大家可以直接素质二连，<font color=red size=3>Star&amp;Fork</font>我的博客源代码：<a href=\"https://github.com/MUYIio/hexo-themes-matery\">https://github.com/MUYIio/hexo-themes-matery</a>，这里我给出两种下载方法：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/03.png\"></p>\n<p><strong>第一种</strong>：直接<font color=red size=3>DownLoad</font>，下载到本地就可以。（<strong>不推荐</strong>）</p>\n<p><strong>第二种</strong>：如果你已经安装了<a href=\"https://git-scm.com/download/win\" title=\"Git\">Git</a>，就可以右键单击<font color=red size=3>Come Bash Here</font>运行</p>\n<pre><code class=\"bash\">git clone git@github.com:MUYIio/hexo-themes-matery.git\n</code></pre>\n<p>将所有文件下载到本地，这个复杂一点。</p>\n<h2 id=\"二、修改博客文档配置\"><a href=\"#二、修改博客文档配置\" class=\"headerlink\" title=\"二、修改博客文档配置\"></a>二、修改博客文档配置</h2><p>首先将我们下载的博客源代码解压，然后修改主要配置：</p>\n<ul>\n<li>根目录配置文件<font color=red size=3>_config.yml</font>和主题目录配置文件<font color=red size=3>_config.yml</font>中修改个人信息。</li>\n<li>根目录配置文件中修改<font color=red size=3>deploy</font>一栏的<font color=red size=3>repository</font>。</li>\n<li>根目录配置文件中修改<font color=red size=3>baidu_url_submit</font>一栏的<font color=red size=3>token</font>。</li>\n<li>主题配置文件中修改<font color=red size=3>gitalk</font>一栏，修改方法见正文。</li>\n</ul>\n<p>我给出的是博客比较明显的几个地方，先修改这几个地方，其它的可以自己慢慢摸索修改。</p>\n<p>最后一步，<strong>本地的运行环境还是需要搭建好的</strong>，跟着下文操作到连接Github与本地，环境就算是搭建完成。</p>\n<p><strong>本地环境搭建好之后会生成的文件：</strong></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/35.png\"></p>\n<p>然后直接把<font color=red size=3>Hexo</font>文件夹里面的文件删掉，把我的源代码的文件全部移动过来，就是这样了：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/37.png\"></p>\n<p>然后在<font color=red size=3>Hexo</font>文件夹下右键单击鼠标，点击 <font color=red size=3>Git Bash Here</font>点击输入以下命令上传就可以了：</p>\n<pre><code>hexo clean\nhexo g\nhexo d\n</code></pre>\n<h1 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h1><p>了解一下什么是<font color=red size=3>Node.js</font>：</p>\n<blockquote>\n<p><font color=red size=3>Node.js</font>就是一个用于创建服务器端应用程序的运行系统，它可以轻松构建网络或其他事件驱动的应用程序服务器。</p>\n</blockquote>\n<p>需要用到的命令：</p>\n<pre><code>$ git --version\n$ node -v\n$ npm -v\n</code></pre>\n<p><a href=\"https://nodejs.org/en/download/\" title=\"Node.js\">点击此处</a>进入<font color=red size=3>Node.js</font>官网下载相应版本即可，安装时选项全部默认，一路点击<font color=red size=3>Next</font>。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/04.png\"></p>\n<p>检验是否安装成功：<br>按<font color=red size=3>Win+R</font>打开命令提示符，输入<font color=red size=3>node -v</font>和<font color=red size=3>npm -v</font>，如果出现版本号，那么就安装成功了。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/05.png\"></p>\n<h1 id=\"添加国内镜像\"><a href=\"#添加国内镜像\" class=\"headerlink\" title=\"添加国内镜像\"></a>添加国内镜像</h1><p>这里我们使用阿里的国内镜像进行加速，按Win+R打开命令提示符输入：</p>\n<pre><code>npm config set registry https://registry.npm.taobao.org\n</code></pre>\n<h1 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h1><blockquote>\n<p><font color=red size=3>Git</font>是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理，帮助我们把本地网页上传到<font color=red size=3>Github</font>。</p>\n</blockquote>\n<p><a href=\"https://git-scm.com/download/win\" title=\"Git\">点击此处</a>进入Git官网下载相应版本，默认安装即可。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/005.png\"></p>\n<p>参考资料：<a href=\"https://www.cnblogs.com/jytx/p/5602927.html\" title=\"如何在windows下安装GIT\">《如何在windows下安装GIT》</a> (By 俊雨廷休)</p>\n<p>检验是否安装成功：</p>\n<p>安装完成后在命令提示符中输入<font color=red size=3>git –version</font>验证是否安装成功</p>\n<pre><code>git --version\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/06.png\"></p>\n<h1 id=\"注册Github账号\"><a href=\"#注册Github账号\" class=\"headerlink\" title=\"注册Github账号\"></a>注册Github账号</h1><p><font color=red size=3>Github</font>作为全球最大的开源社区，相信朋友们都已经有了吧，如果没有，<a href=\"https://github.com/\" title=\"Github\">点击此处</a>进入<font color=red size=3>Github</font>官网点击 <font color=red size=3>Sign Up </font>注册账户。</p>\n<h1 id=\"创建git仓库\"><a href=\"#创建git仓库\" class=\"headerlink\" title=\"创建git仓库\"></a>创建git仓库</h1><p>登录<font color=red size=3>Github</font>创建一个仓库</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/07.png\"></p>\n<p>如下图所示，<strong>输入自己的项目名字，后面一定要加<font color=red size=3>.github.io</font>后缀，<font color=red size=3>README</font>初始化也要勾上。名称一定要和你的<font color=red size=3>Github</font>名字完全一样，比如你<font color=red size=3>github</font>名字叫<font color=red size=3>A</font>，那么仓库名字一定要是<font color=red size=3>A.github.io</font>。</strong></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/08.png\"></p>\n<p>选择一个自己喜欢的主题：<br>在上面创建的仓库里面点击<font color=red size=3>Settings</font>（不是头像下面那个<font color=red size=3>Settings</font>），向下拉到最后有个<font color=red size=3>GitHub Pages</font>，点击<font color=red size=3>Choose a theme</font>选择一个主题。然后等一会儿，再回到<font color=red size=3>GitHub Pages</font>，就可以预览效果啦。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/09.png\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/10.png\"></p>\n<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h1><blockquote>\n<p><font color=red size=3>Hexo</font>是一款基于<font color=red size=3>Node.js</font>的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在<font color=red size=3>GitHub</font>和<font color=red size=3>Heroku</font>上，是搭建博客的首选框架。</p>\n</blockquote>\n<p>选择一个磁盘，新建一个文件夹用来存放博客文件。比如我的<font color=red size=3>（C&#x2F;panakot Blog）</font>，在该文件夹下右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>，输入以下<font color=red size=3> npm </font>命令即可安装</p>\n<pre><code>$ npm install hexo-cli -g\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/11.png\"></p>\n<p>输入<font color=red size=3>hexo -v</font>即可检验是否安装成功，我这里就不演示了。</p>\n<h1 id=\"配置本地hexo\"><a href=\"#配置本地hexo\" class=\"headerlink\" title=\"配置本地hexo\"></a>配置本地hexo</h1><p>还是在刚才新建的文件夹下再新建一个<font color=red size=3>Hexo</font>文件夹，比如我的<font color=red size=3>（C&#x2F;panakot Blog&#x2F;Hexo）</font>，在<font color=red size=3>Hexo</font>文件夹下右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>，依次输入以下<font color=red size=3> npm </font>命令即可初始化。</p>\n<pre><code>hexo init\nnpm install\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/12.png\"></p>\n<p>初始化成功生成的文件：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/13.png\"></p>\n<p>接着我们输入<font color=red size=3>hexo g</font>生成静态网页，然后输入<font color=red size=3>hexo s</font>打开本地服务器，然后浏览器打开<a href=\"http://localhost:4000/\">http://localhost:4000/</a>，就可以预览我们的博客啦，如图：</p>\n<p>显示以下信息说明操作正确：</p>\n<p><code>INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/14.png\"></p>\n<p>按<font color=red size=3>ctrl+c</font>关闭本地服务器。</p>\n<p><strong>我们以后常用到的<font color=red size=3>Hexo</font>命令：</strong></p>\n<ul>\n<li><p><font color=red size=3>hexo s</font>等价于 <font color=red size=3>hexo server</font>  #<font color=red size=3>Hexo</font> 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</p>\n</li>\n<li><p><font color=red size=3>hexo g</font> 等价于 <font color=red size=3>hexo generate</font>  #生成静态网页 (执行 $ <font color=red size=3>hexo g</font>后会在站点根目录下生成<font color=red size=3>public</font>文件夹,<font color=red size=3> hexo</font>会将”<font color=red size=3>&#x2F;blog&#x2F;source&#x2F;</font>“ 下面的<font color=red size=3>.md</font>后缀的文件编译为<font color=red size=3>.html</font>后缀的文件,存放在”<font color=red size=3>&#x2F;blog&#x2F;public&#x2F; </font>“ 路径下)</p>\n</li>\n<li><p><font color=red size=3>hexo d </font>等价于 <font color=red size=3>hexo deploy</font>  #将本地数据部署到远端服务器(如<font color=red size=3>github</font>)</p>\n</li>\n<li><p><font color=red size=3>hexo clean </font> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的<font color=red size=3>public</font>文件夹</p>\n</li>\n</ul>\n<h1 id=\"连接Github与本地\"><a href=\"#连接Github与本地\" class=\"headerlink\" title=\"连接Github与本地\"></a>连接Github与本地</h1><h2 id=\"一、生成密钥\"><a href=\"#一、生成密钥\" class=\"headerlink\" title=\"一、生成密钥\"></a>一、生成密钥</h2><p>右键单击鼠标，点击 <font color=red size=3>Git Bash Here</font>输入以下命令：</p>\n<pre><code>git config --global user.name &quot;Name&quot;\ngit config --global user.email &quot;Email&quot;\n</code></pre>\n<p><strong><font color=red size=3>Name</font>和<font color=red size=3>Email</font>是我们注册<font color=red size=3>Github</font>时的用户名和邮箱。</strong></p>\n<p>然后生成密钥：</p>\n<pre><code>ssh-keygen -t rsa -C &quot;Email&quot;\n</code></pre>\n<p><strong><font color=red size=3>Email</font>是我们注册<font color=red size=3>Github</font>时的邮箱</strong></p>\n<p>然后会出现：</p>\n<pre><code>Generating public/private rsa key pair.\nEnter file in which to save the key (/c/Users/you/.ssh/id_rsa):\n//到这里可以直接回车将密钥按默认文件进行存储\n</code></pre>\n<p>回车之后：</p>\n<pre><code>Enter passphrase (empty for no passphrase):\n//这里是要你输入密码，其实不需要输什么密码，直接回车就行\nEnter same passphrase again:\n</code></pre>\n<p>接下来会有：</p>\n<pre><code>Your identification has been saved in /c/Users/you/.ssh/id_rsa.\nYour public key has been saved in /c/Users/you/.ssh/id_rsa.pub.\nThe key fingerprint is:\n这里是各种字母数字组成的字符串，结尾是你的邮箱\nThe key&#39;s randomart image is:\n这里也是各种字母数字符号组成的字符串\n</code></pre>\n<p>现在密钥已经生成，一般存放在<font color=red size=3>（&#x2F;c&#x2F;Users&#x2F;you&#x2F;.ssh&#x2F;id_rsa.pub.）</font>，我们运行下面的命令将密钥复制为粘贴板：</p>\n<pre><code> clip &lt; ~/.ssh/id_rsa.pub\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/15.png\"></p>\n<h2 id=\"二、连接Github\"><a href=\"#二、连接Github\" class=\"headerlink\" title=\"二、连接Github\"></a>二、连接Github</h2><p>在<font color=red size=3>Github</font>头像下面点击<font color=red size=3>Settings</font>，再点击<font color=red size=3>SSH and GPG keys</font>，新建一个<font color=red size=3>SSH</font>，名字任意。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/16.png\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/17.png\"></p>\n<p>然后将刚才复制的密钥添加就可以了，像这样：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/18.png\"></p>\n<p><strong>本地连接Github</strong></p>\n<p>右键单击鼠标，点击<font color=red size=3> Git Bash Here</font>输入以下命令，如果如下图所示，出现你的用户名，那就成功了</p>\n<pre><code>ssh -T git@github.com\n//注意不要做任何修改\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/19.png\"></p>\n<p>用记事本打开博客根目录下的<font color=red size=3>_config.yml</font>文件，这是博客的配置文件，我们需要修改一下才能连接<font color=red size=3>Github</font>。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/20.png\"></p>\n<p>修改最后一行的配置：</p>\n<pre><code># Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type:\n</code></pre>\n<p>改为：</p>\n<pre><code># Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: git@github.com:panakot/panakot.github.io.git\n  branch: master\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/21.png\"></p>\n<p>切记：</p>\n<ul>\n<li><strong><font color=red size=3>repository</font>修改为你自己的<font color=red size=3>github</font>项目地址</strong>。</li>\n<li><strong>每一个冒号后面都有一个空格。</strong></li>\n</ul>\n<h1 id=\"写文章、发布文章\"><a href=\"#写文章、发布文章\" class=\"headerlink\" title=\"写文章、发布文章\"></a>写文章、发布文章</h1><p>首先在博客根目录下右键打开<font color=red size=3>Git Bash Here</font>输入以下命令，安装一个扩展.</p>\n<pre><code>npm i hexo-deployer-git\n</code></pre>\n<p>然后输入下面的命令，新建一篇文章。</p>\n<pre><code>hexo new post &quot;article title&quot;\n</code></pre>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/22.png\"></p>\n<p>然后打开<font color=red size=3>C:\\panakot Blog\\Hexo\\source_posts</font>的目录，可以发现下面多了一个文件夹和一个<font color=red size=3>.md</font>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/23.png\"></p>\n<p>编写完<font color=red size=3>markdown</font>文件后，根目录下右键打开<font color=red size=3>Git Bash Here</font>输入<font color=red size=3>hexo g</font>生成静态网页，然后输入<font color=red size=3>hexo s</font>可以本地预览效果，最后输入<font color=red size=3>hexo d</font>上传到<font color=red size=3>github</font>上。</p>\n<p>你的博客地址：<font color=red size=3>https:&#x2F;&#x2F;你的用户名.github.io</font>，比如我的是：<a href=\"https://muyiio.github.io/\">https://muyiio.github.io</a>，现在每个人都可以通过此链接访问你的博客</p>\n<h1 id=\"MarkDown文章编辑器说明\"><a href=\"#MarkDown文章编辑器说明\" class=\"headerlink\" title=\"MarkDown文章编辑器说明\"></a>MarkDown文章编辑器说明</h1><blockquote>\n<p>前面我们提到了使用<font color=red size=3>MarkDown</font>编辑我们的博客文章。<font color=red size=3> Markdown</font> 是<font color=red size=3> 2004</font> 年由 <font color=red size=3>John Gruberis </font>设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会，<font color=red size=3> .md </font>文件可以使用支持 <font color=red size=3>Markdown </font>语法的编辑器编辑，然后将写好的文章<font color=red size=3>（.md文件）</font>保存到<font color=red size=3> \\Hexo\\source_posts </font>文件夹下即可。</p>\n</blockquote>\n<p> <font color=red size=3>Windows </font>上推荐使用 <font color=red size=3>MarkdownPad2 </font>或者<font color=red size=3>小书匠</font>编辑器，<font color=red size=3>macOS </font>上使用<font color=red size=3> Mou</font> 编辑器，<font color=red size=3>Linux </font>上使用 <font color=red size=3>Remarkable</font> 编辑器，<font color=red size=3>Web </font>端上使用 简书。</p>\n<p><strong><a href=\"http://markdownpad.com/download.html\" title=\"MarkDown\">点击此处</a>下载<font color=red size=3>MarkDown</font><br>，刚使用的朋友或许不知道如何使用这个编辑器，只需要几分钟就可以掌握啦，给出以下几个我觉得不错的参考：</strong></p>\n<p><a href=\"https://www.jianshu.com/p/q81RER/\" title=\"献给写作者的 Markdown 新手指南\">《献给写作者的 Markdown 新手指南》</a> （By 简书）</p>\n<p><a href=\"https://blog.csdn.net/u014061630/article/details/81359144?utm_source=app\" title=\"Markdown语法图文全面详解\">《Markdown语法图文全面详解(10分钟学会)》</a>（By 黑暗星球）</p>\n<p><a href=\"https://blog.csdn.net/witnessai1/article/details/52551362?utm_source=app\" title=\"Markdown 语法手册 （完整整理版）\">《Markdown 语法手册 （完整整理版）》</a> （By witnessai1）</p>\n<p><a href=\"https://sspai.com/post/25137\" title=\"认识与入门 Markdown\">《认识与入门 Markdown》</a>（By Te_Lee）</p>\n<p>写完文章记得在博客根目录<font color=red size=3>Bash Here</font>输入<font color=red size=3>hexo g</font>和<font color=red size=3>hexo d</font>上传到网站。</p>\n<h1 id=\"配置个性化域名\"><a href=\"#配置个性化域名\" class=\"headerlink\" title=\"配置个性化域名\"></a>配置个性化域名</h1><p>一顿操作下来，打开我们的博客还是：<font color=red size=3><a href=\"http://www.xxx.github.io/\">www.xxx.github.io</a></font>，是不是很没有牌面？我们可以考虑购买一个专属域名，以后打开博客就是这样：<font color=red size=3><a href=\"http://www.xxx.com/\">www.xxx.com</a> </font>。</p>\n<p><a href=\"https://www.aliyun.com/\" title=\"阿里云\">阿里云</a>和<a href=\"https://cloud.tencent.com/\" title=\"腾讯云\">腾讯云</a>都可以，我的是腾讯云，购买域名后首先需要添加解析：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/24.png\"></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/25.png\"></p>\n<p><strong>方法一：</strong>点击添加记录，需要添加两个记录，两个记录类型都是 <font color=red size=3>CNAME </font>，第一个主机记录为<font color=red size=3> @ </font>，第二个主机记录为<font color=red size=3> www</font>，记录值都是填你自己的博客地址（比如我的是：<font color=red size=3>muyiio.github.io</font>），保存之后域名解析就完成了！</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/27.png\"></p>\n<p><strong>方法二：</strong>两个记录类型为<font color=red size=3> A </font>，第一个主机记录为<font color=red size=3> @ </font>，第二个主机记录为<font color=red size=3> www</font>，记录值都为博客的<font color=red size=3> IP</font> 地址，<font color=red size=3>IP </font>地址可以<font color=red size=3> cmd</font> 中输入<font color=red size=3> ping</font> 你的博客地址 获得（比如我的：<font color=red size=3>ping muyiio.github.io</font>），保存之后域名解析就完成了！</p>\n<p>参考资料：</p>\n<p><a href=\"https://blog.csdn.net/it_man/article/details/9017307\" title=\"域名解析中A记录、CNAME、MX记录、NS记录的区别和联系\">《域名解析中A记录、CNAME、MX记录、NS记录的区别和联系》</a></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/26.png\"></p>\n<p><strong>不管在哪个平台购买域名，操作都大同小异，这里说明两点</strong>：</p>\n<blockquote>\n<p>如果你填写的是没有<font color=red size=3>www</font>的，比如 <font color=red size=3>muyio.com</font>，那么无论是访问<font color=red size=3> <a href=\"https://www.muyiio.com/\">https://www.muyiio.com</a> </font>还是<font color=red size=3> <a href=\"https://muyiio.com/\">https://muyiio.com</a></font> ，都会自动跳转到<font color=red size=3> <a href=\"https://muyiio.com/\">https://muyiio.com</a></font>。</p>\n</blockquote>\n<blockquote>\n<p>如果你填写的是带<font color=red size=3>www</font>的，比如 <font color=red size=3><a href=\"http://www.muyiio.com/\">www.muyiio.com</a> </font>，那么无论是访问 <font color=red size=3><a href=\"https://www.muyiio.com/\">https://www.muyiio.com</a></font> 还是 <font color=red size=3><a href=\"https://muyiio.com/\">https://muyiio.com</a> </font>，都会自动跳转到 <font color=red size=3><a href=\"http://www.imuyiio.com/\">http://www.imuyiio.com</a></font>。</p>\n</blockquote>\n<p>然后打开你的<font color=red size=3>github</font>博客项目，点击settings，拉到下面<font color=red size=3>Custom domain</font>处，填上你自己的域名，保存就可以了。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/28.png\"></p>\n<p>现在我们的项目根目录应该会出现一个名为<font color=red size=3>CNAME</font>的文件了。如果没有的话，打开你本地博客<font color=red size=3>&#x2F;source</font>目录，我的是<font color=red size=3>C:\\Blog\\Hexo\\source</font>，新建<font color=red size=3>CNAME</font>文件，<font color=red size=3>（注意不要加.txt，没有任何后缀名！）</font>。然后在里面写上你的域名，保存。最后运行<font color=red size=3>hexo g、hexo d</font>上传到<font color=red size=3>github</font>。</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/29.png\"></p>\n<p>现在就可以通过我们的个性化域名：<font color=red size=3><a href=\"http://www.xxx.com、xxx.com/\">www.xxx.com、xxx.com</a></font>访问自己的博客了。</p>\n<h1 id=\"更换自己喜欢的Hexo主题\"><a href=\"#更换自己喜欢的Hexo主题\" class=\"headerlink\" title=\"更换自己喜欢的Hexo主题\"></a>更换自己喜欢的Hexo主题</h1><p>点击进入<a href=\"https://hexo.io/themes/\" title=\"Hexo主题专栏\">Hexo主题专栏</a>可以看到很多<font color=red size=3>Hexo</font>主题：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/30.png\"></p>\n<p>推荐：</p>\n<p><a href=\"https://blog.csdn.net/fail_perfectly/article/details/83791781?utm_source=app\" title=\"几个好用的hexo主题\">几个好用的hexo主题</a> (By fail_perfectly)</p>\n<p>这里我们以<a href=\"http://huangxuan.me/\" title=\"Bean Tech\">Bean Tech</a>主题为例，下滑到底部我们可以看到他的<font color=red size=3>GitHub</font>（<font color=red size=3>有的主题是：Theme by xxx，点击那里也是进入GitHub地址</font>）：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/31.png\"></p>\n<p>点击进入主题的<font color=red size=3>GitHub</font>地址：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/32.png\"></p>\n<p>复制该项目地址：</p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/33.png\"></p>\n<p>然后打开<font color=red size=3> Hexo </font>文件夹下的<font color=red size=3> themes</font> 目录（如：<font color=red size=3>C:\\MUYIio Blog\\Hexo\\themes</font>），右键<font color=red size=3> Git Bash Here</font>，输入以下命令：</p>\n<pre><code>$ git clone 此处填写你刚才复制的主题地址\n</code></pre>\n<p>以我们刚才复制的为例：</p>\n<pre><code>$ git clone https://github.com/Huxpro/huxpro.github.io\n</code></pre>\n<p>下载完成后即可在<font color=red size=3> themes </font>目录下生成 <font color=red size=3>hexo-theme-Bean-Tech </font>文件夹，然后打开 <font color=red size=3>Hexo</font> 文件夹下的配置文件 <font color=red size=3>_config.yml </font>，找到关键字 <font color=red size=3>theme</font>，修改参数为：<font color=red size=3>theme：hexo-theme-Bean-Tech </font>（其他主题修改成相应名称即可），<strong>再次注意冒号后面有一个空格！</strong></p>\n<p><img src=\"https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/34.png\"></p>\n<p>现在我们的主题已经替换完成，将它部署到我们的博客，博客根目录下右键<font color=red size=3> Git Bash Here</font>，输入以下命令：</p>\n<pre><code>hexo clean\nhexo g\nhexo d\n</code></pre>\n<p>现在访问我们的网站就可以看到主题已经更换了，但是比如网站标题，图标等都没有更换，我们博客文件中有两份主要的配置文件，名称都是 <font color=red size=3>_config.yml</font> ，它们均是用于站点配置使用的。其中，一份位于站点根目录下（比如我的：<font color=red size=3>C:\\MUYIio Blog\\Hexo_config.yml</font>），主要包含<font color=red size=3> Hexo</font> 本身整站的配置；另一份位于主题目录下（比如我的：<font color=red size=3>C:\\MUYIio Blog\\Hexo\\themes\\hexo-theme-matery_config.yml</font>），这份配置由主题作者提供，主要用于配置主题相关的选项，一般<font color=red size=3> _config.yml </font>文件里都有相关注释，按需修改即可。</p>\n<h1 id=\"我的博客源代码\"><a href=\"#我的博客源代码\" class=\"headerlink\" title=\"我的博客源代码\"></a>我的博客源代码</h1><p><strong>我的博客源代码地址：<a href=\"https://github.com/MUYIio/hexo-themes-matery\">https://github.com/MUYIio/hexo-themes-matery</a>，有心的话可以给个<font color=red size=3>Star&amp;Fork</font>。</strong></p>\n<p>下载源代码：git clone <a href=\"mailto:&#x67;&#105;&#x74;&#64;&#x67;&#105;&#x74;&#x68;&#117;&#x62;&#x2e;&#x63;&#111;&#x6d;\">&#x67;&#105;&#x74;&#64;&#x67;&#105;&#x74;&#x68;&#117;&#x62;&#x2e;&#x63;&#111;&#x6d;</a>:MUYIio&#x2F;hexo-themes-matery.git</p>\n<p>在文章开头给出了快速搭建教程，相对于自己从头开始搭建还是比较方便的，修复了很多<font color=red size=3>Bug</font>，也添加了一些插件，下载就可以使用，可以帮你们省去个性化配置带来的很多麻烦。</p>\n<p>主题的原地址在这里：<a href=\"https://github.com/blinkfox/hexo-theme-matery\">hexo-theme-matery</a>，作者把文档写得也非常的详细，还有中英文两个版本，建议可以多看几遍，在本地修改的时候轻松一些。</p>\n<p>使用我的源代码之前本地的环境还是要搭建好，就是前面一部分。</p>\n<table><tr><td bgcolor=orange>\n-----------------------------------------------------------------------------------------------------------                                                                                                                                                                                                            \n</td></tr></table>\n\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>初学者可能会觉得困难，毕竟很多东西都是第一次接触，当初我也尝试了好几次才成功，不要放弃，弄错了就删掉重新来过，当你把博客搭建出来会觉得受益良多的。</p>\n<p>文章中难免有错误的地方，有大佬发现了欢迎给我指正！有的地方解释不够详细，可以百度一下看看细节，文章中的引用以及参考资料涉及侵权请联系我删除！</p>\n"},{"title":"cmake","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-03-05T13:47:10.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"","source":"_posts/cmake.md","raw":"---\ntitle: cmake\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-03-05 21:47:10\npassword:\nsummary:\ntags:\ncategories:\nkeywords:\ndescription:\n---\n","slug":"cmake","published":1,"updated":"2022-03-05T13:47:10.208Z","_id":"cl0dum5ht0000cie9ayq970s5","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":""},{"title":"Ubuntu 命令","top":false,"cover":false,"toc":true,"mathjax":false,"date":"2022-03-06T02:54:21.000Z","password":null,"summary":null,"keywords":"ubuntu","description":null,"_content":"\n# Ubuntu 命令\n\n## 1、文件/文件夹管理\n\n- `ls` 列出当前目录下的所有文件（不显示隐藏文件）listq\n\n- `cd` 或者 `cd ~`进入用户主目录 Change Directory\n\n- `cd -`返回进入此目录之前所在的目录\n\n- `mkdir dirname` 新建目录 Make Directory\n\n- `rmdir dirname` 删除空目录\n\n- `rm filename` 删除文件Remove Directory\n\n- `rm -rf dirname` 删除非空目录及其包含的所有文件\n\n- `mv file1 file2`将文件1重命名为文件2\n\n- `mv file1 dir1` 将文件1移动到目录1中\n\n- `find 路径 -name “字符串”` 查找路径所在范围内满足字符串匹配的文件和目录\n\n- `sudo su` 转到管理员权限执行命令\n\n- `pwd`指出当前所在的路径。是print working directory的缩写。\n\n- `cat`  查看ubuntu中文本文件的内容 concatenate\n\n- `cat file1 file2>>file3`  把文件1和文件2的内容联合起来放到 file3中\n\n- `su`   切换用户  switch user\n\n- `ps`  (-auxf) 进程状态，类似于 windows 的任务管理器 process status\n\n- `df`  其功能是显示磁盘可用空间数目信息及空间结点信息 disk free\n\n- `ln -s` 创建一个软链接，相当于创建一个快捷方式 ink -soft \n\n- `man` 命令手册 manual\n\n- `chown` change owner\n\n- `chgrp` change group\n\n- `chmod`  change mode\n\n- `tar`  tape archive\n\n- 文件结尾的\"rc\"（如.bashrc、.xinitrc 等）：Resource configuration\n\n- c++ 文件扩展名后缀：\n\t- .a（扩展名 a）：Archive，static library\n\t- .so（扩展名 so）：Shared object，dynamically linked library\n\t- .o（扩展名 o）：Object file，complied result of C/C++ source file\n\t\n- apt：Advanced package tool\n\n- | grep：Global Regular Expression Print， 全局正则表达式版本\n\n- 目录：\n\t- /bin = BInaries\n\t- /dev = Devices\n\t- /etc = Etcetera ; Editable Text Configuration, 可编辑文本配置， 便成了专门放置系统配置文件的目录\n\t- /lib = LIbrary\n\t- /proc = Processes\n\t- /sbin = Superuser Binaries\n\t- /tmp = Temporary\n\t- /usr = Unix Shared Resources\n\t- /var = Variable ?\n\t\n- \n\t\n\t\n\n\n\n## 2、程序安装与卸载\n\n- `chmod`   用于改为用户对于文件的操作权限\n- `remove` 卸载指定的程序，一般最好加上“--purge”执行清除式卸载；并在程序名称后添加*号。举例：`sudo apt-get remove --purge nvidia*`  卸载 nvidia 的驱动及其配置文件\n- `update` 更新本地软件源文件，需要管理员权限，举例：`sudo apt-get update`\n\n## 3、打包/解压\n\n这里需要先解释几个参数。\n\n| 参数 | 含义                       | 参数 | 含义                 |\n| :--- | :------------------------- | :--- | :------------------- |\n| -c   | 建立压缩档案               | -z   | 有gzip属性的         |\n| -t   | 查看内容                   | -j   | 有bz2属性的          |\n| -u   | 更新原压缩包中的文件       | -Z   | 有compress属性的     |\n| -x   | 解压                       | -v   | 显示所有过程         |\n| -r   | 向压缩归档文件末尾追加文件 | -O   | 将文件解开到标准输出 |\n\n上表左边五个参数是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。右边五个参数是根据需要在压缩或解压时可选的。\n 下面进行举例说明。\n **压缩**\n\n- `tar -cvf jpg.tar *.jpg` 将目录里所有jpg文件打包成tar.jpg\n- `tar -czf jpg.tar.gz *.jpg`   将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz\n- `tar -cjf jpg.tar.bz2 *.jpg` 将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2\n- `tar -cZf jpg.tar.Z *.jpg`   将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z\n- `rar a jpg.rar *.jpg` rar格式的压缩，需要先下载rar for linux\n- `zip jpg.zip *.jpg` zip格式的压缩，需要先下载zip for linux\n\n**解压**\n\n- `tar -xvf file.tar` 解压 tar包\n- `tar -xzvf file.tar.gz` 解压tar.gz\n- `tar -xjvf file.tar.bz2`   解压 tar.bz2\n- `tar -xZvf file.tar.Z`   解压tar.Z\n- `unrar e file.rar` 解压rar\n- `unzip file.zip` 解压zip\n\n**总结**\n .tar 用 tar -xvf 解压\n .gz 用 gzip -d或者gunzip 解压\n .tar.gz和.tgz 用 tar -xzf 解压\n .bz2 用 bzip2 -d或者用bunzip2 解压\n .tar.bz2用tar -xjf 解压\n .Z 用 uncompress 解压\n .tar.Z 用tar -xZf 解压\n .rar 用 unrar e解压\n .zip 用 unzip 解压\n\n## 4、用户管理\n\n- `sudo useradd username` 创建一个新的用户username\n- `sudo passwd username` 设置用户username的密码\n- `sudo groupadd groupname` 创建一个新的组groupname\n- `sudo usermod -g groupname username` 把用户username加入到组groupname中\n- `sudo chown username:groupname dirname` 将指定文件的拥有者改为指定的用户或组\n\n## 5、系统管理\n\n- `uname -a` 查看内核版本\n- `cat /etc/issue` 查看ubuntu版本\n- `sudo fdisk -l` 查看磁盘信息\n- `df -h` 查看硬盘剩余空间\n- `free -m` 查看当前的内存使用情况\n- `ps -A` 查看当前有哪些进程\n- `kill 进程号`或者 `killall 进程名` 杀死进程\n- `kill -9 进程号` 强制杀死进程\n\n\n\n设置 conda代理：\n\n原本是空白文件\n\n```\nsudo gedit ~/.condarc\n```\n\n在文件中添加代理端口：\n\n```\nproxy_servers:\n  http: http://127.0.0.1:7890\n  https: https://127.0.0.1:7890\n```\n","source":"_posts/Ubuntu.md","raw":"---\ntitle: Ubuntu 命令\ntop: false\ncover: false\ntoc: true\nmathjax: false\ndate: 2022-03-06 10:54:21\npassword:\nsummary:\ntags: ubuntu\ncategories:\nkeywords: ubuntu\ndescription:\n---\n\n# Ubuntu 命令\n\n## 1、文件/文件夹管理\n\n- `ls` 列出当前目录下的所有文件（不显示隐藏文件）listq\n\n- `cd` 或者 `cd ~`进入用户主目录 Change Directory\n\n- `cd -`返回进入此目录之前所在的目录\n\n- `mkdir dirname` 新建目录 Make Directory\n\n- `rmdir dirname` 删除空目录\n\n- `rm filename` 删除文件Remove Directory\n\n- `rm -rf dirname` 删除非空目录及其包含的所有文件\n\n- `mv file1 file2`将文件1重命名为文件2\n\n- `mv file1 dir1` 将文件1移动到目录1中\n\n- `find 路径 -name “字符串”` 查找路径所在范围内满足字符串匹配的文件和目录\n\n- `sudo su` 转到管理员权限执行命令\n\n- `pwd`指出当前所在的路径。是print working directory的缩写。\n\n- `cat`  查看ubuntu中文本文件的内容 concatenate\n\n- `cat file1 file2>>file3`  把文件1和文件2的内容联合起来放到 file3中\n\n- `su`   切换用户  switch user\n\n- `ps`  (-auxf) 进程状态，类似于 windows 的任务管理器 process status\n\n- `df`  其功能是显示磁盘可用空间数目信息及空间结点信息 disk free\n\n- `ln -s` 创建一个软链接，相当于创建一个快捷方式 ink -soft \n\n- `man` 命令手册 manual\n\n- `chown` change owner\n\n- `chgrp` change group\n\n- `chmod`  change mode\n\n- `tar`  tape archive\n\n- 文件结尾的\"rc\"（如.bashrc、.xinitrc 等）：Resource configuration\n\n- c++ 文件扩展名后缀：\n\t- .a（扩展名 a）：Archive，static library\n\t- .so（扩展名 so）：Shared object，dynamically linked library\n\t- .o（扩展名 o）：Object file，complied result of C/C++ source file\n\t\n- apt：Advanced package tool\n\n- | grep：Global Regular Expression Print， 全局正则表达式版本\n\n- 目录：\n\t- /bin = BInaries\n\t- /dev = Devices\n\t- /etc = Etcetera ; Editable Text Configuration, 可编辑文本配置， 便成了专门放置系统配置文件的目录\n\t- /lib = LIbrary\n\t- /proc = Processes\n\t- /sbin = Superuser Binaries\n\t- /tmp = Temporary\n\t- /usr = Unix Shared Resources\n\t- /var = Variable ?\n\t\n- \n\t\n\t\n\n\n\n## 2、程序安装与卸载\n\n- `chmod`   用于改为用户对于文件的操作权限\n- `remove` 卸载指定的程序，一般最好加上“--purge”执行清除式卸载；并在程序名称后添加*号。举例：`sudo apt-get remove --purge nvidia*`  卸载 nvidia 的驱动及其配置文件\n- `update` 更新本地软件源文件，需要管理员权限，举例：`sudo apt-get update`\n\n## 3、打包/解压\n\n这里需要先解释几个参数。\n\n| 参数 | 含义                       | 参数 | 含义                 |\n| :--- | :------------------------- | :--- | :------------------- |\n| -c   | 建立压缩档案               | -z   | 有gzip属性的         |\n| -t   | 查看内容                   | -j   | 有bz2属性的          |\n| -u   | 更新原压缩包中的文件       | -Z   | 有compress属性的     |\n| -x   | 解压                       | -v   | 显示所有过程         |\n| -r   | 向压缩归档文件末尾追加文件 | -O   | 将文件解开到标准输出 |\n\n上表左边五个参数是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。右边五个参数是根据需要在压缩或解压时可选的。\n 下面进行举例说明。\n **压缩**\n\n- `tar -cvf jpg.tar *.jpg` 将目录里所有jpg文件打包成tar.jpg\n- `tar -czf jpg.tar.gz *.jpg`   将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz\n- `tar -cjf jpg.tar.bz2 *.jpg` 将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2\n- `tar -cZf jpg.tar.Z *.jpg`   将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z\n- `rar a jpg.rar *.jpg` rar格式的压缩，需要先下载rar for linux\n- `zip jpg.zip *.jpg` zip格式的压缩，需要先下载zip for linux\n\n**解压**\n\n- `tar -xvf file.tar` 解压 tar包\n- `tar -xzvf file.tar.gz` 解压tar.gz\n- `tar -xjvf file.tar.bz2`   解压 tar.bz2\n- `tar -xZvf file.tar.Z`   解压tar.Z\n- `unrar e file.rar` 解压rar\n- `unzip file.zip` 解压zip\n\n**总结**\n .tar 用 tar -xvf 解压\n .gz 用 gzip -d或者gunzip 解压\n .tar.gz和.tgz 用 tar -xzf 解压\n .bz2 用 bzip2 -d或者用bunzip2 解压\n .tar.bz2用tar -xjf 解压\n .Z 用 uncompress 解压\n .tar.Z 用tar -xZf 解压\n .rar 用 unrar e解压\n .zip 用 unzip 解压\n\n## 4、用户管理\n\n- `sudo useradd username` 创建一个新的用户username\n- `sudo passwd username` 设置用户username的密码\n- `sudo groupadd groupname` 创建一个新的组groupname\n- `sudo usermod -g groupname username` 把用户username加入到组groupname中\n- `sudo chown username:groupname dirname` 将指定文件的拥有者改为指定的用户或组\n\n## 5、系统管理\n\n- `uname -a` 查看内核版本\n- `cat /etc/issue` 查看ubuntu版本\n- `sudo fdisk -l` 查看磁盘信息\n- `df -h` 查看硬盘剩余空间\n- `free -m` 查看当前的内存使用情况\n- `ps -A` 查看当前有哪些进程\n- `kill 进程号`或者 `killall 进程名` 杀死进程\n- `kill -9 进程号` 强制杀死进程\n\n\n\n设置 conda代理：\n\n原本是空白文件\n\n```\nsudo gedit ~/.condarc\n```\n\n在文件中添加代理端口：\n\n```\nproxy_servers:\n  http: http://127.0.0.1:7890\n  https: https://127.0.0.1:7890\n```\n","slug":"Ubuntu","published":1,"updated":"2022-03-06T04:07:32.000Z","_id":"cl0dvrsoy0007rme9czfd9h3p","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Ubuntu-命令\"><a href=\"#Ubuntu-命令\" class=\"headerlink\" title=\"Ubuntu 命令\"></a>Ubuntu 命令</h1><h2 id=\"1、文件-x2F-文件夹管理\"><a href=\"#1、文件-x2F-文件夹管理\" class=\"headerlink\" title=\"1、文件&#x2F;文件夹管理\"></a>1、文件&#x2F;文件夹管理</h2><ul>\n<li><p><code>ls</code> 列出当前目录下的所有文件（不显示隐藏文件）listq</p>\n</li>\n<li><p><code>cd</code> 或者 <code>cd ~</code>进入用户主目录 Change Directory</p>\n</li>\n<li><p><code>cd -</code>返回进入此目录之前所在的目录</p>\n</li>\n<li><p><code>mkdir dirname</code> 新建目录 Make Directory</p>\n</li>\n<li><p><code>rmdir dirname</code> 删除空目录</p>\n</li>\n<li><p><code>rm filename</code> 删除文件Remove Directory</p>\n</li>\n<li><p><code>rm -rf dirname</code> 删除非空目录及其包含的所有文件</p>\n</li>\n<li><p><code>mv file1 file2</code>将文件1重命名为文件2</p>\n</li>\n<li><p><code>mv file1 dir1</code> 将文件1移动到目录1中</p>\n</li>\n<li><p><code>find 路径 -name “字符串”</code> 查找路径所在范围内满足字符串匹配的文件和目录</p>\n</li>\n<li><p><code>sudo su</code> 转到管理员权限执行命令</p>\n</li>\n<li><p><code>pwd</code>指出当前所在的路径。是print working directory的缩写。</p>\n</li>\n<li><p><code>cat</code>  查看ubuntu中文本文件的内容 concatenate</p>\n</li>\n<li><p><code>cat file1 file2&gt;&gt;file3</code>  把文件1和文件2的内容联合起来放到 file3中</p>\n</li>\n<li><p><code>su</code>   切换用户  switch user</p>\n</li>\n<li><p><code>ps</code>  (-auxf) 进程状态，类似于 windows 的任务管理器 process status</p>\n</li>\n<li><p><code>df</code>  其功能是显示磁盘可用空间数目信息及空间结点信息 disk free</p>\n</li>\n<li><p><code>ln -s</code> 创建一个软链接，相当于创建一个快捷方式 ink -soft </p>\n</li>\n<li><p><code>man</code> 命令手册 manual</p>\n</li>\n<li><p><code>chown</code> change owner</p>\n</li>\n<li><p><code>chgrp</code> change group</p>\n</li>\n<li><p><code>chmod</code>  change mode</p>\n</li>\n<li><p><code>tar</code>  tape archive</p>\n</li>\n<li><p>文件结尾的”rc”（如.bashrc、.xinitrc 等）：Resource configuration</p>\n</li>\n<li><p>c++ 文件扩展名后缀：</p>\n<ul>\n<li>.a（扩展名 a）：Archive，static library</li>\n<li>.so（扩展名 so）：Shared object，dynamically linked library</li>\n<li>.o（扩展名 o）：Object file，complied result of C&#x2F;C++ source file</li>\n</ul>\n</li>\n<li><p>apt：Advanced package tool</p>\n</li>\n<li><p>| grep：Global Regular Expression Print， 全局正则表达式版本</p>\n</li>\n<li><p>目录：</p>\n<ul>\n<li>&#x2F;bin &#x3D; BInaries</li>\n<li>&#x2F;dev &#x3D; Devices</li>\n<li>&#x2F;etc &#x3D; Etcetera ; Editable Text Configuration, 可编辑文本配置， 便成了专门放置系统配置文件的目录</li>\n<li>&#x2F;lib &#x3D; LIbrary</li>\n<li>&#x2F;proc &#x3D; Processes</li>\n<li>&#x2F;sbin &#x3D; Superuser Binaries</li>\n<li>&#x2F;tmp &#x3D; Temporary</li>\n<li>&#x2F;usr &#x3D; Unix Shared Resources</li>\n<li>&#x2F;var &#x3D; Variable ?</li>\n</ul>\n</li>\n<li></li>\n</ul>\n<h2 id=\"2、程序安装与卸载\"><a href=\"#2、程序安装与卸载\" class=\"headerlink\" title=\"2、程序安装与卸载\"></a>2、程序安装与卸载</h2><ul>\n<li><code>chmod</code>   用于改为用户对于文件的操作权限</li>\n<li><code>remove</code> 卸载指定的程序，一般最好加上“–purge”执行清除式卸载；并在程序名称后添加*号。举例：<code>sudo apt-get remove --purge nvidia*</code>  卸载 nvidia 的驱动及其配置文件</li>\n<li><code>update</code> 更新本地软件源文件，需要管理员权限，举例：<code>sudo apt-get update</code></li>\n</ul>\n<h2 id=\"3、打包-x2F-解压\"><a href=\"#3、打包-x2F-解压\" class=\"headerlink\" title=\"3、打包&#x2F;解压\"></a>3、打包&#x2F;解压</h2><p>这里需要先解释几个参数。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">含义</th>\n<th align=\"left\">参数</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-c</td>\n<td align=\"left\">建立压缩档案</td>\n<td align=\"left\">-z</td>\n<td align=\"left\">有gzip属性的</td>\n</tr>\n<tr>\n<td align=\"left\">-t</td>\n<td align=\"left\">查看内容</td>\n<td align=\"left\">-j</td>\n<td align=\"left\">有bz2属性的</td>\n</tr>\n<tr>\n<td align=\"left\">-u</td>\n<td align=\"left\">更新原压缩包中的文件</td>\n<td align=\"left\">-Z</td>\n<td align=\"left\">有compress属性的</td>\n</tr>\n<tr>\n<td align=\"left\">-x</td>\n<td align=\"left\">解压</td>\n<td align=\"left\">-v</td>\n<td align=\"left\">显示所有过程</td>\n</tr>\n<tr>\n<td align=\"left\">-r</td>\n<td align=\"left\">向压缩归档文件末尾追加文件</td>\n<td align=\"left\">-O</td>\n<td align=\"left\">将文件解开到标准输出</td>\n</tr>\n</tbody></table>\n<p>上表左边五个参数是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。右边五个参数是根据需要在压缩或解压时可选的。<br> 下面进行举例说明。<br> <strong>压缩</strong></p>\n<ul>\n<li><code>tar -cvf jpg.tar *.jpg</code> 将目录里所有jpg文件打包成tar.jpg</li>\n<li><code>tar -czf jpg.tar.gz *.jpg</code>   将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz</li>\n<li><code>tar -cjf jpg.tar.bz2 *.jpg</code> 将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2</li>\n<li><code>tar -cZf jpg.tar.Z *.jpg</code>   将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z</li>\n<li><code>rar a jpg.rar *.jpg</code> rar格式的压缩，需要先下载rar for linux</li>\n<li><code>zip jpg.zip *.jpg</code> zip格式的压缩，需要先下载zip for linux</li>\n</ul>\n<p><strong>解压</strong></p>\n<ul>\n<li><code>tar -xvf file.tar</code> 解压 tar包</li>\n<li><code>tar -xzvf file.tar.gz</code> 解压tar.gz</li>\n<li><code>tar -xjvf file.tar.bz2</code>   解压 tar.bz2</li>\n<li><code>tar -xZvf file.tar.Z</code>   解压tar.Z</li>\n<li><code>unrar e file.rar</code> 解压rar</li>\n<li><code>unzip file.zip</code> 解压zip</li>\n</ul>\n<p><strong>总结</strong><br> .tar 用 tar -xvf 解压<br> .gz 用 gzip -d或者gunzip 解压<br> .tar.gz和.tgz 用 tar -xzf 解压<br> .bz2 用 bzip2 -d或者用bunzip2 解压<br> .tar.bz2用tar -xjf 解压<br> .Z 用 uncompress 解压<br> .tar.Z 用tar -xZf 解压<br> .rar 用 unrar e解压<br> .zip 用 unzip 解压</p>\n<h2 id=\"4、用户管理\"><a href=\"#4、用户管理\" class=\"headerlink\" title=\"4、用户管理\"></a>4、用户管理</h2><ul>\n<li><code>sudo useradd username</code> 创建一个新的用户username</li>\n<li><code>sudo passwd username</code> 设置用户username的密码</li>\n<li><code>sudo groupadd groupname</code> 创建一个新的组groupname</li>\n<li><code>sudo usermod -g groupname username</code> 把用户username加入到组groupname中</li>\n<li><code>sudo chown username:groupname dirname</code> 将指定文件的拥有者改为指定的用户或组</li>\n</ul>\n<h2 id=\"5、系统管理\"><a href=\"#5、系统管理\" class=\"headerlink\" title=\"5、系统管理\"></a>5、系统管理</h2><ul>\n<li><code>uname -a</code> 查看内核版本</li>\n<li><code>cat /etc/issue</code> 查看ubuntu版本</li>\n<li><code>sudo fdisk -l</code> 查看磁盘信息</li>\n<li><code>df -h</code> 查看硬盘剩余空间</li>\n<li><code>free -m</code> 查看当前的内存使用情况</li>\n<li><code>ps -A</code> 查看当前有哪些进程</li>\n<li><code>kill 进程号</code>或者 <code>killall 进程名</code> 杀死进程</li>\n<li><code>kill -9 进程号</code> 强制杀死进程</li>\n</ul>\n<p>设置 conda代理：</p>\n<p>原本是空白文件</p>\n<pre><code>sudo gedit ~/.condarc\n</code></pre>\n<p>在文件中添加代理端口：</p>\n<pre><code>proxy_servers:\n  http: http://127.0.0.1:7890\n  https: https://127.0.0.1:7890\n</code></pre>\n","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<h1 id=\"Ubuntu-命令\"><a href=\"#Ubuntu-命令\" class=\"headerlink\" title=\"Ubuntu 命令\"></a>Ubuntu 命令</h1><h2 id=\"1、文件-x2F-文件夹管理\"><a href=\"#1、文件-x2F-文件夹管理\" class=\"headerlink\" title=\"1、文件&#x2F;文件夹管理\"></a>1、文件&#x2F;文件夹管理</h2><ul>\n<li><p><code>ls</code> 列出当前目录下的所有文件（不显示隐藏文件）listq</p>\n</li>\n<li><p><code>cd</code> 或者 <code>cd ~</code>进入用户主目录 Change Directory</p>\n</li>\n<li><p><code>cd -</code>返回进入此目录之前所在的目录</p>\n</li>\n<li><p><code>mkdir dirname</code> 新建目录 Make Directory</p>\n</li>\n<li><p><code>rmdir dirname</code> 删除空目录</p>\n</li>\n<li><p><code>rm filename</code> 删除文件Remove Directory</p>\n</li>\n<li><p><code>rm -rf dirname</code> 删除非空目录及其包含的所有文件</p>\n</li>\n<li><p><code>mv file1 file2</code>将文件1重命名为文件2</p>\n</li>\n<li><p><code>mv file1 dir1</code> 将文件1移动到目录1中</p>\n</li>\n<li><p><code>find 路径 -name “字符串”</code> 查找路径所在范围内满足字符串匹配的文件和目录</p>\n</li>\n<li><p><code>sudo su</code> 转到管理员权限执行命令</p>\n</li>\n<li><p><code>pwd</code>指出当前所在的路径。是print working directory的缩写。</p>\n</li>\n<li><p><code>cat</code>  查看ubuntu中文本文件的内容 concatenate</p>\n</li>\n<li><p><code>cat file1 file2&gt;&gt;file3</code>  把文件1和文件2的内容联合起来放到 file3中</p>\n</li>\n<li><p><code>su</code>   切换用户  switch user</p>\n</li>\n<li><p><code>ps</code>  (-auxf) 进程状态，类似于 windows 的任务管理器 process status</p>\n</li>\n<li><p><code>df</code>  其功能是显示磁盘可用空间数目信息及空间结点信息 disk free</p>\n</li>\n<li><p><code>ln -s</code> 创建一个软链接，相当于创建一个快捷方式 ink -soft </p>\n</li>\n<li><p><code>man</code> 命令手册 manual</p>\n</li>\n<li><p><code>chown</code> change owner</p>\n</li>\n<li><p><code>chgrp</code> change group</p>\n</li>\n<li><p><code>chmod</code>  change mode</p>\n</li>\n<li><p><code>tar</code>  tape archive</p>\n</li>\n<li><p>文件结尾的”rc”（如.bashrc、.xinitrc 等）：Resource configuration</p>\n</li>\n<li><p>c++ 文件扩展名后缀：</p>\n<ul>\n<li>.a（扩展名 a）：Archive，static library</li>\n<li>.so（扩展名 so）：Shared object，dynamically linked library</li>\n<li>.o（扩展名 o）：Object file，complied result of C&#x2F;C++ source file</li>\n</ul>\n</li>\n<li><p>apt：Advanced package tool</p>\n</li>\n<li><p>| grep：Global Regular Expression Print， 全局正则表达式版本</p>\n</li>\n<li><p>目录：</p>\n<ul>\n<li>&#x2F;bin &#x3D; BInaries</li>\n<li>&#x2F;dev &#x3D; Devices</li>\n<li>&#x2F;etc &#x3D; Etcetera ; Editable Text Configuration, 可编辑文本配置， 便成了专门放置系统配置文件的目录</li>\n<li>&#x2F;lib &#x3D; LIbrary</li>\n<li>&#x2F;proc &#x3D; Processes</li>\n<li>&#x2F;sbin &#x3D; Superuser Binaries</li>\n<li>&#x2F;tmp &#x3D; Temporary</li>\n<li>&#x2F;usr &#x3D; Unix Shared Resources</li>\n<li>&#x2F;var &#x3D; Variable ?</li>\n</ul>\n</li>\n<li></li>\n</ul>\n<h2 id=\"2、程序安装与卸载\"><a href=\"#2、程序安装与卸载\" class=\"headerlink\" title=\"2、程序安装与卸载\"></a>2、程序安装与卸载</h2><ul>\n<li><code>chmod</code>   用于改为用户对于文件的操作权限</li>\n<li><code>remove</code> 卸载指定的程序，一般最好加上“–purge”执行清除式卸载；并在程序名称后添加*号。举例：<code>sudo apt-get remove --purge nvidia*</code>  卸载 nvidia 的驱动及其配置文件</li>\n<li><code>update</code> 更新本地软件源文件，需要管理员权限，举例：<code>sudo apt-get update</code></li>\n</ul>\n<h2 id=\"3、打包-x2F-解压\"><a href=\"#3、打包-x2F-解压\" class=\"headerlink\" title=\"3、打包&#x2F;解压\"></a>3、打包&#x2F;解压</h2><p>这里需要先解释几个参数。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">含义</th>\n<th align=\"left\">参数</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-c</td>\n<td align=\"left\">建立压缩档案</td>\n<td align=\"left\">-z</td>\n<td align=\"left\">有gzip属性的</td>\n</tr>\n<tr>\n<td align=\"left\">-t</td>\n<td align=\"left\">查看内容</td>\n<td align=\"left\">-j</td>\n<td align=\"left\">有bz2属性的</td>\n</tr>\n<tr>\n<td align=\"left\">-u</td>\n<td align=\"left\">更新原压缩包中的文件</td>\n<td align=\"left\">-Z</td>\n<td align=\"left\">有compress属性的</td>\n</tr>\n<tr>\n<td align=\"left\">-x</td>\n<td align=\"left\">解压</td>\n<td align=\"left\">-v</td>\n<td align=\"left\">显示所有过程</td>\n</tr>\n<tr>\n<td align=\"left\">-r</td>\n<td align=\"left\">向压缩归档文件末尾追加文件</td>\n<td align=\"left\">-O</td>\n<td align=\"left\">将文件解开到标准输出</td>\n</tr>\n</tbody></table>\n<p>上表左边五个参数是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。右边五个参数是根据需要在压缩或解压时可选的。<br> 下面进行举例说明。<br> <strong>压缩</strong></p>\n<ul>\n<li><code>tar -cvf jpg.tar *.jpg</code> 将目录里所有jpg文件打包成tar.jpg</li>\n<li><code>tar -czf jpg.tar.gz *.jpg</code>   将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz</li>\n<li><code>tar -cjf jpg.tar.bz2 *.jpg</code> 将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2</li>\n<li><code>tar -cZf jpg.tar.Z *.jpg</code>   将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z</li>\n<li><code>rar a jpg.rar *.jpg</code> rar格式的压缩，需要先下载rar for linux</li>\n<li><code>zip jpg.zip *.jpg</code> zip格式的压缩，需要先下载zip for linux</li>\n</ul>\n<p><strong>解压</strong></p>\n<ul>\n<li><code>tar -xvf file.tar</code> 解压 tar包</li>\n<li><code>tar -xzvf file.tar.gz</code> 解压tar.gz</li>\n<li><code>tar -xjvf file.tar.bz2</code>   解压 tar.bz2</li>\n<li><code>tar -xZvf file.tar.Z</code>   解压tar.Z</li>\n<li><code>unrar e file.rar</code> 解压rar</li>\n<li><code>unzip file.zip</code> 解压zip</li>\n</ul>\n<p><strong>总结</strong><br> .tar 用 tar -xvf 解压<br> .gz 用 gzip -d或者gunzip 解压<br> .tar.gz和.tgz 用 tar -xzf 解压<br> .bz2 用 bzip2 -d或者用bunzip2 解压<br> .tar.bz2用tar -xjf 解压<br> .Z 用 uncompress 解压<br> .tar.Z 用tar -xZf 解压<br> .rar 用 unrar e解压<br> .zip 用 unzip 解压</p>\n<h2 id=\"4、用户管理\"><a href=\"#4、用户管理\" class=\"headerlink\" title=\"4、用户管理\"></a>4、用户管理</h2><ul>\n<li><code>sudo useradd username</code> 创建一个新的用户username</li>\n<li><code>sudo passwd username</code> 设置用户username的密码</li>\n<li><code>sudo groupadd groupname</code> 创建一个新的组groupname</li>\n<li><code>sudo usermod -g groupname username</code> 把用户username加入到组groupname中</li>\n<li><code>sudo chown username:groupname dirname</code> 将指定文件的拥有者改为指定的用户或组</li>\n</ul>\n<h2 id=\"5、系统管理\"><a href=\"#5、系统管理\" class=\"headerlink\" title=\"5、系统管理\"></a>5、系统管理</h2><ul>\n<li><code>uname -a</code> 查看内核版本</li>\n<li><code>cat /etc/issue</code> 查看ubuntu版本</li>\n<li><code>sudo fdisk -l</code> 查看磁盘信息</li>\n<li><code>df -h</code> 查看硬盘剩余空间</li>\n<li><code>free -m</code> 查看当前的内存使用情况</li>\n<li><code>ps -A</code> 查看当前有哪些进程</li>\n<li><code>kill 进程号</code>或者 <code>killall 进程名</code> 杀死进程</li>\n<li><code>kill -9 进程号</code> 强制杀死进程</li>\n</ul>\n<p>设置 conda代理：</p>\n<p>原本是空白文件</p>\n<pre><code>sudo gedit ~/.condarc\n</code></pre>\n<p>在文件中添加代理端口：</p>\n<pre><code>proxy_servers:\n  http: http://127.0.0.1:7890\n  https: https://127.0.0.1:7890\n</code></pre>\n"},{"_content":"## 置顶快捷键\n\n|          |                  |          |                  |\n| -------- | ---------------- | -------- | ---------------- |\n| 插入图片 | Ctrl + Shift + I | 插入链接 | Ctrl + K         |\n| 插入代码 | Ctrl + Shift + K | 插入公式 | Ctrl + Shift + M |\n|          |                  | 行内公式 | `$公式$`         |\n| 加粗     | Ctrl + B         | 下划线   | Ctrl + U         |\n| 字体倾斜 | Ctrl + I         |          |                  |\n|          |                  |          |                  |\n| 无序列表 | + + Space        | 有序列表 | 1 + . + Space    |\n| 降级列表 | Tab              | 升级列表 | Shift + Tab      |\n|          |                  |          |                  |\n| 创建表格 | Ctrl + T         |          |                  |\n|          |                  |          |                  |\n\n\n\n## RAFT\n\n**RAFT: Recurrent All-Pairs Field Transforms for Optical Flow**\n\n**2020 ECCV**\n\n**创新:**\n\nRAFT maintains and updates a single ﬁxed ﬂow ﬁeld at high resolution. This is diﬀerent from the prevailing coarse-to-ﬁne design in prior work [42,49,22,23,50], where ﬂow is ﬁrst estimated at low resolution and upsam- pled and reﬁned at high resolution. By operating on a single high-resolution ﬂow ﬁeld, RAFT overcomes several limitations of a coarse-to-ﬁne cascade: the diﬃ- culty of recovering from errors at coarse resolutions, the tendency to miss small fast-moving objects, and the many training iterations (often over 1M) typically required for training a multi-stage cascade\n\nRAFT以高分辨率维护和更新单个固定流场。这不同于之前工作[42,49,22,23,50]中普遍采用的从粗到细的设计，其中首先在低分辨率下估计流量，然后在高分辨率下进行上采样和重新定义。通过在单个高分辨率流场上运行，RAFT克服了粗到细级联的几个限制：难以从粗分辨率的错误中恢复，容易错过快速移动的小对象，以及训练多级级联通常需要的多次训练迭代（通常超过1M）\n\n## LiteFlowNet3\n\n**2020 ECCV**\n\n**solve:**\n\n解决从粗到细的光流推断初始化错误问题\n","source":"_posts/paper/笔记.md","raw":"## 置顶快捷键\n\n|          |                  |          |                  |\n| -------- | ---------------- | -------- | ---------------- |\n| 插入图片 | Ctrl + Shift + I | 插入链接 | Ctrl + K         |\n| 插入代码 | Ctrl + Shift + K | 插入公式 | Ctrl + Shift + M |\n|          |                  | 行内公式 | `$公式$`         |\n| 加粗     | Ctrl + B         | 下划线   | Ctrl + U         |\n| 字体倾斜 | Ctrl + I         |          |                  |\n|          |                  |          |                  |\n| 无序列表 | + + Space        | 有序列表 | 1 + . + Space    |\n| 降级列表 | Tab              | 升级列表 | Shift + Tab      |\n|          |                  |          |                  |\n| 创建表格 | Ctrl + T         |          |                  |\n|          |                  |          |                  |\n\n\n\n## RAFT\n\n**RAFT: Recurrent All-Pairs Field Transforms for Optical Flow**\n\n**2020 ECCV**\n\n**创新:**\n\nRAFT maintains and updates a single ﬁxed ﬂow ﬁeld at high resolution. This is diﬀerent from the prevailing coarse-to-ﬁne design in prior work [42,49,22,23,50], where ﬂow is ﬁrst estimated at low resolution and upsam- pled and reﬁned at high resolution. By operating on a single high-resolution ﬂow ﬁeld, RAFT overcomes several limitations of a coarse-to-ﬁne cascade: the diﬃ- culty of recovering from errors at coarse resolutions, the tendency to miss small fast-moving objects, and the many training iterations (often over 1M) typically required for training a multi-stage cascade\n\nRAFT以高分辨率维护和更新单个固定流场。这不同于之前工作[42,49,22,23,50]中普遍采用的从粗到细的设计，其中首先在低分辨率下估计流量，然后在高分辨率下进行上采样和重新定义。通过在单个高分辨率流场上运行，RAFT克服了粗到细级联的几个限制：难以从粗分辨率的错误中恢复，容易错过快速移动的小对象，以及训练多级级联通常需要的多次训练迭代（通常超过1M）\n\n## LiteFlowNet3\n\n**2020 ECCV**\n\n**solve:**\n\n解决从粗到细的光流推断初始化错误问题\n","slug":"paper/笔记","published":1,"date":"2022-03-05T13:08:53.637Z","updated":"2021-11-05T08:57:39.449Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0dvrsp1000arme97h182bc3","content":"<h2 id=\"置顶快捷键\"><a href=\"#置顶快捷键\" class=\"headerlink\" title=\"置顶快捷键\"></a>置顶快捷键</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>插入图片</td>\n<td>Ctrl + Shift + I</td>\n<td>插入链接</td>\n<td>Ctrl + K</td>\n</tr>\n<tr>\n<td>插入代码</td>\n<td>Ctrl + Shift + K</td>\n<td>插入公式</td>\n<td>Ctrl + Shift + M</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>行内公式</td>\n<td><code>$公式$</code></td>\n</tr>\n<tr>\n<td>加粗</td>\n<td>Ctrl + B</td>\n<td>下划线</td>\n<td>Ctrl + U</td>\n</tr>\n<tr>\n<td>字体倾斜</td>\n<td>Ctrl + I</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>无序列表</td>\n<td>+ + Space</td>\n<td>有序列表</td>\n<td>1 + . + Space</td>\n</tr>\n<tr>\n<td>降级列表</td>\n<td>Tab</td>\n<td>升级列表</td>\n<td>Shift + Tab</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>创建表格</td>\n<td>Ctrl + T</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"RAFT\"><a href=\"#RAFT\" class=\"headerlink\" title=\"RAFT\"></a>RAFT</h2><p><strong>RAFT: Recurrent All-Pairs Field Transforms for Optical Flow</strong></p>\n<p><strong>2020 ECCV</strong></p>\n<p><strong>创新:</strong></p>\n<p>RAFT maintains and updates a single ﬁxed ﬂow ﬁeld at high resolution. This is diﬀerent from the prevailing coarse-to-ﬁne design in prior work [42,49,22,23,50], where ﬂow is ﬁrst estimated at low resolution and upsam- pled and reﬁned at high resolution. By operating on a single high-resolution ﬂow ﬁeld, RAFT overcomes several limitations of a coarse-to-ﬁne cascade: the diﬃ- culty of recovering from errors at coarse resolutions, the tendency to miss small fast-moving objects, and the many training iterations (often over 1M) typically required for training a multi-stage cascade</p>\n<p>RAFT以高分辨率维护和更新单个固定流场。这不同于之前工作[42,49,22,23,50]中普遍采用的从粗到细的设计，其中首先在低分辨率下估计流量，然后在高分辨率下进行上采样和重新定义。通过在单个高分辨率流场上运行，RAFT克服了粗到细级联的几个限制：难以从粗分辨率的错误中恢复，容易错过快速移动的小对象，以及训练多级级联通常需要的多次训练迭代（通常超过1M）</p>\n<h2 id=\"LiteFlowNet3\"><a href=\"#LiteFlowNet3\" class=\"headerlink\" title=\"LiteFlowNet3\"></a>LiteFlowNet3</h2><p><strong>2020 ECCV</strong></p>\n<p><strong>solve:</strong></p>\n<p>解决从粗到细的光流推断初始化错误问题</p>\n","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<h2 id=\"置顶快捷键\"><a href=\"#置顶快捷键\" class=\"headerlink\" title=\"置顶快捷键\"></a>置顶快捷键</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>插入图片</td>\n<td>Ctrl + Shift + I</td>\n<td>插入链接</td>\n<td>Ctrl + K</td>\n</tr>\n<tr>\n<td>插入代码</td>\n<td>Ctrl + Shift + K</td>\n<td>插入公式</td>\n<td>Ctrl + Shift + M</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>行内公式</td>\n<td><code>$公式$</code></td>\n</tr>\n<tr>\n<td>加粗</td>\n<td>Ctrl + B</td>\n<td>下划线</td>\n<td>Ctrl + U</td>\n</tr>\n<tr>\n<td>字体倾斜</td>\n<td>Ctrl + I</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>无序列表</td>\n<td>+ + Space</td>\n<td>有序列表</td>\n<td>1 + . + Space</td>\n</tr>\n<tr>\n<td>降级列表</td>\n<td>Tab</td>\n<td>升级列表</td>\n<td>Shift + Tab</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>创建表格</td>\n<td>Ctrl + T</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"RAFT\"><a href=\"#RAFT\" class=\"headerlink\" title=\"RAFT\"></a>RAFT</h2><p><strong>RAFT: Recurrent All-Pairs Field Transforms for Optical Flow</strong></p>\n<p><strong>2020 ECCV</strong></p>\n<p><strong>创新:</strong></p>\n<p>RAFT maintains and updates a single ﬁxed ﬂow ﬁeld at high resolution. This is diﬀerent from the prevailing coarse-to-ﬁne design in prior work [42,49,22,23,50], where ﬂow is ﬁrst estimated at low resolution and upsam- pled and reﬁned at high resolution. By operating on a single high-resolution ﬂow ﬁeld, RAFT overcomes several limitations of a coarse-to-ﬁne cascade: the diﬃ- culty of recovering from errors at coarse resolutions, the tendency to miss small fast-moving objects, and the many training iterations (often over 1M) typically required for training a multi-stage cascade</p>\n<p>RAFT以高分辨率维护和更新单个固定流场。这不同于之前工作[42,49,22,23,50]中普遍采用的从粗到细的设计，其中首先在低分辨率下估计流量，然后在高分辨率下进行上采样和重新定义。通过在单个高分辨率流场上运行，RAFT克服了粗到细级联的几个限制：难以从粗分辨率的错误中恢复，容易错过快速移动的小对象，以及训练多级级联通常需要的多次训练迭代（通常超过1M）</p>\n<h2 id=\"LiteFlowNet3\"><a href=\"#LiteFlowNet3\" class=\"headerlink\" title=\"LiteFlowNet3\"></a>LiteFlowNet3</h2><p><strong>2020 ECCV</strong></p>\n<p><strong>solve:</strong></p>\n<p>解决从粗到细的光流推断初始化错误问题</p>\n"},{"title":"bash","top":false,"cover":false,"toc":true,"mathjax":false,"date":"2022-03-06T04:16:37.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n# bash 执行方式\n脚本执行方式：\n1. 直接输入文件及其路径（绝对路径或者相对路径）\n```bash\n./haha.sh   \n/home/hp/桌面/haha.sh\n```\n2. 也可以将脚本文件作为参数传给Shell程序，使其解释并执行脚本文件的·内容\n```sh\nbash ./haha.sh\n```\n3. 还可以使用source命令执行文件\n```sh\nsource ./haha.sh\n```\n如果文件没权限执行则添加权限\n```sh\nsudo chmod +x ./haha.sh\n```\n**注意变量赋值等号( = )之间不能有空格**\n```sh\nn=10         #True\nn = 10       #False\n```\nShell是一种弱类型的编程语言。(类似Python)\n\n## 重定向\n\n与 Unix 主题“任何东西都是一个文件”保持一致，程序，比方说 ls，实际上把他们的运行\n结果输送到一个叫做标准输出的特殊文件（经常用 stdout 表示），而它们的状态信息则送到另\n一个叫做标准错误的文件（stderr）。默认情况下，标准输出和标准错误都连接到屏幕，而不是\n保存到磁盘文件。除此之外，许多程序从一个叫做标准输入（stdin）的设备得到输入，默认情\n况下，标准输入连接到键盘。\n\nI/O 重定向允许我们更改输出地点和输入来源。一般地，输出送到屏幕，输入来自键盘，但\n是通过 I/O 重定向，我们可以做出改变。\n\nI/O 重定向允许我们来重定义标准输出的地点。我们使用 “>” 重定向符后接文件名将标准输\n出重定向到除屏幕以外的另一个文件。为什么我们要这样做呢？因为有时候把一个命令的运\n行结果存储到一个文件很有用处。例如，我们可以告诉 shell 把 ls 命令的运行结果输送到文件\nls-output.txt 中去，由文件代替屏幕。\n\n```bash\nls -l /usr/bin > ls-output.txt\n```\n\n这里，我们创建了一个长长的目录/usr/bin 列表，并且输送程序运行结果到文件 ls-output.txt\n中。\n\n程序不把它的错误信息输送到标准输出。反而，像许多写得不错的 Unix 程序，ls 把错误信息送到标准错误。\n\n\n\n## 命令的组合符`&&`和`||`\n\n除了分号，Bash 还提供两个命令组合符`&&`和`||`，允许更好地控制多个命令之间的继发关系。\n\n```sh\nCommand1 && Command2\n```\n\n上面命令的意思是，如果`Command1`命令运行成功，则继续运行`Command2`命令。\n\n```sh\nCommand1 || Command2\n```\n\n上面命令的意思是，如果`Command1`命令运行失败，则继续运行`Command2`命令。\n\n## 快捷键\n\nBash 提供很多快捷键，可以大大方便操作。下面是一些最常用的快捷键，完整的介绍参见《行操作》一章。\n\n- `Ctrl + L`：清除屏幕并将当前行移到页面顶部。\n- `Ctrl + C`：中止当前正在执行的命令。\n- `Shift + PageUp`：向上滚动。\n- `Shift + PageDown`：向下滚动。\n- `Ctrl + U`：从光标位置删除到行首。\n- `Ctrl + K`：从光标位置删除到行尾。\n- `Ctrl + D`：关闭 Shell 会话。\n- `↑`，`↓`：浏览已执行命令的历史记录\n- ctrl+A 跳到光标所在行的行首\n- ctrl+E 跳到光标所在行的行尾\n- ctrl+W 删除光标前的单个域\n\n### Bash 只有一种数据类型，就是字符串。不管用户输入什么数据，Bash 都视为字符串。\n\n\n\n## 变量声明的语法如下。\n\n```sh\nvariable=value\n```\n\n上面命令中，等号左边是变量名，右边是变量。注意，等号两边不能有空格。\n\n如果变量的值包含空格，则必须将值放在引号中。\n\n```sh\nmyvar=\"hello world\"\n```\n\n\n\n## Shebang 行 \n\n脚本的第一行通常是指定解释器，即这个脚本必须通过什么解释器执行。这一行以`#!`字符开头，这个字符称为 Shebang，所以这一行就叫做 Shebang 行。\n\n`#!`后面就是脚本解释器的位置，Bash 脚本的解释器一般是`/bin/sh`或`/bin/bash`。\n\n```sh\n#!/bin/sh\n# 或者\n#!/bin/bash\n```\n\n`#!`与脚本解释器之间有没有空格，都是可以的。\n\n如果 Bash 解释器不放在目录`/bin`，脚本就无法执行了。为了保险，可以写成下面这样。\n\n```sh\n#!/usr/bin/env bash\n```\n\n上面命令使用`env`命令（这个命令总是在`/usr/bin`目录），返回 Bash 可执行文件的位置。`env`命令的详细介绍，请看后文。\n\nShebang 行不是必需的，但是建议加上这行。如果缺少该行，就需要手动将脚本传给解释器。举例来说，脚本是`script.sh`，有 Shebang 行的时候，可以直接调用执行。\n\n```sh\n$ ./script.sh\n```\n\n上面例子中，`script.sh`是脚本文件名。脚本通常使用`.sh`后缀名，不过这不是必需的。\n\n如果没有 Shebang 行，就只能手动将脚本传给解释器来执行。\n\n```sh\n$ /bin/sh ./script.sh\n# 或者\n$ bash ./script.sh\n```\n\n```sh\n# 给所有用户执行权限\n$ chmod +x script.sh\n\n# 给所有用户读权限和执行权限\n$ chmod +rx script.sh\n# 或者\n$ chmod 755 script.sh\n```\n\n脚本的权限通常设为`755`（拥有者有所有权限，其他人有读和执行权限）或者`700`（只有拥有者可以执行）。\n\n建议在主目录新建一个`~/bin`子目录，专门存放可执行脚本，然后把`~/bin`加入`$PATH`。\n\n```sh\nexport PATH=$PATH:~/bin\n# “ ：“(冒号)是 PATH 的分隔符（上面相当于赋值操作了）\n```\n\n上面命令改变环境变量`$PATH`，将`~/bin`添加到`$PATH`的末尾。可以将这一行加到`~/.bashrc`文件里面，然后重新加载一次`.bashrc`，这个配置就可以生效了。\n\n```sh\n$ source ~/.bashrc\n```\n\n以后不管在什么目录，直接输入脚本文件名，脚本就会执行。\n\n```sh\n$ script.sh\n```\n\n上面命令没有指定脚本路径，因为`script.sh`在`$PATH`指定的目录中。\n\n## source 命令\n\n`source`命令用于执行一个脚本，通常用于重新加载一个配置文件。\n\n```sh\n$ source .bashrc\n```\n\n`source`命令最大的特点是在当前 Shell 执行脚本，不像直接执行脚本时，会新建一个子 Shell。所以，`source`命令执行脚本时，不需要`export`变量。\n\n```sh\n#!/bin/bash\n# test.sh\necho $foo\n```\n\n上面脚本输出`$foo`变量的值。\n\n```sh\n# 当前 Shell 新建一个变量 foo\n$ foo=1\n\n# 打印输出 1\n$ source test.sh\n1\n\n# 打印输出空字符串\n$ bash test.sh\n```\n\n上面例子中，当前 Shell 的变量`foo`并没有`export`，所以直接执行无法读取，但是`source`执行可以读取。\n\n`source`命令的另一个用途，是在脚本内部加载外部库。\n\n```sh\n#!/bin/bash\n\nsource ./lib.sh\n\nfunction_from_lib\n```\n\n上面脚本在内部使用`source`命令加载了一个外部库，然后就可以在脚本里面，使用这个外部库定义的函数。\n\n`source`有一个简写形式，可以使用一个点（`.`）来表示。\n\n```sh\n$ . .bashrc\n```\n","source":"_posts/bash.md","raw":"---\ntitle: bash\ntop: false\ncover: false\ntoc: true\nmathjax: false\ndate: 2022-03-06 12:16:37\npassword:\nsummary:\ntags: bash \ncategories:\nkeywords:\ndescription:\n---\n\n# bash 执行方式\n脚本执行方式：\n1. 直接输入文件及其路径（绝对路径或者相对路径）\n```bash\n./haha.sh   \n/home/hp/桌面/haha.sh\n```\n2. 也可以将脚本文件作为参数传给Shell程序，使其解释并执行脚本文件的·内容\n```sh\nbash ./haha.sh\n```\n3. 还可以使用source命令执行文件\n```sh\nsource ./haha.sh\n```\n如果文件没权限执行则添加权限\n```sh\nsudo chmod +x ./haha.sh\n```\n**注意变量赋值等号( = )之间不能有空格**\n```sh\nn=10         #True\nn = 10       #False\n```\nShell是一种弱类型的编程语言。(类似Python)\n\n## 重定向\n\n与 Unix 主题“任何东西都是一个文件”保持一致，程序，比方说 ls，实际上把他们的运行\n结果输送到一个叫做标准输出的特殊文件（经常用 stdout 表示），而它们的状态信息则送到另\n一个叫做标准错误的文件（stderr）。默认情况下，标准输出和标准错误都连接到屏幕，而不是\n保存到磁盘文件。除此之外，许多程序从一个叫做标准输入（stdin）的设备得到输入，默认情\n况下，标准输入连接到键盘。\n\nI/O 重定向允许我们更改输出地点和输入来源。一般地，输出送到屏幕，输入来自键盘，但\n是通过 I/O 重定向，我们可以做出改变。\n\nI/O 重定向允许我们来重定义标准输出的地点。我们使用 “>” 重定向符后接文件名将标准输\n出重定向到除屏幕以外的另一个文件。为什么我们要这样做呢？因为有时候把一个命令的运\n行结果存储到一个文件很有用处。例如，我们可以告诉 shell 把 ls 命令的运行结果输送到文件\nls-output.txt 中去，由文件代替屏幕。\n\n```bash\nls -l /usr/bin > ls-output.txt\n```\n\n这里，我们创建了一个长长的目录/usr/bin 列表，并且输送程序运行结果到文件 ls-output.txt\n中。\n\n程序不把它的错误信息输送到标准输出。反而，像许多写得不错的 Unix 程序，ls 把错误信息送到标准错误。\n\n\n\n## 命令的组合符`&&`和`||`\n\n除了分号，Bash 还提供两个命令组合符`&&`和`||`，允许更好地控制多个命令之间的继发关系。\n\n```sh\nCommand1 && Command2\n```\n\n上面命令的意思是，如果`Command1`命令运行成功，则继续运行`Command2`命令。\n\n```sh\nCommand1 || Command2\n```\n\n上面命令的意思是，如果`Command1`命令运行失败，则继续运行`Command2`命令。\n\n## 快捷键\n\nBash 提供很多快捷键，可以大大方便操作。下面是一些最常用的快捷键，完整的介绍参见《行操作》一章。\n\n- `Ctrl + L`：清除屏幕并将当前行移到页面顶部。\n- `Ctrl + C`：中止当前正在执行的命令。\n- `Shift + PageUp`：向上滚动。\n- `Shift + PageDown`：向下滚动。\n- `Ctrl + U`：从光标位置删除到行首。\n- `Ctrl + K`：从光标位置删除到行尾。\n- `Ctrl + D`：关闭 Shell 会话。\n- `↑`，`↓`：浏览已执行命令的历史记录\n- ctrl+A 跳到光标所在行的行首\n- ctrl+E 跳到光标所在行的行尾\n- ctrl+W 删除光标前的单个域\n\n### Bash 只有一种数据类型，就是字符串。不管用户输入什么数据，Bash 都视为字符串。\n\n\n\n## 变量声明的语法如下。\n\n```sh\nvariable=value\n```\n\n上面命令中，等号左边是变量名，右边是变量。注意，等号两边不能有空格。\n\n如果变量的值包含空格，则必须将值放在引号中。\n\n```sh\nmyvar=\"hello world\"\n```\n\n\n\n## Shebang 行 \n\n脚本的第一行通常是指定解释器，即这个脚本必须通过什么解释器执行。这一行以`#!`字符开头，这个字符称为 Shebang，所以这一行就叫做 Shebang 行。\n\n`#!`后面就是脚本解释器的位置，Bash 脚本的解释器一般是`/bin/sh`或`/bin/bash`。\n\n```sh\n#!/bin/sh\n# 或者\n#!/bin/bash\n```\n\n`#!`与脚本解释器之间有没有空格，都是可以的。\n\n如果 Bash 解释器不放在目录`/bin`，脚本就无法执行了。为了保险，可以写成下面这样。\n\n```sh\n#!/usr/bin/env bash\n```\n\n上面命令使用`env`命令（这个命令总是在`/usr/bin`目录），返回 Bash 可执行文件的位置。`env`命令的详细介绍，请看后文。\n\nShebang 行不是必需的，但是建议加上这行。如果缺少该行，就需要手动将脚本传给解释器。举例来说，脚本是`script.sh`，有 Shebang 行的时候，可以直接调用执行。\n\n```sh\n$ ./script.sh\n```\n\n上面例子中，`script.sh`是脚本文件名。脚本通常使用`.sh`后缀名，不过这不是必需的。\n\n如果没有 Shebang 行，就只能手动将脚本传给解释器来执行。\n\n```sh\n$ /bin/sh ./script.sh\n# 或者\n$ bash ./script.sh\n```\n\n```sh\n# 给所有用户执行权限\n$ chmod +x script.sh\n\n# 给所有用户读权限和执行权限\n$ chmod +rx script.sh\n# 或者\n$ chmod 755 script.sh\n```\n\n脚本的权限通常设为`755`（拥有者有所有权限，其他人有读和执行权限）或者`700`（只有拥有者可以执行）。\n\n建议在主目录新建一个`~/bin`子目录，专门存放可执行脚本，然后把`~/bin`加入`$PATH`。\n\n```sh\nexport PATH=$PATH:~/bin\n# “ ：“(冒号)是 PATH 的分隔符（上面相当于赋值操作了）\n```\n\n上面命令改变环境变量`$PATH`，将`~/bin`添加到`$PATH`的末尾。可以将这一行加到`~/.bashrc`文件里面，然后重新加载一次`.bashrc`，这个配置就可以生效了。\n\n```sh\n$ source ~/.bashrc\n```\n\n以后不管在什么目录，直接输入脚本文件名，脚本就会执行。\n\n```sh\n$ script.sh\n```\n\n上面命令没有指定脚本路径，因为`script.sh`在`$PATH`指定的目录中。\n\n## source 命令\n\n`source`命令用于执行一个脚本，通常用于重新加载一个配置文件。\n\n```sh\n$ source .bashrc\n```\n\n`source`命令最大的特点是在当前 Shell 执行脚本，不像直接执行脚本时，会新建一个子 Shell。所以，`source`命令执行脚本时，不需要`export`变量。\n\n```sh\n#!/bin/bash\n# test.sh\necho $foo\n```\n\n上面脚本输出`$foo`变量的值。\n\n```sh\n# 当前 Shell 新建一个变量 foo\n$ foo=1\n\n# 打印输出 1\n$ source test.sh\n1\n\n# 打印输出空字符串\n$ bash test.sh\n```\n\n上面例子中，当前 Shell 的变量`foo`并没有`export`，所以直接执行无法读取，但是`source`执行可以读取。\n\n`source`命令的另一个用途，是在脚本内部加载外部库。\n\n```sh\n#!/bin/bash\n\nsource ./lib.sh\n\nfunction_from_lib\n```\n\n上面脚本在内部使用`source`命令加载了一个外部库，然后就可以在脚本里面，使用这个外部库定义的函数。\n\n`source`有一个简写形式，可以使用一个点（`.`）来表示。\n\n```sh\n$ . .bashrc\n```\n","slug":"bash","published":1,"updated":"2022-03-06T04:25:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0l0zbi90000jctpcn2kagsu","content":"<h1 id=\"bash-执行方式\"><a href=\"#bash-执行方式\" class=\"headerlink\" title=\"bash 执行方式\"></a>bash 执行方式</h1><p>脚本执行方式：</p>\n<ol>\n<li>直接输入文件及其路径（绝对路径或者相对路径）<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">./haha.sh   \n/home/hp/桌面/haha.sh\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>也可以将脚本文件作为参数传给Shell程序，使其解释并执行脚本文件的·内容<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">bash ./haha.sh\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>还可以使用source命令执行文件<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">source ./haha.sh\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n如果文件没权限执行则添加权限<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">sudo chmod +x ./haha.sh\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<p><strong>注意变量赋值等号( &#x3D; )之间不能有空格</strong></p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">n=10         #True\nn = 10       #False\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>Shell是一种弱类型的编程语言。(类似Python)</p>\n<h2 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h2><p>与 Unix 主题“任何东西都是一个文件”保持一致，程序，比方说 ls，实际上把他们的运行<br>结果输送到一个叫做标准输出的特殊文件（经常用 stdout 表示），而它们的状态信息则送到另<br>一个叫做标准错误的文件（stderr）。默认情况下，标准输出和标准错误都连接到屏幕，而不是<br>保存到磁盘文件。除此之外，许多程序从一个叫做标准输入（stdin）的设备得到输入，默认情<br>况下，标准输入连接到键盘。</p>\n<p>I&#x2F;O 重定向允许我们更改输出地点和输入来源。一般地，输出送到屏幕，输入来自键盘，但<br>是通过 I&#x2F;O 重定向，我们可以做出改变。</p>\n<p>I&#x2F;O 重定向允许我们来重定义标准输出的地点。我们使用 “&gt;” 重定向符后接文件名将标准输<br>出重定向到除屏幕以外的另一个文件。为什么我们要这样做呢？因为有时候把一个命令的运<br>行结果存储到一个文件很有用处。例如，我们可以告诉 shell 把 ls 命令的运行结果输送到文件<br>ls-output.txt 中去，由文件代替屏幕。</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> -l /usr/bin <span class=\"token operator\">></span> ls-output.txt\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这里，我们创建了一个长长的目录&#x2F;usr&#x2F;bin 列表，并且输送程序运行结果到文件 ls-output.txt<br>中。</p>\n<p>程序不把它的错误信息输送到标准输出。反而，像许多写得不错的 Unix 程序，ls 把错误信息送到标准错误。</p>\n<h2 id=\"命令的组合符-amp-amp-和\"><a href=\"#命令的组合符-amp-amp-和\" class=\"headerlink\" title=\"命令的组合符&amp;&amp;和||\"></a>命令的组合符<code>&amp;&amp;</code>和<code>||</code></h2><p>除了分号，Bash 还提供两个命令组合符<code>&amp;&amp;</code>和<code>||</code>，允许更好地控制多个命令之间的继发关系。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">Command1 && Command2\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>上面命令的意思是，如果<code>Command1</code>命令运行成功，则继续运行<code>Command2</code>命令。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">Command1 || Command2\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>上面命令的意思是，如果<code>Command1</code>命令运行失败，则继续运行<code>Command2</code>命令。</p>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><p>Bash 提供很多快捷键，可以大大方便操作。下面是一些最常用的快捷键，完整的介绍参见《行操作》一章。</p>\n<ul>\n<li><code>Ctrl + L</code>：清除屏幕并将当前行移到页面顶部。</li>\n<li><code>Ctrl + C</code>：中止当前正在执行的命令。</li>\n<li><code>Shift + PageUp</code>：向上滚动。</li>\n<li><code>Shift + PageDown</code>：向下滚动。</li>\n<li><code>Ctrl + U</code>：从光标位置删除到行首。</li>\n<li><code>Ctrl + K</code>：从光标位置删除到行尾。</li>\n<li><code>Ctrl + D</code>：关闭 Shell 会话。</li>\n<li><code>↑</code>，<code>↓</code>：浏览已执行命令的历史记录</li>\n<li>ctrl+A 跳到光标所在行的行首</li>\n<li>ctrl+E 跳到光标所在行的行尾</li>\n<li>ctrl+W 删除光标前的单个域</li>\n</ul>\n<h3 id=\"Bash-只有一种数据类型，就是字符串。不管用户输入什么数据，Bash-都视为字符串。\"><a href=\"#Bash-只有一种数据类型，就是字符串。不管用户输入什么数据，Bash-都视为字符串。\" class=\"headerlink\" title=\"Bash 只有一种数据类型，就是字符串。不管用户输入什么数据，Bash 都视为字符串。\"></a>Bash 只有一种数据类型，就是字符串。不管用户输入什么数据，Bash 都视为字符串。</h3><h2 id=\"变量声明的语法如下。\"><a href=\"#变量声明的语法如下。\" class=\"headerlink\" title=\"变量声明的语法如下。\"></a>变量声明的语法如下。</h2><pre class=\"line-numbers language-sh\"><code class=\"language-sh\">variable=value\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>上面命令中，等号左边是变量名，右边是变量。注意，等号两边不能有空格。</p>\n<p>如果变量的值包含空格，则必须将值放在引号中。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">myvar=\"hello world\"\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"Shebang-行\"><a href=\"#Shebang-行\" class=\"headerlink\" title=\"Shebang 行\"></a>Shebang 行</h2><p>脚本的第一行通常是指定解释器，即这个脚本必须通过什么解释器执行。这一行以<code>#!</code>字符开头，这个字符称为 Shebang，所以这一行就叫做 Shebang 行。</p>\n<p><code>#!</code>后面就是脚本解释器的位置，Bash 脚本的解释器一般是<code>/bin/sh</code>或<code>/bin/bash</code>。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#!/bin/sh\n# 或者\n#!/bin/bash\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><code>#!</code>与脚本解释器之间有没有空格，都是可以的。</p>\n<p>如果 Bash 解释器不放在目录<code>/bin</code>，脚本就无法执行了。为了保险，可以写成下面这样。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#!/usr/bin/env bash\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>上面命令使用<code>env</code>命令（这个命令总是在<code>/usr/bin</code>目录），返回 Bash 可执行文件的位置。<code>env</code>命令的详细介绍，请看后文。</p>\n<p>Shebang 行不是必需的，但是建议加上这行。如果缺少该行，就需要手动将脚本传给解释器。举例来说，脚本是<code>script.sh</code>，有 Shebang 行的时候，可以直接调用执行。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">$ ./script.sh\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>上面例子中，<code>script.sh</code>是脚本文件名。脚本通常使用<code>.sh</code>后缀名，不过这不是必需的。</p>\n<p>如果没有 Shebang 行，就只能手动将脚本传给解释器来执行。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">$ /bin/sh ./script.sh\n# 或者\n$ bash ./script.sh\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\"># 给所有用户执行权限\n$ chmod +x script.sh\n\n# 给所有用户读权限和执行权限\n$ chmod +rx script.sh\n# 或者\n$ chmod 755 script.sh\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>脚本的权限通常设为<code>755</code>（拥有者有所有权限，其他人有读和执行权限）或者<code>700</code>（只有拥有者可以执行）。</p>\n<p>建议在主目录新建一个<code>~/bin</code>子目录，专门存放可执行脚本，然后把<code>~/bin</code>加入<code>$PATH</code>。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">export PATH=$PATH:~/bin\n# “ ：“(冒号)是 PATH 的分隔符（上面相当于赋值操作了）\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>上面命令改变环境变量<code>$PATH</code>，将<code>~/bin</code>添加到<code>$PATH</code>的末尾。可以将这一行加到<code>~/.bashrc</code>文件里面，然后重新加载一次<code>.bashrc</code>，这个配置就可以生效了。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">$ source ~/.bashrc\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>以后不管在什么目录，直接输入脚本文件名，脚本就会执行。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">$ script.sh\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>上面命令没有指定脚本路径，因为<code>script.sh</code>在<code>$PATH</code>指定的目录中。</p>\n<h2 id=\"source-命令\"><a href=\"#source-命令\" class=\"headerlink\" title=\"source 命令\"></a>source 命令</h2><p><code>source</code>命令用于执行一个脚本，通常用于重新加载一个配置文件。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">$ source .bashrc\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>source</code>命令最大的特点是在当前 Shell 执行脚本，不像直接执行脚本时，会新建一个子 Shell。所以，<code>source</code>命令执行脚本时，不需要<code>export</code>变量。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#!/bin/bash\n# test.sh\necho $foo\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>上面脚本输出<code>$foo</code>变量的值。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\"># 当前 Shell 新建一个变量 foo\n$ foo=1\n\n# 打印输出 1\n$ source test.sh\n1\n\n# 打印输出空字符串\n$ bash test.sh\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面例子中，当前 Shell 的变量<code>foo</code>并没有<code>export</code>，所以直接执行无法读取，但是<code>source</code>执行可以读取。</p>\n<p><code>source</code>命令的另一个用途，是在脚本内部加载外部库。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#!/bin/bash\n\nsource ./lib.sh\n\nfunction_from_lib\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面脚本在内部使用<code>source</code>命令加载了一个外部库，然后就可以在脚本里面，使用这个外部库定义的函数。</p>\n<p><code>source</code>有一个简写形式，可以使用一个点（<code>.</code>）来表示。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">$ . .bashrc\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<h1 id=\"bash-执行方式\"><a href=\"#bash-执行方式\" class=\"headerlink\" title=\"bash 执行方式\"></a>bash 执行方式</h1><p>脚本执行方式：</p>\n<ol>\n<li>直接输入文件及其路径（绝对路径或者相对路径）<pre><code class=\"bash\">./haha.sh   \n/home/hp/桌面/haha.sh\n</code></pre>\n</li>\n<li>也可以将脚本文件作为参数传给Shell程序，使其解释并执行脚本文件的·内容<pre><code class=\"sh\">bash ./haha.sh\n</code></pre>\n</li>\n<li>还可以使用source命令执行文件<pre><code class=\"sh\">source ./haha.sh\n</code></pre>\n如果文件没权限执行则添加权限<pre><code class=\"sh\">sudo chmod +x ./haha.sh\n</code></pre>\n</li>\n</ol>\n<p><strong>注意变量赋值等号( &#x3D; )之间不能有空格</strong></p>\n<pre><code class=\"sh\">n=10         #True\nn = 10       #False\n</code></pre>\n<p>Shell是一种弱类型的编程语言。(类似Python)</p>\n<h2 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h2><p>与 Unix 主题“任何东西都是一个文件”保持一致，程序，比方说 ls，实际上把他们的运行<br>结果输送到一个叫做标准输出的特殊文件（经常用 stdout 表示），而它们的状态信息则送到另<br>一个叫做标准错误的文件（stderr）。默认情况下，标准输出和标准错误都连接到屏幕，而不是<br>保存到磁盘文件。除此之外，许多程序从一个叫做标准输入（stdin）的设备得到输入，默认情<br>况下，标准输入连接到键盘。</p>\n<p>I&#x2F;O 重定向允许我们更改输出地点和输入来源。一般地，输出送到屏幕，输入来自键盘，但<br>是通过 I&#x2F;O 重定向，我们可以做出改变。</p>\n<p>I&#x2F;O 重定向允许我们来重定义标准输出的地点。我们使用 “&gt;” 重定向符后接文件名将标准输<br>出重定向到除屏幕以外的另一个文件。为什么我们要这样做呢？因为有时候把一个命令的运<br>行结果存储到一个文件很有用处。例如，我们可以告诉 shell 把 ls 命令的运行结果输送到文件<br>ls-output.txt 中去，由文件代替屏幕。</p>\n<pre><code class=\"bash\">ls -l /usr/bin &gt; ls-output.txt\n</code></pre>\n<p>这里，我们创建了一个长长的目录&#x2F;usr&#x2F;bin 列表，并且输送程序运行结果到文件 ls-output.txt<br>中。</p>\n<p>程序不把它的错误信息输送到标准输出。反而，像许多写得不错的 Unix 程序，ls 把错误信息送到标准错误。</p>\n<h2 id=\"命令的组合符-amp-amp-和\"><a href=\"#命令的组合符-amp-amp-和\" class=\"headerlink\" title=\"命令的组合符&amp;&amp;和||\"></a>命令的组合符<code>&amp;&amp;</code>和<code>||</code></h2><p>除了分号，Bash 还提供两个命令组合符<code>&amp;&amp;</code>和<code>||</code>，允许更好地控制多个命令之间的继发关系。</p>\n<pre><code class=\"sh\">Command1 &amp;&amp; Command2\n</code></pre>\n<p>上面命令的意思是，如果<code>Command1</code>命令运行成功，则继续运行<code>Command2</code>命令。</p>\n<pre><code class=\"sh\">Command1 || Command2\n</code></pre>\n<p>上面命令的意思是，如果<code>Command1</code>命令运行失败，则继续运行<code>Command2</code>命令。</p>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><p>Bash 提供很多快捷键，可以大大方便操作。下面是一些最常用的快捷键，完整的介绍参见《行操作》一章。</p>\n<ul>\n<li><code>Ctrl + L</code>：清除屏幕并将当前行移到页面顶部。</li>\n<li><code>Ctrl + C</code>：中止当前正在执行的命令。</li>\n<li><code>Shift + PageUp</code>：向上滚动。</li>\n<li><code>Shift + PageDown</code>：向下滚动。</li>\n<li><code>Ctrl + U</code>：从光标位置删除到行首。</li>\n<li><code>Ctrl + K</code>：从光标位置删除到行尾。</li>\n<li><code>Ctrl + D</code>：关闭 Shell 会话。</li>\n<li><code>↑</code>，<code>↓</code>：浏览已执行命令的历史记录</li>\n<li>ctrl+A 跳到光标所在行的行首</li>\n<li>ctrl+E 跳到光标所在行的行尾</li>\n<li>ctrl+W 删除光标前的单个域</li>\n</ul>\n<h3 id=\"Bash-只有一种数据类型，就是字符串。不管用户输入什么数据，Bash-都视为字符串。\"><a href=\"#Bash-只有一种数据类型，就是字符串。不管用户输入什么数据，Bash-都视为字符串。\" class=\"headerlink\" title=\"Bash 只有一种数据类型，就是字符串。不管用户输入什么数据，Bash 都视为字符串。\"></a>Bash 只有一种数据类型，就是字符串。不管用户输入什么数据，Bash 都视为字符串。</h3><h2 id=\"变量声明的语法如下。\"><a href=\"#变量声明的语法如下。\" class=\"headerlink\" title=\"变量声明的语法如下。\"></a>变量声明的语法如下。</h2><pre><code class=\"sh\">variable=value\n</code></pre>\n<p>上面命令中，等号左边是变量名，右边是变量。注意，等号两边不能有空格。</p>\n<p>如果变量的值包含空格，则必须将值放在引号中。</p>\n<pre><code class=\"sh\">myvar=&quot;hello world&quot;\n</code></pre>\n<h2 id=\"Shebang-行\"><a href=\"#Shebang-行\" class=\"headerlink\" title=\"Shebang 行\"></a>Shebang 行</h2><p>脚本的第一行通常是指定解释器，即这个脚本必须通过什么解释器执行。这一行以<code>#!</code>字符开头，这个字符称为 Shebang，所以这一行就叫做 Shebang 行。</p>\n<p><code>#!</code>后面就是脚本解释器的位置，Bash 脚本的解释器一般是<code>/bin/sh</code>或<code>/bin/bash</code>。</p>\n<pre><code class=\"sh\">#!/bin/sh\n# 或者\n#!/bin/bash\n</code></pre>\n<p><code>#!</code>与脚本解释器之间有没有空格，都是可以的。</p>\n<p>如果 Bash 解释器不放在目录<code>/bin</code>，脚本就无法执行了。为了保险，可以写成下面这样。</p>\n<pre><code class=\"sh\">#!/usr/bin/env bash\n</code></pre>\n<p>上面命令使用<code>env</code>命令（这个命令总是在<code>/usr/bin</code>目录），返回 Bash 可执行文件的位置。<code>env</code>命令的详细介绍，请看后文。</p>\n<p>Shebang 行不是必需的，但是建议加上这行。如果缺少该行，就需要手动将脚本传给解释器。举例来说，脚本是<code>script.sh</code>，有 Shebang 行的时候，可以直接调用执行。</p>\n<pre><code class=\"sh\">$ ./script.sh\n</code></pre>\n<p>上面例子中，<code>script.sh</code>是脚本文件名。脚本通常使用<code>.sh</code>后缀名，不过这不是必需的。</p>\n<p>如果没有 Shebang 行，就只能手动将脚本传给解释器来执行。</p>\n<pre><code class=\"sh\">$ /bin/sh ./script.sh\n# 或者\n$ bash ./script.sh\n</code></pre>\n<pre><code class=\"sh\"># 给所有用户执行权限\n$ chmod +x script.sh\n\n# 给所有用户读权限和执行权限\n$ chmod +rx script.sh\n# 或者\n$ chmod 755 script.sh\n</code></pre>\n<p>脚本的权限通常设为<code>755</code>（拥有者有所有权限，其他人有读和执行权限）或者<code>700</code>（只有拥有者可以执行）。</p>\n<p>建议在主目录新建一个<code>~/bin</code>子目录，专门存放可执行脚本，然后把<code>~/bin</code>加入<code>$PATH</code>。</p>\n<pre><code class=\"sh\">export PATH=$PATH:~/bin\n# “ ：“(冒号)是 PATH 的分隔符（上面相当于赋值操作了）\n</code></pre>\n<p>上面命令改变环境变量<code>$PATH</code>，将<code>~/bin</code>添加到<code>$PATH</code>的末尾。可以将这一行加到<code>~/.bashrc</code>文件里面，然后重新加载一次<code>.bashrc</code>，这个配置就可以生效了。</p>\n<pre><code class=\"sh\">$ source ~/.bashrc\n</code></pre>\n<p>以后不管在什么目录，直接输入脚本文件名，脚本就会执行。</p>\n<pre><code class=\"sh\">$ script.sh\n</code></pre>\n<p>上面命令没有指定脚本路径，因为<code>script.sh</code>在<code>$PATH</code>指定的目录中。</p>\n<h2 id=\"source-命令\"><a href=\"#source-命令\" class=\"headerlink\" title=\"source 命令\"></a>source 命令</h2><p><code>source</code>命令用于执行一个脚本，通常用于重新加载一个配置文件。</p>\n<pre><code class=\"sh\">$ source .bashrc\n</code></pre>\n<p><code>source</code>命令最大的特点是在当前 Shell 执行脚本，不像直接执行脚本时，会新建一个子 Shell。所以，<code>source</code>命令执行脚本时，不需要<code>export</code>变量。</p>\n<pre><code class=\"sh\">#!/bin/bash\n# test.sh\necho $foo\n</code></pre>\n<p>上面脚本输出<code>$foo</code>变量的值。</p>\n<pre><code class=\"sh\"># 当前 Shell 新建一个变量 foo\n$ foo=1\n\n# 打印输出 1\n$ source test.sh\n1\n\n# 打印输出空字符串\n$ bash test.sh\n</code></pre>\n<p>上面例子中，当前 Shell 的变量<code>foo</code>并没有<code>export</code>，所以直接执行无法读取，但是<code>source</code>执行可以读取。</p>\n<p><code>source</code>命令的另一个用途，是在脚本内部加载外部库。</p>\n<pre><code class=\"sh\">#!/bin/bash\n\nsource ./lib.sh\n\nfunction_from_lib\n</code></pre>\n<p>上面脚本在内部使用<code>source</code>命令加载了一个外部库，然后就可以在脚本里面，使用这个外部库定义的函数。</p>\n<p><code>source</code>有一个简写形式，可以使用一个点（<code>.</code>）来表示。</p>\n<pre><code class=\"sh\">$ . .bashrc\n</code></pre>\n"},{"title":"git","top":false,"cover":false,"toc":true,"mathjax":false,"date":"2022-03-06T04:27:04.000Z","password":null,"summary":null,"keywords":"git","description":"git介绍","_content":"\n# Git 和 GitHub 详解\n\n## （一）Git 基础\n\n### Git 下载和安装\n\n- 下载地址： https://git-scm.com/downloads\n- 使用默认值安装\n- 资源管理器内单击鼠标右键选择 `Git Bash Here`\n- 输入`git --version` 检查是否安装成功\n\n### Git 基本工作流程\n\n> 主要涉及到四个关键点：\n>\n> 1. 工作区：本地电脑存放项目文件的地方，比如 learnGitProject 文件夹；\n>2. 暂存区（Index/Stage）：在使用 git 管理项目文件的时候，其本地的项目文件会多出一个.git 的文件夹，将这个.git 文件夹称之为版本库。其中.git 文件夹中包含了两个部分，一个是暂存区（Index 或者 Stage）,顾名思义就是暂时存放文件的地方，通常使用 add 命令将工作区的文件添加到暂存区里；\n> 3. 本地仓库：.git 文件夹里还包括 git 自动创建的 master 分支，并且将 HEAD 指针指向 master 分支。使用 commit 命令可以将暂存区中的文件添加到本地仓库中；\n> 4. 远程仓库：不是在本地仓库中，项目代码在远程 git 服务器上，比如项目放在 github 上，就是一个远程仓库，通常使用 clone 命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；\n> \n> \n>\n> 因此，经过这样的分析，git 命令可以分为这样的逻辑进行理解和记忆：\n>\n> 1. git 管理配置的命令；\n>\n>    **几个核心存储区的交互命令：**\n>\n> 2. 工作区与暂存区的交互；\n>\n> 3. 暂存区与本地仓库（分支）上的交互；\n>\n> 4. 本地仓库与远程仓库的交互。\n>\n> 作者：你听\\_\\_\\_\n>链接：https://juejin.im/post/5ae072906fb9a07a9e4ce596\n> 来源：掘金\n\n| 工作目录          | 暂存区               | git 仓库             | 远程仓库     |\n| ----------------- | -------------------- | -------------------- | ------------ |\n| 被 Git 管理的项目 | 临时存放被修改的文件 | 目录用于存放提交记录 | 远程代码仓库 |\n| `git init`        | `git add`            | `git commit`         | `git push`   |\n\n### Git 使用前的配置命令\n\n在使用前告诉 git 你是谁：\n\n1. 第一次使用 git，配置用户信息\n\n   1. 配置用户名：`git config --global user.name \"your name\"`;\n   2. 配置用户邮箱：`git config --global user.email \"youremail@github.com\"`;\n\n2. > 查询配置信息\n\n   1. 列出当前配置：`git config --list`;\n   2. 列出 repository 配置：`git config --local --list`;\n   3. 列出全局配置：`git config --global --list`;\n   4. 列出系统配置：`git config --system --list`;\n\n3. > 其他配置\n\n   1. 配置解决冲突时使用哪种差异分析工具，比如要使用 vimdiff：`git config --global merge.tool vimdiff`;\n   2. 配置 git 命令输出为彩色的：`git config --global color.ui auto`;\n   3. 配置 git 使用的文本编辑器：`git config --global core.editor vi`;\n\n4. > 注：\n\n   1. 更改-->重复上述命令\n   2. 也可直接修改 `C:\\Users\\用户\\.gitconfig`\n\n### 工作区上的操作命令\n\n#### 提交步骤\n\n1. `git init` 初始化 git 仓库\n\n   > > 新建仓库\n   >\n   > 1. 将工作区中的项目文件使用 git 进行管理，即创建一个新的本地仓库：`git init`；\n   > 2. 从远程 git 仓库复制项目：`git clone `; 克隆项目时如果想定义新的项目名，可以在 clone 命令后指定新的项目名：`git clone git://github.com/wasd/example.git NewName`；\n\n2. `git status` 查看文件状态\n\n   > > 查新信息\n   >\n   > 1. 查询当前工作区所有文件的状态：`git status`;\n   > 2. 比较工作区中当前文件和暂存区之间的差异，也就是修改之后还没有暂存的内容：git diff；指定文件在工作区和暂存区上差异比较：`git diff `;\n\n3. `git add 文件/文件列表` 提交到暂存区\n\n   > > 提交\n   >\n   > 1. 提交工作区所有文件到暂存区：`git add .`\n   > 2. 提交工作区中指定文件到暂存区：`git add ...`;\n   > 3. 提交工作区中某个文件夹中所有文件到暂存区：`git add [dir]`;\n\n4. `git commit -m 提交信息` 向仓库提交代码\n\n   > > 提交文件到版本库\n   >\n   > 1. 将暂存区中的文件提交到本地仓库中，即打上新版本：`git commit -m \"commit_info\"`;\n   > 2. 将所有已经使用 git 管理过的文件暂存后一并提交，跳过 add 到暂存区的过程：`git commit -a -m \"commit_info\"`;\n   > 3. 提交文件时，发现漏掉几个文件，或者注释写错了，可以撤销上一次提交：`git commit --amend`;\n\n5. `git log` 查看提交记录\n\n   > > 查看信息\n   >\n   > 1. 比较暂存区与上一版本的差异：`git diff --cached`;\n   > 2. 指定文件在暂存区和本地仓库的不同：`git diff --cached`;\n   > 3. 查看提交历史：git log；参数`-p`展开每次提交的内容差异，用`-2`显示最近的两次更新，如`git log -p -2`;\n\n#### 撤销\n\n- 用暂存区中的文件覆盖工作目录中的文件：`git checkout -- 文件名` 不加 `-- 文件名`则覆盖全部文件\n\n- 将文件从暂存区中删除：`git rm --cached 文件名`\n\n- 将 git 仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录：` git reset --hard commitID`\n\n- > > 撤销\n  >\n  > 1. 删除工作区文件，并且也从暂存区删除对应文件的记录：`git rm `;\n  > 2. 从暂存区中删除文件，但是工作区依然还有该文件:`git rm --cached `;\n  > 3. 取消暂存区已经暂存的文件：`git reset HEAD ...`;\n  > 4. 撤销上一次对文件的操作：`git checkout --`。要确定上一次对文件的修改不再需要，如果想保留上一次的修改以备以后继续工作，可以使用 stashing 和分支来处理；\n  > 5. 隐藏当前变更，以便能够切换分支：`git stash`；\n  > 6. 查看当前所有的储藏：`git stash list`；\n  > 7. 应用最新的储藏：`git stash apply`，如果想应用更早的储藏：`git stash apply stash@{2}`；重新应用被暂存的变更，需要加上`--index`参数：`git stash apply --index`;\n  > 8. 使用 apply 命令只是应用储藏，而内容仍然还在栈上，需要移除指定的储藏：`git stash drop stash{0}`；如果使用 pop 命令不仅可以重新应用储藏，还可以立刻从堆栈中清除：`git stash pop`;\n  > 9. 在某些情况下，你可能想应用储藏的修改，在进行了一些其他的修改后，又要取消之前所应用储藏的修改。Git 没有提供类似于 stash unapply 的命令，但是可以通过取消该储藏的补丁达到同样的效果：`git stash show -p stash@{0} | git apply -R`；同样的，如果你沒有指定具体的某个储藏，Git 会选择最近的储藏：`git stash show -p | git apply -R`；\n  >\n  > > 更新文件\n  >\n  > 1. 重命名文件，并将已改名文件提交到暂存区：`git mv [file-original] [file-renamed]`;\n\n## （二）Git 进阶\n\n### 分支\n\n生成副本，避免影响开发主线\n\n#### 分支细分\n\n1. 主分支（master）：第一次向 git 仓库提交更新记录时自动产生的一个分支。\n2. 开发分支（develop）：作为开发的分支，基于 master 分支创建。\n3. 功能分支（feature）：作为开发具体功能的分支基于开发分支创建。\n\n#### 分支命令\n\n- `git branch` 查看分支\n- `git branch 分支名称` 创建分支\n- `git checkout 分支名称` 切换分支\n- `git merge 来源分支` 合并分支\n- `git branch -d 分支名称` 删除分支（分支合并后才允许被删除）（-D 大写强制删除）\n  - `git push origin :branch-name` : 远程仓库同步删除掉的分支\n\n注意：\n\n 开发分支文件后要 `commit` 后再切换主分支，否则分支文件会出现在主分支里面。\n\n> > 分支管理\n>\n> 1. 创建分支：`git branch `，如`git branch testing`；\n> 2. 从当前所处的分支切换到其他分支：`git checkout `，如`git checkout testing`；\n> 3. 新建并切换到新建分支上：`git checkout -b `;\n> 4. 删除分支：`git branch -d `；\n> 5. 将当前分支与指定分支进行合并：`git merge `;\n> 6. 显示本地仓库的所有分支：`git branch`;\n> 7. 查看各个分支最后一个提交对象的信息：`git branch -v`;\n> 8. 查看哪些分支已经合并到当前分支：`git branch --merged`;\n> 9. 查看当前哪些分支还没有合并到当前分支：`git branch --no-merged`;\n> 10. 把远程分支合并到当前分支：`git merge /`，如`git merge origin/serverfix`；如果是单线的历史分支不存在任何需要解决的分歧，只是简单的将 HEAD 指针前移，所以这种合并过程可以称为快进（Fast forward），而如果是历史分支是分叉的，会以当前分叉的两个分支作为两个祖先，创建新的提交对象；如果在合并分支时，遇到合并冲突需要人工解决后，再才能提交；\n> 11. 在远程分支的基础上创建新的本地分支`：git checkout -b /`，如`git checkout -b serverfix origin/serverfix`;\n> 12. 从远程分支 checkout 出来的本地分支，称之为跟踪分支。在跟踪分支上向远程分支上推送内容：`git push`。该命令会自动判断应该向远程仓库中的哪个分支推送数据；在跟踪分支上合并远程分支：`git pull`；\n> 13. 将一个分支里提交的改变移到基底分支上重放一遍：`git rebase `，如`git rebase master server`，将特性分支 server 提交的改变在基底分支 master 上重演一遍；使用 rebase 操作最大的好处是像在单个分支上操作的，提交的修改历史也是一根线；如果想把基于一个特性分支上的另一个特性分支变基到其他分支上，可以使用`--onto`操作：`git rebase --onto `，如`git rebase --onto master server client`；使用 rebase 操作应该遵循的原则是：**一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行 rebase 操作**；\n\n### 暂时保存更改\n\ngit 中可以不提交更改，只提取分支上所有改动并储存，让开发人员得到一个干净的副本，临时转向其它工作。复制到“剪切板”，可以“粘贴“到其它分支。\n\n场景：\n\n- 储存临时改动：`git stash`\n- 恢复临时改动：`git stash pop`\n\n### 打标签\n\n> Git 使用的标签有两种类型：**轻量级的（lightweight）和含附注的（annotated）**。轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。\n>\n> 1. 列出现在所有的标签：`git tag`;\n> 2. 使用特定的搜索模式列出符合条件的标签，例如只对 1.4.2 系列的版本感兴趣：`git tag -l \"v1.4.2.*\"`;\n> 3. 创建一个含附注类型的标签，需要加`-a`参数，如`git tag -a v1.4 -m \"my version 1.4\"`;\n> 4. 使用 git show 命令查看相应标签的版本信息，并连同显示打标签时的提交对象：`git show v1.4`;\n> 5. 如果有自己的私钥，可以使用 GPG 来签署标签，只需要在命令中使用`-s`参数：`git tag -s v1.5 -m \"my signed 1.5 tag\"`;\n> 6. 验证已签署的标签：git tag -v ，如`git tag -v v1.5`;\n> 7. 创建一个轻量级标签的话，就直接使用 git tag 命令即可，连`-a`,`-s`以及`-m`选项都不需要，直接给出标签名字即可，如`git tag v1.5`;\n> 8. 将标签推送到远程仓库中：git push origin ，如`git push origin v1.5`；\n> 9. 将本地所有的标签全部推送到远程仓库中：`git push origin --tags`;\n\n## （三）Github\n\n### 注册 Github 账号\n\n略~\n\n### 多人协作开发流程\n\n- A 在自己的计算机中创建本地仓库\n- A 在 GitHub 中创建远程仓库\n- A 将本地仓库推送到远程仓库\n- B 克隆远程仓库到本地进行开发\n- B 将本地仓库开发内容推送到远程仓库\n- A 将远程仓库中的最新内容拉去本地\n\n### 创建远程仓库\n\n![](git_notes/20191115154237.png)\n\n### 推送到远程仓库\n\n1. `git push 远程仓库地址 分支名称`\n\n2. `git push 远程仓库地址别名 分支名称`\n\n3. `git push -u 远程仓库地址别名 分支名称`\n\n   `-u` 记住推送地址和分支，下次只需要输入`git push`\n\n4. `git remote add 远程仓库地址别名 远程仓库地址`\n\n5. 删除别名：`git remote remove 远程仓库地址别名`\n\n6. 第一次提交需要用户名和密码，电脑会记住密码在凭据管理器，第二次就不用了。\n\n7. > ### 本地仓库上的操作\n   >\n   > 1. 查看本地仓库关联的远程仓库：`git remote`；在克隆完每个远程仓库后，远程仓库默认为`origin`;加上`-v`的参数后，会显示远程仓库的`url`地址；\n   > 2. 添加远程仓库，一般会取一个简短的别名：`git remote add [remote-name] [url]`，比如：`git remote add example git://github.com/example/example.git`;\n   > 3. 从远程仓库中抓取本地仓库中没有的更新：`git fetch [remote-name]`，如`git fetch origin`;使用 fetch 只是将远端数据拉到本地仓库，并不自动合并到当前工作分支，只能人工合并。如果设置了某个分支关联到远程仓库的某个分支的话，可以使用`git pull`来拉去远程分支的数据，然后将远端分支自动合并到本地仓库中的当前分支；\n   > 4. 将本地仓库某分支推送到远程仓库上：`git push [remote-name] [branch-name]`，如`git push origin master`；如果想将本地分支推送到远程仓库的不同名分支：`git push :`，如`git push origin serverfix:awesomebranch`;如果想删除远程分支：`git push [romote-name] :`，如`git push origin :serverfix`。这里省略了本地分支，也就相当于将空白内容推送给远程分支，就等于删掉了远程分支。\n   > 5. 查看远程仓库的详细信息：`git remote show origin`；\n   > 6. 修改某个远程仓库在本地的简称：`git remote rename [old-name] [new-name]`，如`git remote rename origin org`；\n   > 7. 移除远程仓库：`git remote rm [remote-name]`；\n\n### 拉取仓库\n\n#### 克隆仓库\n\n- 克隆远程仓库到本地：`git clone 仓库地址`\n\n#### 拉取远程仓库中最新版本\n\n- 拉取远程仓库最新版本到本地：` git pull 远程仓库地址 分支名称`\n\n### 解决冲突\n\n多人开发同一个项目时，如果两个人修改了同一个文件同一个地方\n\n1. ` git pull`\n2. 手动解决冲突\n3. ` git push`\n\n![](git_notes/20191115164339.png)\n\n### 跨团队协作\n\n1. ` fork`到自己的远程仓库\n2. ` clone`到本地进行修改\n3. ` push`到远程仓库\n4. ` pull request`发送给原作者\n5. 原作者查看`commit` 审核\n6. 原作者 ` merge pull request`\n\n### SSH 免密登录\n\n1. 生成密钥：` ssh-keygen`\n\n   密匙储存目录：` C:\\User\\用户\\.ssh`\n\n   公钥名称：` id_rsa.pub`\n\n   私钥名称：` id_rsa`\n\n2. Github 添加公钥\n\n![](git_notes/20191115165957.png)\n\n3. 复制 SSH 地址：\n\n   ![](git_notes/20191115170348.png)\n\n4. 设置 ssh 别名：`$ git remote add origin_ssh SSH地址 `\n\n5. 远程推送：` $ git push origin_ssh master`\n\n6. [ubuntu git 环境搭建以及通过 SSH 连接 Github（免密码）配置](https://segmentfault.com/a/1190000013154540)\n\n### Git 忽略清单\n\n将不需要的文件名字添加到此文件中，执行 git 命令时就会忽略这些文件。\n\n- git 忽略清单文件名称：`.gitignore`\n\n- 将工作目录所有文件添加到缓存区：` git add .`\n\n- 例子：\n\n  ```gitignore\n  # 此为注释 – 将被 Git 忽略\n  # 忽略所有 .a 结尾的文件\n  *.a\n  # 但 lib.a 除外\n  !lib.a\n  # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\n  /TODO\n  # 忽略 build/ 目录下的所有文件\n  build/\n  # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\n  doc/*.txt\n  # 忽略 doc/ 目录下所有扩展名为 txt 的文件\n  doc/**/*.txt\n  ```\n\n### 为仓库添加说明\n\n在仓库根目录添加`readme.md`文件即可\n\n## （四）使用 SourceTree 管理 Git\n\n> https://blog.csdn.net/u012230055/article/details/64125268\n\n### 一 、SourceTree 简介\n\nSourceTree 是 Windows 和 Mac OS X 下免费的 [Git](http://lib.csdn.net/base/git) 和 Hg 客户端，拥有可视化界面，容易上手操作。同时它也是 Mercurial 和 Subversion[版本控制](http://lib.csdn.net/base/git)系统工具。支持创建、提交、clone、push、pull 和 merge 等操作。\n\n### 二、下载安装 SourceTree 步骤\n\n1. 下载地址：https://www.sourcetreeapp.com/，该版本是中文的，下载完成后可以进行安装。\n\n2. 点击“install”，安装完成后，打开 sourcetree，点击“user an existing account”\n\n3. 注意：使用谷歌帐号登录即可，前提是你必须可以上谷歌才可以。\n\n4. 直接点击“跳过初始设置”即可。\n\n5. 登录注册成功后，弹出设置 puttykey 的界面，点击“取消”即可。\n\n6. 点击“取消”按钮，弹出如下提示框：\n   ![这里写图片描述](https://img-blog.csdn.net/20170320145556338?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n   此时进入到 sourcetree 的主界面，现在就可以使用 sourcetree 啦。\n\n### 三、集成文件对比插件\n\n安装对比插件\n\nSourcetree 中集成 Beyond Compare 4，当文件冲突时可以很好的解决冲突。安装过程很简单，这里不再详述。\n\nSourcetree 中配置 Beyond Compare 4\n\n菜单栏，“工具”——“选项”，如图所示：\n![这里写图片描述](https://img-blog.csdn.net/20170320145615677?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n选择“比较”选项卡，然后将红色方框处的内容修改为如图所示：\n![这里写图片描述](https://img-blog.csdn.net/20170320145628604?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n### 四、SourceTree 基本使用\n\n#### （1）克隆\n\n点击克隆按钮，克隆项目：\n既可以是本地已有的 git 项目，也可以是远程目录中的项目，\n![这里写图片描述](https://img-blog.csdn.net/20170320145642692?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 本地存在的 git 项目，\n 获取项目克隆地址，点击克隆按钮，如图所示：\n![这里写图片描述](https://img-blog.csdn.net/20170320145732677?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 1、克隆项目的路径\n 2、克隆项目存放的位置\n 3、如果要下载特定的分支，可以按分支进行下载\n\n#### （2）配置忽略文件\n\n 利用.gitignore 过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。\n .gitignore 文件只对还没有加入版本管理的文件起作用，如果之前已经用 git 把这些文件纳入了版本库，就不起作用了\n 使用 sourcetree 添加忽略文件的方法：\n 正常情况下，管理员创建项目后需要直接将忽略文件创建好。创建方法如图：\n![这里写图片描述](https://img-blog.csdn.net/20170320150016000?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n按照如上步骤操作即可编辑冲突文件。\n冲突文件规则：\n忽略文件夹（如：bin、obj）：\nobj/\nbin/\n某目录下的所有.txt 文件，\nobj/\\*.txt\n开发的过程中可能遇到一些忽略文件中未添加的文件，此时需要开发者自行添加忽略文件，添加方法如下：\n之前已经介绍过未进行版本控制的或者受版本控制的文件，在 sourcetree 的“文件状态” 标签中查找，如图所示：\n![这里写图片描述](https://img-blog.csdn.net/20170320150046235?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n鼠标右键要忽略的文件，点击“忽略”，选择忽略的模式，即可将文件进行忽略，如图所示：\n![这里写图片描述](https://img-blog.csdn.net/20170320150104001?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n#### （3）tag 使用方法\n\n 打 tag 的目的是在代码的主要节点处有个标记，方便下次修改代码时可以准确的找到想要找的代码。而无需看着日志文件逐一回忆要找的代码位置。\n![这里写图片描述](https://img-blog.csdn.net/20170320150324493?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n#### （4）分支管理与使用\n\n 使用 sourcetree 创建和使用分支是很方便的，不像之前使用的 TortoiseGit 只能在当前代码处创建分支，使用 sourcetree 的方便之处：\n 1、可以选择特定的某版本创建分支\n 2、代码检出时可以按照分支进行检出\n 3、分支的添加很简单\n分支添加：\n![这里写图片描述](https://img-blog.csdn.net/20170320150335144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 1、可以在当前的版本下创建分支\n 2、选择指定的提交创建分支\n 3、点击“创建分支”\n分支提交到服务器：\n 在 sourcetree 右侧内容中的分支列表中，选中创建的分支，右键提交，如图所示：\n![这里写图片描述](https://img-blog.csdn.net/20170320150351024?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n分支合并：\n1、分支合并功能和分支添加功能类似，这里不再详述，需要注意的是首先要切换到被合并的分支上，再进行合并操作。\n2、分支合并时，可以选择具体的某提交进行合并，同时主分支可以合并到子分支；子分支可以合并到主分支；子分支之间也可以进行合并。\n\n#### （5）GIT 与 SVN 同步\n\n git svn 工具集在当前不得不使用 Subversion 服务器或者开发环境要求使用 Subversion 服务器的时候格外有用。不妨把它看成一个跛脚的 Git，在实际使用中不推荐这样使用 GIT。\n\n#### （6）基本步骤\n\n提交、拉取和推送\n提交：\n项目提交是为了维护本地版本库，如果本地有未提交的内容，则不允许拉取和推送；如图所示区域有内容时，则代表本地未提交的内容：\n![这里写图片描述](https://img-blog.csdn.net/20170320150734479?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 点击 Stage All，填写提交信息既可以将本地内容（暂存区）提交到本地版本库，如图所示：\n![这里写图片描述](https://img-blog.csdn.net/20170320150743869?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 1、将未暂存的文件进行暂存，如果有些文件不需要暂存，则可以进行删除，选中文件，右键“移除”即可。\n 拉取：从远程将代码进行更新，相当于 SVN 的“更新”\n 推送：将代码提交到远程。\n\n#### （7）解决冲突\n\n 简单介绍\n![这里写图片描述](https://img-blog.csdn.net/20170320150800182?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 1、冲突文件的符号为“感叹号”\n 2、选中“冲突文件”，右键——点击”解决冲突“——点击”打开外部合并工具“（备注：才操作时已经安装外部合并工具，同时在 sourcetree 中已经进行配置，详见”集成文件对比插件“）\n\n 冲突界面\n\n 冲突解决界面如下：可以根据需要选择内容显示类型，只”显示更改“，”显示冲突“或者”全部“\n![这里写图片描述](https://img-blog.csdn.net/20170320150910886?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 解决冲突\n\n 方法一：在相关的版本处，选中”冲突行”，合并区默认处于合并位置，鼠标右键，选择最终冲突地方留下的内容，如图：\n![这里写图片描述](https://img-blog.csdn.net/20170320151133515?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 解决冲突之后效果图：\n![这里写图片描述](https://img-blog.csdn.net/20170320151150544?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 1、冲突图标由”感叹号”——“省略号”。\n 2、右侧显示修改后的代码进行查看。\n 3、同时修改的冲突文件有相应的备份，大家可以下载到本地，方便冲突有问题再次修改文件。\n备注：该文件下载之后请将版本库中的该文件删除，不要上传到版本库中。\n 4、修改完冲突之后，需要再次提交，推送。大家养成提交时，提交有效的日志信息，不要将比如：123 之类的信息推送到服务器中。\n 方法二：如果冲突非常少，可以直接在右侧栏中解决冲突，如图所示：\n![这里写图片描述](https://img-blog.csdn.net/20170320151202374?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 1、点击未暂存区域的冲突文件。\n 2、右侧列表中出现冲突的内容。\n 3、选择冲突内容，解决冲突，如图所示：\n![这里写图片描述](https://img-blog.csdn.net/20170320151244766?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 暂存行：表示保留该内容\n 丢弃行：表示删除该内容\n 备注：区分于第一种方式，使用第一种方法解决时，不要点击”未暂存文件”,否则可能无法打开冲突文件\n\n#### （8）版本回退\n\n 原则上，代码推送之前要保证本地的代码可运行，不要将不可运行或者有问题的代码推送到服务器上，如果由于误操作，将代码推送到了远程，想重新修改上传代码，此时，需要将版本进行回退，回 退方法如图：\n![这里写图片描述](https://img-blog.csdn.net/20170320151400612?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 1、切换到日志/历史标签\n 2、选择要恢复到的版本，如图蓝色位置\n 3、鼠标右键，选择“重置当前分支到此次提交”\n 4、选择”重置模式”，如图所示\n![这里写图片描述](https://img-blog.csdn.net/20170320151415795?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 5、弹出框中选择”Yes”\n![这里写图片描述](https://img-blog.csdn.net/20170320151427565?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n#### （9）相关提示信息含义\n\n 冲突信息\n![这里写图片描述](https://img-blog.csdn.net/20170320151439378?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 先更新信息\n![这里写图片描述](https://img-blog.csdn.net/20170320151450207?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n 小窍门：\n![这里写图片描述](https://img-blog.csdn.net/20170320151502061?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n 如果推送时，拉取右上方显示数字，则需要先拉取再推送。\n\n### 五、SourceTree&Git 部分名词解释\n\n**克隆(clone)**：从远程仓库 URL 加载创建一个与远程仓库一样的本地仓库\n**提交(commit)**：将暂存文件上传到本地仓库（我们在 Finder 中对本地仓库做修改后一般都得先提交一次，再推送）\n**检出(checkout)**：切换不同分支\n**添加（add）**：添加文件到缓存区\n**移除（remove）**：移除文件至缓存区\n**暂存(git stash)**：保存工作现场\n**重置(reset)**：回到最近添加(add)/提交(commit)状态\n**合并(merge)**：将多个同名文件合并为一个文件，该文件包含多个同名文件的所有内容，相同内容抵消\n**抓取(fetch)**：从远程仓库获取信息并同步至本地仓库\n**拉取(pull)**：从远程仓库获取信息并同步至本地仓库，并且自动执行合并（merge）操作，即 pull=fetch+merge\n**推送(push)**：将本地仓库同步至远程仓库，一般推送（push）前先拉取（pull）一次，确保一致\n**分支(branch)**：创建/修改/删除分枝\n**标签(tag)**:给项目增添标签\n**工作流(Git Flow)**:团队工作时，每个人创建属于自己的分枝（branch），确定无误后提交到 master 分枝\n**终端(terminal)**:可以输入 git 命令行\n\n## Git 设置，查看，取消代理\n\n```bash\n# 设置代理\ngit config --global http.proxy 'http://127.0.0.1:7890' # 这是设置的默认端口 7890\ngit config --global https.proxy 'http://127.0.0.1:7890'\n# 查看代理\ngit config --global --get http.proxy\ngit config --global --get https.proxy\n# 取消代理\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n\n```\n","source":"_posts/git.md","raw":"---\ntitle: git\ntop: false\ncover: false\ntoc: true\nmathjax: false\ndate: 2022-03-06 12:27:04\npassword:\nsummary:\ntags: git\ncategories:\nkeywords: git\ndescription: git介绍\n---\n\n# Git 和 GitHub 详解\n\n## （一）Git 基础\n\n### Git 下载和安装\n\n- 下载地址： https://git-scm.com/downloads\n- 使用默认值安装\n- 资源管理器内单击鼠标右键选择 `Git Bash Here`\n- 输入`git --version` 检查是否安装成功\n\n### Git 基本工作流程\n\n> 主要涉及到四个关键点：\n>\n> 1. 工作区：本地电脑存放项目文件的地方，比如 learnGitProject 文件夹；\n>2. 暂存区（Index/Stage）：在使用 git 管理项目文件的时候，其本地的项目文件会多出一个.git 的文件夹，将这个.git 文件夹称之为版本库。其中.git 文件夹中包含了两个部分，一个是暂存区（Index 或者 Stage）,顾名思义就是暂时存放文件的地方，通常使用 add 命令将工作区的文件添加到暂存区里；\n> 3. 本地仓库：.git 文件夹里还包括 git 自动创建的 master 分支，并且将 HEAD 指针指向 master 分支。使用 commit 命令可以将暂存区中的文件添加到本地仓库中；\n> 4. 远程仓库：不是在本地仓库中，项目代码在远程 git 服务器上，比如项目放在 github 上，就是一个远程仓库，通常使用 clone 命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；\n> \n> \n>\n> 因此，经过这样的分析，git 命令可以分为这样的逻辑进行理解和记忆：\n>\n> 1. git 管理配置的命令；\n>\n>    **几个核心存储区的交互命令：**\n>\n> 2. 工作区与暂存区的交互；\n>\n> 3. 暂存区与本地仓库（分支）上的交互；\n>\n> 4. 本地仓库与远程仓库的交互。\n>\n> 作者：你听\\_\\_\\_\n>链接：https://juejin.im/post/5ae072906fb9a07a9e4ce596\n> 来源：掘金\n\n| 工作目录          | 暂存区               | git 仓库             | 远程仓库     |\n| ----------------- | -------------------- | -------------------- | ------------ |\n| 被 Git 管理的项目 | 临时存放被修改的文件 | 目录用于存放提交记录 | 远程代码仓库 |\n| `git init`        | `git add`            | `git commit`         | `git push`   |\n\n### Git 使用前的配置命令\n\n在使用前告诉 git 你是谁：\n\n1. 第一次使用 git，配置用户信息\n\n   1. 配置用户名：`git config --global user.name \"your name\"`;\n   2. 配置用户邮箱：`git config --global user.email \"youremail@github.com\"`;\n\n2. > 查询配置信息\n\n   1. 列出当前配置：`git config --list`;\n   2. 列出 repository 配置：`git config --local --list`;\n   3. 列出全局配置：`git config --global --list`;\n   4. 列出系统配置：`git config --system --list`;\n\n3. > 其他配置\n\n   1. 配置解决冲突时使用哪种差异分析工具，比如要使用 vimdiff：`git config --global merge.tool vimdiff`;\n   2. 配置 git 命令输出为彩色的：`git config --global color.ui auto`;\n   3. 配置 git 使用的文本编辑器：`git config --global core.editor vi`;\n\n4. > 注：\n\n   1. 更改-->重复上述命令\n   2. 也可直接修改 `C:\\Users\\用户\\.gitconfig`\n\n### 工作区上的操作命令\n\n#### 提交步骤\n\n1. `git init` 初始化 git 仓库\n\n   > > 新建仓库\n   >\n   > 1. 将工作区中的项目文件使用 git 进行管理，即创建一个新的本地仓库：`git init`；\n   > 2. 从远程 git 仓库复制项目：`git clone `; 克隆项目时如果想定义新的项目名，可以在 clone 命令后指定新的项目名：`git clone git://github.com/wasd/example.git NewName`；\n\n2. `git status` 查看文件状态\n\n   > > 查新信息\n   >\n   > 1. 查询当前工作区所有文件的状态：`git status`;\n   > 2. 比较工作区中当前文件和暂存区之间的差异，也就是修改之后还没有暂存的内容：git diff；指定文件在工作区和暂存区上差异比较：`git diff `;\n\n3. `git add 文件/文件列表` 提交到暂存区\n\n   > > 提交\n   >\n   > 1. 提交工作区所有文件到暂存区：`git add .`\n   > 2. 提交工作区中指定文件到暂存区：`git add ...`;\n   > 3. 提交工作区中某个文件夹中所有文件到暂存区：`git add [dir]`;\n\n4. `git commit -m 提交信息` 向仓库提交代码\n\n   > > 提交文件到版本库\n   >\n   > 1. 将暂存区中的文件提交到本地仓库中，即打上新版本：`git commit -m \"commit_info\"`;\n   > 2. 将所有已经使用 git 管理过的文件暂存后一并提交，跳过 add 到暂存区的过程：`git commit -a -m \"commit_info\"`;\n   > 3. 提交文件时，发现漏掉几个文件，或者注释写错了，可以撤销上一次提交：`git commit --amend`;\n\n5. `git log` 查看提交记录\n\n   > > 查看信息\n   >\n   > 1. 比较暂存区与上一版本的差异：`git diff --cached`;\n   > 2. 指定文件在暂存区和本地仓库的不同：`git diff --cached`;\n   > 3. 查看提交历史：git log；参数`-p`展开每次提交的内容差异，用`-2`显示最近的两次更新，如`git log -p -2`;\n\n#### 撤销\n\n- 用暂存区中的文件覆盖工作目录中的文件：`git checkout -- 文件名` 不加 `-- 文件名`则覆盖全部文件\n\n- 将文件从暂存区中删除：`git rm --cached 文件名`\n\n- 将 git 仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录：` git reset --hard commitID`\n\n- > > 撤销\n  >\n  > 1. 删除工作区文件，并且也从暂存区删除对应文件的记录：`git rm `;\n  > 2. 从暂存区中删除文件，但是工作区依然还有该文件:`git rm --cached `;\n  > 3. 取消暂存区已经暂存的文件：`git reset HEAD ...`;\n  > 4. 撤销上一次对文件的操作：`git checkout --`。要确定上一次对文件的修改不再需要，如果想保留上一次的修改以备以后继续工作，可以使用 stashing 和分支来处理；\n  > 5. 隐藏当前变更，以便能够切换分支：`git stash`；\n  > 6. 查看当前所有的储藏：`git stash list`；\n  > 7. 应用最新的储藏：`git stash apply`，如果想应用更早的储藏：`git stash apply stash@{2}`；重新应用被暂存的变更，需要加上`--index`参数：`git stash apply --index`;\n  > 8. 使用 apply 命令只是应用储藏，而内容仍然还在栈上，需要移除指定的储藏：`git stash drop stash{0}`；如果使用 pop 命令不仅可以重新应用储藏，还可以立刻从堆栈中清除：`git stash pop`;\n  > 9. 在某些情况下，你可能想应用储藏的修改，在进行了一些其他的修改后，又要取消之前所应用储藏的修改。Git 没有提供类似于 stash unapply 的命令，但是可以通过取消该储藏的补丁达到同样的效果：`git stash show -p stash@{0} | git apply -R`；同样的，如果你沒有指定具体的某个储藏，Git 会选择最近的储藏：`git stash show -p | git apply -R`；\n  >\n  > > 更新文件\n  >\n  > 1. 重命名文件，并将已改名文件提交到暂存区：`git mv [file-original] [file-renamed]`;\n\n## （二）Git 进阶\n\n### 分支\n\n生成副本，避免影响开发主线\n\n#### 分支细分\n\n1. 主分支（master）：第一次向 git 仓库提交更新记录时自动产生的一个分支。\n2. 开发分支（develop）：作为开发的分支，基于 master 分支创建。\n3. 功能分支（feature）：作为开发具体功能的分支基于开发分支创建。\n\n#### 分支命令\n\n- `git branch` 查看分支\n- `git branch 分支名称` 创建分支\n- `git checkout 分支名称` 切换分支\n- `git merge 来源分支` 合并分支\n- `git branch -d 分支名称` 删除分支（分支合并后才允许被删除）（-D 大写强制删除）\n  - `git push origin :branch-name` : 远程仓库同步删除掉的分支\n\n注意：\n\n 开发分支文件后要 `commit` 后再切换主分支，否则分支文件会出现在主分支里面。\n\n> > 分支管理\n>\n> 1. 创建分支：`git branch `，如`git branch testing`；\n> 2. 从当前所处的分支切换到其他分支：`git checkout `，如`git checkout testing`；\n> 3. 新建并切换到新建分支上：`git checkout -b `;\n> 4. 删除分支：`git branch -d `；\n> 5. 将当前分支与指定分支进行合并：`git merge `;\n> 6. 显示本地仓库的所有分支：`git branch`;\n> 7. 查看各个分支最后一个提交对象的信息：`git branch -v`;\n> 8. 查看哪些分支已经合并到当前分支：`git branch --merged`;\n> 9. 查看当前哪些分支还没有合并到当前分支：`git branch --no-merged`;\n> 10. 把远程分支合并到当前分支：`git merge /`，如`git merge origin/serverfix`；如果是单线的历史分支不存在任何需要解决的分歧，只是简单的将 HEAD 指针前移，所以这种合并过程可以称为快进（Fast forward），而如果是历史分支是分叉的，会以当前分叉的两个分支作为两个祖先，创建新的提交对象；如果在合并分支时，遇到合并冲突需要人工解决后，再才能提交；\n> 11. 在远程分支的基础上创建新的本地分支`：git checkout -b /`，如`git checkout -b serverfix origin/serverfix`;\n> 12. 从远程分支 checkout 出来的本地分支，称之为跟踪分支。在跟踪分支上向远程分支上推送内容：`git push`。该命令会自动判断应该向远程仓库中的哪个分支推送数据；在跟踪分支上合并远程分支：`git pull`；\n> 13. 将一个分支里提交的改变移到基底分支上重放一遍：`git rebase `，如`git rebase master server`，将特性分支 server 提交的改变在基底分支 master 上重演一遍；使用 rebase 操作最大的好处是像在单个分支上操作的，提交的修改历史也是一根线；如果想把基于一个特性分支上的另一个特性分支变基到其他分支上，可以使用`--onto`操作：`git rebase --onto `，如`git rebase --onto master server client`；使用 rebase 操作应该遵循的原则是：**一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行 rebase 操作**；\n\n### 暂时保存更改\n\ngit 中可以不提交更改，只提取分支上所有改动并储存，让开发人员得到一个干净的副本，临时转向其它工作。复制到“剪切板”，可以“粘贴“到其它分支。\n\n场景：\n\n- 储存临时改动：`git stash`\n- 恢复临时改动：`git stash pop`\n\n### 打标签\n\n> Git 使用的标签有两种类型：**轻量级的（lightweight）和含附注的（annotated）**。轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。\n>\n> 1. 列出现在所有的标签：`git tag`;\n> 2. 使用特定的搜索模式列出符合条件的标签，例如只对 1.4.2 系列的版本感兴趣：`git tag -l \"v1.4.2.*\"`;\n> 3. 创建一个含附注类型的标签，需要加`-a`参数，如`git tag -a v1.4 -m \"my version 1.4\"`;\n> 4. 使用 git show 命令查看相应标签的版本信息，并连同显示打标签时的提交对象：`git show v1.4`;\n> 5. 如果有自己的私钥，可以使用 GPG 来签署标签，只需要在命令中使用`-s`参数：`git tag -s v1.5 -m \"my signed 1.5 tag\"`;\n> 6. 验证已签署的标签：git tag -v ，如`git tag -v v1.5`;\n> 7. 创建一个轻量级标签的话，就直接使用 git tag 命令即可，连`-a`,`-s`以及`-m`选项都不需要，直接给出标签名字即可，如`git tag v1.5`;\n> 8. 将标签推送到远程仓库中：git push origin ，如`git push origin v1.5`；\n> 9. 将本地所有的标签全部推送到远程仓库中：`git push origin --tags`;\n\n## （三）Github\n\n### 注册 Github 账号\n\n略~\n\n### 多人协作开发流程\n\n- A 在自己的计算机中创建本地仓库\n- A 在 GitHub 中创建远程仓库\n- A 将本地仓库推送到远程仓库\n- B 克隆远程仓库到本地进行开发\n- B 将本地仓库开发内容推送到远程仓库\n- A 将远程仓库中的最新内容拉去本地\n\n### 创建远程仓库\n\n![](git_notes/20191115154237.png)\n\n### 推送到远程仓库\n\n1. `git push 远程仓库地址 分支名称`\n\n2. `git push 远程仓库地址别名 分支名称`\n\n3. `git push -u 远程仓库地址别名 分支名称`\n\n   `-u` 记住推送地址和分支，下次只需要输入`git push`\n\n4. `git remote add 远程仓库地址别名 远程仓库地址`\n\n5. 删除别名：`git remote remove 远程仓库地址别名`\n\n6. 第一次提交需要用户名和密码，电脑会记住密码在凭据管理器，第二次就不用了。\n\n7. > ### 本地仓库上的操作\n   >\n   > 1. 查看本地仓库关联的远程仓库：`git remote`；在克隆完每个远程仓库后，远程仓库默认为`origin`;加上`-v`的参数后，会显示远程仓库的`url`地址；\n   > 2. 添加远程仓库，一般会取一个简短的别名：`git remote add [remote-name] [url]`，比如：`git remote add example git://github.com/example/example.git`;\n   > 3. 从远程仓库中抓取本地仓库中没有的更新：`git fetch [remote-name]`，如`git fetch origin`;使用 fetch 只是将远端数据拉到本地仓库，并不自动合并到当前工作分支，只能人工合并。如果设置了某个分支关联到远程仓库的某个分支的话，可以使用`git pull`来拉去远程分支的数据，然后将远端分支自动合并到本地仓库中的当前分支；\n   > 4. 将本地仓库某分支推送到远程仓库上：`git push [remote-name] [branch-name]`，如`git push origin master`；如果想将本地分支推送到远程仓库的不同名分支：`git push :`，如`git push origin serverfix:awesomebranch`;如果想删除远程分支：`git push [romote-name] :`，如`git push origin :serverfix`。这里省略了本地分支，也就相当于将空白内容推送给远程分支，就等于删掉了远程分支。\n   > 5. 查看远程仓库的详细信息：`git remote show origin`；\n   > 6. 修改某个远程仓库在本地的简称：`git remote rename [old-name] [new-name]`，如`git remote rename origin org`；\n   > 7. 移除远程仓库：`git remote rm [remote-name]`；\n\n### 拉取仓库\n\n#### 克隆仓库\n\n- 克隆远程仓库到本地：`git clone 仓库地址`\n\n#### 拉取远程仓库中最新版本\n\n- 拉取远程仓库最新版本到本地：` git pull 远程仓库地址 分支名称`\n\n### 解决冲突\n\n多人开发同一个项目时，如果两个人修改了同一个文件同一个地方\n\n1. ` git pull`\n2. 手动解决冲突\n3. ` git push`\n\n![](git_notes/20191115164339.png)\n\n### 跨团队协作\n\n1. ` fork`到自己的远程仓库\n2. ` clone`到本地进行修改\n3. ` push`到远程仓库\n4. ` pull request`发送给原作者\n5. 原作者查看`commit` 审核\n6. 原作者 ` merge pull request`\n\n### SSH 免密登录\n\n1. 生成密钥：` ssh-keygen`\n\n   密匙储存目录：` C:\\User\\用户\\.ssh`\n\n   公钥名称：` id_rsa.pub`\n\n   私钥名称：` id_rsa`\n\n2. Github 添加公钥\n\n![](git_notes/20191115165957.png)\n\n3. 复制 SSH 地址：\n\n   ![](git_notes/20191115170348.png)\n\n4. 设置 ssh 别名：`$ git remote add origin_ssh SSH地址 `\n\n5. 远程推送：` $ git push origin_ssh master`\n\n6. [ubuntu git 环境搭建以及通过 SSH 连接 Github（免密码）配置](https://segmentfault.com/a/1190000013154540)\n\n### Git 忽略清单\n\n将不需要的文件名字添加到此文件中，执行 git 命令时就会忽略这些文件。\n\n- git 忽略清单文件名称：`.gitignore`\n\n- 将工作目录所有文件添加到缓存区：` git add .`\n\n- 例子：\n\n  ```gitignore\n  # 此为注释 – 将被 Git 忽略\n  # 忽略所有 .a 结尾的文件\n  *.a\n  # 但 lib.a 除外\n  !lib.a\n  # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\n  /TODO\n  # 忽略 build/ 目录下的所有文件\n  build/\n  # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\n  doc/*.txt\n  # 忽略 doc/ 目录下所有扩展名为 txt 的文件\n  doc/**/*.txt\n  ```\n\n### 为仓库添加说明\n\n在仓库根目录添加`readme.md`文件即可\n\n## （四）使用 SourceTree 管理 Git\n\n> https://blog.csdn.net/u012230055/article/details/64125268\n\n### 一 、SourceTree 简介\n\nSourceTree 是 Windows 和 Mac OS X 下免费的 [Git](http://lib.csdn.net/base/git) 和 Hg 客户端，拥有可视化界面，容易上手操作。同时它也是 Mercurial 和 Subversion[版本控制](http://lib.csdn.net/base/git)系统工具。支持创建、提交、clone、push、pull 和 merge 等操作。\n\n### 二、下载安装 SourceTree 步骤\n\n1. 下载地址：https://www.sourcetreeapp.com/，该版本是中文的，下载完成后可以进行安装。\n\n2. 点击“install”，安装完成后，打开 sourcetree，点击“user an existing account”\n\n3. 注意：使用谷歌帐号登录即可，前提是你必须可以上谷歌才可以。\n\n4. 直接点击“跳过初始设置”即可。\n\n5. 登录注册成功后，弹出设置 puttykey 的界面，点击“取消”即可。\n\n6. 点击“取消”按钮，弹出如下提示框：\n   ![这里写图片描述](https://img-blog.csdn.net/20170320145556338?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n   此时进入到 sourcetree 的主界面，现在就可以使用 sourcetree 啦。\n\n### 三、集成文件对比插件\n\n安装对比插件\n\nSourcetree 中集成 Beyond Compare 4，当文件冲突时可以很好的解决冲突。安装过程很简单，这里不再详述。\n\nSourcetree 中配置 Beyond Compare 4\n\n菜单栏，“工具”——“选项”，如图所示：\n![这里写图片描述](https://img-blog.csdn.net/20170320145615677?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n选择“比较”选项卡，然后将红色方框处的内容修改为如图所示：\n![这里写图片描述](https://img-blog.csdn.net/20170320145628604?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n### 四、SourceTree 基本使用\n\n#### （1）克隆\n\n点击克隆按钮，克隆项目：\n既可以是本地已有的 git 项目，也可以是远程目录中的项目，\n![这里写图片描述](https://img-blog.csdn.net/20170320145642692?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 本地存在的 git 项目，\n 获取项目克隆地址，点击克隆按钮，如图所示：\n![这里写图片描述](https://img-blog.csdn.net/20170320145732677?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 1、克隆项目的路径\n 2、克隆项目存放的位置\n 3、如果要下载特定的分支，可以按分支进行下载\n\n#### （2）配置忽略文件\n\n 利用.gitignore 过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。\n .gitignore 文件只对还没有加入版本管理的文件起作用，如果之前已经用 git 把这些文件纳入了版本库，就不起作用了\n 使用 sourcetree 添加忽略文件的方法：\n 正常情况下，管理员创建项目后需要直接将忽略文件创建好。创建方法如图：\n![这里写图片描述](https://img-blog.csdn.net/20170320150016000?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n按照如上步骤操作即可编辑冲突文件。\n冲突文件规则：\n忽略文件夹（如：bin、obj）：\nobj/\nbin/\n某目录下的所有.txt 文件，\nobj/\\*.txt\n开发的过程中可能遇到一些忽略文件中未添加的文件，此时需要开发者自行添加忽略文件，添加方法如下：\n之前已经介绍过未进行版本控制的或者受版本控制的文件，在 sourcetree 的“文件状态” 标签中查找，如图所示：\n![这里写图片描述](https://img-blog.csdn.net/20170320150046235?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n鼠标右键要忽略的文件，点击“忽略”，选择忽略的模式，即可将文件进行忽略，如图所示：\n![这里写图片描述](https://img-blog.csdn.net/20170320150104001?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n#### （3）tag 使用方法\n\n 打 tag 的目的是在代码的主要节点处有个标记，方便下次修改代码时可以准确的找到想要找的代码。而无需看着日志文件逐一回忆要找的代码位置。\n![这里写图片描述](https://img-blog.csdn.net/20170320150324493?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n#### （4）分支管理与使用\n\n 使用 sourcetree 创建和使用分支是很方便的，不像之前使用的 TortoiseGit 只能在当前代码处创建分支，使用 sourcetree 的方便之处：\n 1、可以选择特定的某版本创建分支\n 2、代码检出时可以按照分支进行检出\n 3、分支的添加很简单\n分支添加：\n![这里写图片描述](https://img-blog.csdn.net/20170320150335144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 1、可以在当前的版本下创建分支\n 2、选择指定的提交创建分支\n 3、点击“创建分支”\n分支提交到服务器：\n 在 sourcetree 右侧内容中的分支列表中，选中创建的分支，右键提交，如图所示：\n![这里写图片描述](https://img-blog.csdn.net/20170320150351024?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n分支合并：\n1、分支合并功能和分支添加功能类似，这里不再详述，需要注意的是首先要切换到被合并的分支上，再进行合并操作。\n2、分支合并时，可以选择具体的某提交进行合并，同时主分支可以合并到子分支；子分支可以合并到主分支；子分支之间也可以进行合并。\n\n#### （5）GIT 与 SVN 同步\n\n git svn 工具集在当前不得不使用 Subversion 服务器或者开发环境要求使用 Subversion 服务器的时候格外有用。不妨把它看成一个跛脚的 Git，在实际使用中不推荐这样使用 GIT。\n\n#### （6）基本步骤\n\n提交、拉取和推送\n提交：\n项目提交是为了维护本地版本库，如果本地有未提交的内容，则不允许拉取和推送；如图所示区域有内容时，则代表本地未提交的内容：\n![这里写图片描述](https://img-blog.csdn.net/20170320150734479?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 点击 Stage All，填写提交信息既可以将本地内容（暂存区）提交到本地版本库，如图所示：\n![这里写图片描述](https://img-blog.csdn.net/20170320150743869?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 1、将未暂存的文件进行暂存，如果有些文件不需要暂存，则可以进行删除，选中文件，右键“移除”即可。\n 拉取：从远程将代码进行更新，相当于 SVN 的“更新”\n 推送：将代码提交到远程。\n\n#### （7）解决冲突\n\n 简单介绍\n![这里写图片描述](https://img-blog.csdn.net/20170320150800182?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 1、冲突文件的符号为“感叹号”\n 2、选中“冲突文件”，右键——点击”解决冲突“——点击”打开外部合并工具“（备注：才操作时已经安装外部合并工具，同时在 sourcetree 中已经进行配置，详见”集成文件对比插件“）\n\n 冲突界面\n\n 冲突解决界面如下：可以根据需要选择内容显示类型，只”显示更改“，”显示冲突“或者”全部“\n![这里写图片描述](https://img-blog.csdn.net/20170320150910886?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 解决冲突\n\n 方法一：在相关的版本处，选中”冲突行”，合并区默认处于合并位置，鼠标右键，选择最终冲突地方留下的内容，如图：\n![这里写图片描述](https://img-blog.csdn.net/20170320151133515?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 解决冲突之后效果图：\n![这里写图片描述](https://img-blog.csdn.net/20170320151150544?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 1、冲突图标由”感叹号”——“省略号”。\n 2、右侧显示修改后的代码进行查看。\n 3、同时修改的冲突文件有相应的备份，大家可以下载到本地，方便冲突有问题再次修改文件。\n备注：该文件下载之后请将版本库中的该文件删除，不要上传到版本库中。\n 4、修改完冲突之后，需要再次提交，推送。大家养成提交时，提交有效的日志信息，不要将比如：123 之类的信息推送到服务器中。\n 方法二：如果冲突非常少，可以直接在右侧栏中解决冲突，如图所示：\n![这里写图片描述](https://img-blog.csdn.net/20170320151202374?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 1、点击未暂存区域的冲突文件。\n 2、右侧列表中出现冲突的内容。\n 3、选择冲突内容，解决冲突，如图所示：\n![这里写图片描述](https://img-blog.csdn.net/20170320151244766?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 暂存行：表示保留该内容\n 丢弃行：表示删除该内容\n 备注：区分于第一种方式，使用第一种方法解决时，不要点击”未暂存文件”,否则可能无法打开冲突文件\n\n#### （8）版本回退\n\n 原则上，代码推送之前要保证本地的代码可运行，不要将不可运行或者有问题的代码推送到服务器上，如果由于误操作，将代码推送到了远程，想重新修改上传代码，此时，需要将版本进行回退，回 退方法如图：\n![这里写图片描述](https://img-blog.csdn.net/20170320151400612?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 1、切换到日志/历史标签\n 2、选择要恢复到的版本，如图蓝色位置\n 3、鼠标右键，选择“重置当前分支到此次提交”\n 4、选择”重置模式”，如图所示\n![这里写图片描述](https://img-blog.csdn.net/20170320151415795?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 5、弹出框中选择”Yes”\n![这里写图片描述](https://img-blog.csdn.net/20170320151427565?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n#### （9）相关提示信息含义\n\n 冲突信息\n![这里写图片描述](https://img-blog.csdn.net/20170320151439378?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n 先更新信息\n![这里写图片描述](https://img-blog.csdn.net/20170320151450207?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n 小窍门：\n![这里写图片描述](https://img-blog.csdn.net/20170320151502061?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n 如果推送时，拉取右上方显示数字，则需要先拉取再推送。\n\n### 五、SourceTree&Git 部分名词解释\n\n**克隆(clone)**：从远程仓库 URL 加载创建一个与远程仓库一样的本地仓库\n**提交(commit)**：将暂存文件上传到本地仓库（我们在 Finder 中对本地仓库做修改后一般都得先提交一次，再推送）\n**检出(checkout)**：切换不同分支\n**添加（add）**：添加文件到缓存区\n**移除（remove）**：移除文件至缓存区\n**暂存(git stash)**：保存工作现场\n**重置(reset)**：回到最近添加(add)/提交(commit)状态\n**合并(merge)**：将多个同名文件合并为一个文件，该文件包含多个同名文件的所有内容，相同内容抵消\n**抓取(fetch)**：从远程仓库获取信息并同步至本地仓库\n**拉取(pull)**：从远程仓库获取信息并同步至本地仓库，并且自动执行合并（merge）操作，即 pull=fetch+merge\n**推送(push)**：将本地仓库同步至远程仓库，一般推送（push）前先拉取（pull）一次，确保一致\n**分支(branch)**：创建/修改/删除分枝\n**标签(tag)**:给项目增添标签\n**工作流(Git Flow)**:团队工作时，每个人创建属于自己的分枝（branch），确定无误后提交到 master 分枝\n**终端(terminal)**:可以输入 git 命令行\n\n## Git 设置，查看，取消代理\n\n```bash\n# 设置代理\ngit config --global http.proxy 'http://127.0.0.1:7890' # 这是设置的默认端口 7890\ngit config --global https.proxy 'http://127.0.0.1:7890'\n# 查看代理\ngit config --global --get http.proxy\ngit config --global --get https.proxy\n# 取消代理\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n\n```\n","slug":"git","published":1,"updated":"2022-03-10T13:40:40.258Z","_id":"cl0l0zbid0003jctp2i7u0peb","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Git-和-GitHub-详解\"><a href=\"#Git-和-GitHub-详解\" class=\"headerlink\" title=\"Git 和 GitHub 详解\"></a>Git 和 GitHub 详解</h1><h2 id=\"（一）Git-基础\"><a href=\"#（一）Git-基础\" class=\"headerlink\" title=\"（一）Git 基础\"></a>（一）Git 基础</h2><h3 id=\"Git-下载和安装\"><a href=\"#Git-下载和安装\" class=\"headerlink\" title=\"Git 下载和安装\"></a>Git 下载和安装</h3><ul>\n<li>下载地址： <a href=\"https://git-scm.com/downloads\">https://git-scm.com/downloads</a></li>\n<li>使用默认值安装</li>\n<li>资源管理器内单击鼠标右键选择 <code>Git Bash Here</code></li>\n<li>输入<code>git --version</code> 检查是否安装成功</li>\n</ul>\n<h3 id=\"Git-基本工作流程\"><a href=\"#Git-基本工作流程\" class=\"headerlink\" title=\"Git 基本工作流程\"></a>Git 基本工作流程</h3><blockquote>\n<p>主要涉及到四个关键点：</p>\n<ol>\n<li>工作区：本地电脑存放项目文件的地方，比如 learnGitProject 文件夹；</li>\n<li>暂存区（Index&#x2F;Stage）：在使用 git 管理项目文件的时候，其本地的项目文件会多出一个.git 的文件夹，将这个.git 文件夹称之为版本库。其中.git 文件夹中包含了两个部分，一个是暂存区（Index 或者 Stage）,顾名思义就是暂时存放文件的地方，通常使用 add 命令将工作区的文件添加到暂存区里；</li>\n<li>本地仓库：.git 文件夹里还包括 git 自动创建的 master 分支，并且将 HEAD 指针指向 master 分支。使用 commit 命令可以将暂存区中的文件添加到本地仓库中；</li>\n<li>远程仓库：不是在本地仓库中，项目代码在远程 git 服务器上，比如项目放在 github 上，就是一个远程仓库，通常使用 clone 命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；</li>\n</ol>\n<p>因此，经过这样的分析，git 命令可以分为这样的逻辑进行理解和记忆：</p>\n<ol>\n<li><p>git 管理配置的命令；</p>\n<p><strong>几个核心存储区的交互命令：</strong></p>\n</li>\n<li><p>工作区与暂存区的交互；</p>\n</li>\n<li><p>暂存区与本地仓库（分支）上的交互；</p>\n</li>\n<li><p>本地仓库与远程仓库的交互。</p>\n</li>\n</ol>\n<p>作者：你听___<br>链接：<a href=\"https://juejin.im/post/5ae072906fb9a07a9e4ce596\">https://juejin.im/post/5ae072906fb9a07a9e4ce596</a><br>来源：掘金</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>工作目录</th>\n<th>暂存区</th>\n<th>git 仓库</th>\n<th>远程仓库</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>被 Git 管理的项目</td>\n<td>临时存放被修改的文件</td>\n<td>目录用于存放提交记录</td>\n<td>远程代码仓库</td>\n</tr>\n<tr>\n<td><code>git init</code></td>\n<td><code>git add</code></td>\n<td><code>git commit</code></td>\n<td><code>git push</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"Git-使用前的配置命令\"><a href=\"#Git-使用前的配置命令\" class=\"headerlink\" title=\"Git 使用前的配置命令\"></a>Git 使用前的配置命令</h3><p>在使用前告诉 git 你是谁：</p>\n<ol>\n<li><p>第一次使用 git，配置用户信息</p>\n<ol>\n<li>配置用户名：<code>git config --global user.name &quot;your name&quot;</code>;</li>\n<li>配置用户邮箱：<code>git config --global user.email &quot;youremail@github.com&quot;</code>;</li>\n</ol>\n</li>\n<li><blockquote>\n<p>查询配置信息</p>\n</blockquote>\n<ol>\n<li>列出当前配置：<code>git config --list</code>;</li>\n<li>列出 repository 配置：<code>git config --local --list</code>;</li>\n<li>列出全局配置：<code>git config --global --list</code>;</li>\n<li>列出系统配置：<code>git config --system --list</code>;</li>\n</ol>\n</li>\n<li><blockquote>\n<p>其他配置</p>\n</blockquote>\n<ol>\n<li>配置解决冲突时使用哪种差异分析工具，比如要使用 vimdiff：<code>git config --global merge.tool vimdiff</code>;</li>\n<li>配置 git 命令输出为彩色的：<code>git config --global color.ui auto</code>;</li>\n<li>配置 git 使用的文本编辑器：<code>git config --global core.editor vi</code>;</li>\n</ol>\n</li>\n<li><blockquote>\n<p>注：</p>\n</blockquote>\n<ol>\n<li>更改–&gt;重复上述命令</li>\n<li>也可直接修改 <code>C:\\Users\\用户\\.gitconfig</code></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"工作区上的操作命令\"><a href=\"#工作区上的操作命令\" class=\"headerlink\" title=\"工作区上的操作命令\"></a>工作区上的操作命令</h3><h4 id=\"提交步骤\"><a href=\"#提交步骤\" class=\"headerlink\" title=\"提交步骤\"></a>提交步骤</h4><ol>\n<li><p><code>git init</code> 初始化 git 仓库</p>\n<blockquote>\n<blockquote>\n<p>新建仓库</p>\n</blockquote>\n<ol>\n<li>将工作区中的项目文件使用 git 进行管理，即创建一个新的本地仓库：<code>git init</code>；</li>\n<li>从远程 git 仓库复制项目：<code>git clone </code>; 克隆项目时如果想定义新的项目名，可以在 clone 命令后指定新的项目名：<code>git clone git://github.com/wasd/example.git NewName</code>；</li>\n</ol>\n</blockquote>\n</li>\n<li><p><code>git status</code> 查看文件状态</p>\n<blockquote>\n<blockquote>\n<p>查新信息</p>\n</blockquote>\n<ol>\n<li>查询当前工作区所有文件的状态：<code>git status</code>;</li>\n<li>比较工作区中当前文件和暂存区之间的差异，也就是修改之后还没有暂存的内容：git diff；指定文件在工作区和暂存区上差异比较：<code>git diff </code>;</li>\n</ol>\n</blockquote>\n</li>\n<li><p><code>git add 文件/文件列表</code> 提交到暂存区</p>\n<blockquote>\n<blockquote>\n<p>提交</p>\n</blockquote>\n<ol>\n<li>提交工作区所有文件到暂存区：<code>git add .</code></li>\n<li>提交工作区中指定文件到暂存区：<code>git add ...</code>;</li>\n<li>提交工作区中某个文件夹中所有文件到暂存区：<code>git add [dir]</code>;</li>\n</ol>\n</blockquote>\n</li>\n<li><p><code>git commit -m 提交信息</code> 向仓库提交代码</p>\n<blockquote>\n<blockquote>\n<p>提交文件到版本库</p>\n</blockquote>\n<ol>\n<li>将暂存区中的文件提交到本地仓库中，即打上新版本：<code>git commit -m &quot;commit_info&quot;</code>;</li>\n<li>将所有已经使用 git 管理过的文件暂存后一并提交，跳过 add 到暂存区的过程：<code>git commit -a -m &quot;commit_info&quot;</code>;</li>\n<li>提交文件时，发现漏掉几个文件，或者注释写错了，可以撤销上一次提交：<code>git commit --amend</code>;</li>\n</ol>\n</blockquote>\n</li>\n<li><p><code>git log</code> 查看提交记录</p>\n<blockquote>\n<blockquote>\n<p>查看信息</p>\n</blockquote>\n<ol>\n<li>比较暂存区与上一版本的差异：<code>git diff --cached</code>;</li>\n<li>指定文件在暂存区和本地仓库的不同：<code>git diff --cached</code>;</li>\n<li>查看提交历史：git log；参数<code>-p</code>展开每次提交的内容差异，用<code>-2</code>显示最近的两次更新，如<code>git log -p -2</code>;</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h4><ul>\n<li><p>用暂存区中的文件覆盖工作目录中的文件：<code>git checkout -- 文件名</code> 不加 <code>-- 文件名</code>则覆盖全部文件</p>\n</li>\n<li><p>将文件从暂存区中删除：<code>git rm --cached 文件名</code></p>\n</li>\n<li><p>将 git 仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录：<code> git reset --hard commitID</code></p>\n</li>\n<li><blockquote>\n<blockquote>\n<p>撤销</p>\n</blockquote>\n<ol>\n<li>删除工作区文件，并且也从暂存区删除对应文件的记录：<code>git rm </code>;</li>\n<li>从暂存区中删除文件，但是工作区依然还有该文件:<code>git rm --cached </code>;</li>\n<li>取消暂存区已经暂存的文件：<code>git reset HEAD ...</code>;</li>\n<li>撤销上一次对文件的操作：<code>git checkout --</code>。要确定上一次对文件的修改不再需要，如果想保留上一次的修改以备以后继续工作，可以使用 stashing 和分支来处理；</li>\n<li>隐藏当前变更，以便能够切换分支：<code>git stash</code>；</li>\n<li>查看当前所有的储藏：<code>git stash list</code>；</li>\n<li>应用最新的储藏：<code>git stash apply</code>，如果想应用更早的储藏：<code>git stash apply stash@&#123;2&#125;</code>；重新应用被暂存的变更，需要加上<code>--index</code>参数：<code>git stash apply --index</code>;</li>\n<li>使用 apply 命令只是应用储藏，而内容仍然还在栈上，需要移除指定的储藏：<code>git stash drop stash&#123;0&#125;</code>；如果使用 pop 命令不仅可以重新应用储藏，还可以立刻从堆栈中清除：<code>git stash pop</code>;</li>\n<li>在某些情况下，你可能想应用储藏的修改，在进行了一些其他的修改后，又要取消之前所应用储藏的修改。Git 没有提供类似于 stash unapply 的命令，但是可以通过取消该储藏的补丁达到同样的效果：<code>git stash show -p stash@&#123;0&#125; | git apply -R</code>；同样的，如果你沒有指定具体的某个储藏，Git 会选择最近的储藏：<code>git stash show -p | git apply -R</code>；</li>\n</ol>\n<blockquote>\n<p>更新文件</p>\n</blockquote>\n<ol>\n<li>重命名文件，并将已改名文件提交到暂存区：<code>git mv [file-original] [file-renamed]</code>;</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"（二）Git-进阶\"><a href=\"#（二）Git-进阶\" class=\"headerlink\" title=\"（二）Git 进阶\"></a>（二）Git 进阶</h2><h3 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h3><p>生成副本，避免影响开发主线</p>\n<h4 id=\"分支细分\"><a href=\"#分支细分\" class=\"headerlink\" title=\"分支细分\"></a>分支细分</h4><ol>\n<li>主分支（master）：第一次向 git 仓库提交更新记录时自动产生的一个分支。</li>\n<li>开发分支（develop）：作为开发的分支，基于 master 分支创建。</li>\n<li>功能分支（feature）：作为开发具体功能的分支基于开发分支创建。</li>\n</ol>\n<h4 id=\"分支命令\"><a href=\"#分支命令\" class=\"headerlink\" title=\"分支命令\"></a>分支命令</h4><ul>\n<li><code>git branch</code> 查看分支</li>\n<li><code>git branch 分支名称</code> 创建分支</li>\n<li><code>git checkout 分支名称</code> 切换分支</li>\n<li><code>git merge 来源分支</code> 合并分支</li>\n<li><code>git branch -d 分支名称</code> 删除分支（分支合并后才允许被删除）（-D 大写强制删除）<ul>\n<li><code>git push origin :branch-name</code> : 远程仓库同步删除掉的分支</li>\n</ul>\n</li>\n</ul>\n<p>注意：</p>\n<p> 开发分支文件后要 <code>commit</code> 后再切换主分支，否则分支文件会出现在主分支里面。</p>\n<blockquote>\n<blockquote>\n<p>分支管理</p>\n</blockquote>\n<ol>\n<li>创建分支：<code>git branch </code>，如<code>git branch testing</code>；</li>\n<li>从当前所处的分支切换到其他分支：<code>git checkout </code>，如<code>git checkout testing</code>；</li>\n<li>新建并切换到新建分支上：<code>git checkout -b </code>;</li>\n<li>删除分支：<code>git branch -d </code>；</li>\n<li>将当前分支与指定分支进行合并：<code>git merge </code>;</li>\n<li>显示本地仓库的所有分支：<code>git branch</code>;</li>\n<li>查看各个分支最后一个提交对象的信息：<code>git branch -v</code>;</li>\n<li>查看哪些分支已经合并到当前分支：<code>git branch --merged</code>;</li>\n<li>查看当前哪些分支还没有合并到当前分支：<code>git branch --no-merged</code>;</li>\n<li>把远程分支合并到当前分支：<code>git merge /</code>，如<code>git merge origin/serverfix</code>；如果是单线的历史分支不存在任何需要解决的分歧，只是简单的将 HEAD 指针前移，所以这种合并过程可以称为快进（Fast forward），而如果是历史分支是分叉的，会以当前分叉的两个分支作为两个祖先，创建新的提交对象；如果在合并分支时，遇到合并冲突需要人工解决后，再才能提交；</li>\n<li>在远程分支的基础上创建新的本地分支<code>：git checkout -b /</code>，如<code>git checkout -b serverfix origin/serverfix</code>;</li>\n<li>从远程分支 checkout 出来的本地分支，称之为跟踪分支。在跟踪分支上向远程分支上推送内容：<code>git push</code>。该命令会自动判断应该向远程仓库中的哪个分支推送数据；在跟踪分支上合并远程分支：<code>git pull</code>；</li>\n<li>将一个分支里提交的改变移到基底分支上重放一遍：<code>git rebase </code>，如<code>git rebase master server</code>，将特性分支 server 提交的改变在基底分支 master 上重演一遍；使用 rebase 操作最大的好处是像在单个分支上操作的，提交的修改历史也是一根线；如果想把基于一个特性分支上的另一个特性分支变基到其他分支上，可以使用<code>--onto</code>操作：<code>git rebase --onto </code>，如<code>git rebase --onto master server client</code>；使用 rebase 操作应该遵循的原则是：<strong>一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行 rebase 操作</strong>；</li>\n</ol>\n</blockquote>\n<h3 id=\"暂时保存更改\"><a href=\"#暂时保存更改\" class=\"headerlink\" title=\"暂时保存更改\"></a>暂时保存更改</h3><p>git 中可以不提交更改，只提取分支上所有改动并储存，让开发人员得到一个干净的副本，临时转向其它工作。复制到“剪切板”，可以“粘贴“到其它分支。</p>\n<p>场景：</p>\n<ul>\n<li>储存临时改动：<code>git stash</code></li>\n<li>恢复临时改动：<code>git stash pop</code></li>\n</ul>\n<h3 id=\"打标签\"><a href=\"#打标签\" class=\"headerlink\" title=\"打标签\"></a>打标签</h3><blockquote>\n<p>Git 使用的标签有两种类型：<strong>轻量级的（lightweight）和含附注的（annotated）</strong>。轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。</p>\n<ol>\n<li>列出现在所有的标签：<code>git tag</code>;</li>\n<li>使用特定的搜索模式列出符合条件的标签，例如只对 1.4.2 系列的版本感兴趣：<code>git tag -l &quot;v1.4.2.*&quot;</code>;</li>\n<li>创建一个含附注类型的标签，需要加<code>-a</code>参数，如<code>git tag -a v1.4 -m &quot;my version 1.4&quot;</code>;</li>\n<li>使用 git show 命令查看相应标签的版本信息，并连同显示打标签时的提交对象：<code>git show v1.4</code>;</li>\n<li>如果有自己的私钥，可以使用 GPG 来签署标签，只需要在命令中使用<code>-s</code>参数：<code>git tag -s v1.5 -m &quot;my signed 1.5 tag&quot;</code>;</li>\n<li>验证已签署的标签：git tag -v ，如<code>git tag -v v1.5</code>;</li>\n<li>创建一个轻量级标签的话，就直接使用 git tag 命令即可，连<code>-a</code>,<code>-s</code>以及<code>-m</code>选项都不需要，直接给出标签名字即可，如<code>git tag v1.5</code>;</li>\n<li>将标签推送到远程仓库中：git push origin ，如<code>git push origin v1.5</code>；</li>\n<li>将本地所有的标签全部推送到远程仓库中：<code>git push origin --tags</code>;</li>\n</ol>\n</blockquote>\n<h2 id=\"（三）Github\"><a href=\"#（三）Github\" class=\"headerlink\" title=\"（三）Github\"></a>（三）Github</h2><h3 id=\"注册-Github-账号\"><a href=\"#注册-Github-账号\" class=\"headerlink\" title=\"注册 Github 账号\"></a>注册 Github 账号</h3><p>略~</p>\n<h3 id=\"多人协作开发流程\"><a href=\"#多人协作开发流程\" class=\"headerlink\" title=\"多人协作开发流程\"></a>多人协作开发流程</h3><ul>\n<li>A 在自己的计算机中创建本地仓库</li>\n<li>A 在 GitHub 中创建远程仓库</li>\n<li>A 将本地仓库推送到远程仓库</li>\n<li>B 克隆远程仓库到本地进行开发</li>\n<li>B 将本地仓库开发内容推送到远程仓库</li>\n<li>A 将远程仓库中的最新内容拉去本地</li>\n</ul>\n<h3 id=\"创建远程仓库\"><a href=\"#创建远程仓库\" class=\"headerlink\" title=\"创建远程仓库\"></a>创建远程仓库</h3><p><img src=\"/git_notes/20191115154237.png\"></p>\n<h3 id=\"推送到远程仓库\"><a href=\"#推送到远程仓库\" class=\"headerlink\" title=\"推送到远程仓库\"></a>推送到远程仓库</h3><ol>\n<li><p><code>git push 远程仓库地址 分支名称</code></p>\n</li>\n<li><p><code>git push 远程仓库地址别名 分支名称</code></p>\n</li>\n<li><p><code>git push -u 远程仓库地址别名 分支名称</code></p>\n<p><code>-u</code> 记住推送地址和分支，下次只需要输入<code>git push</code></p>\n</li>\n<li><p><code>git remote add 远程仓库地址别名 远程仓库地址</code></p>\n</li>\n<li><p>删除别名：<code>git remote remove 远程仓库地址别名</code></p>\n</li>\n<li><p>第一次提交需要用户名和密码，电脑会记住密码在凭据管理器，第二次就不用了。</p>\n</li>\n<li><blockquote>\n<h3 id=\"本地仓库上的操作\"><a href=\"#本地仓库上的操作\" class=\"headerlink\" title=\"本地仓库上的操作\"></a>本地仓库上的操作</h3><ol>\n<li>查看本地仓库关联的远程仓库：<code>git remote</code>；在克隆完每个远程仓库后，远程仓库默认为<code>origin</code>;加上<code>-v</code>的参数后，会显示远程仓库的<code>url</code>地址；</li>\n<li>添加远程仓库，一般会取一个简短的别名：<code>git remote add [remote-name] [url]</code>，比如：<code>git remote add example git://github.com/example/example.git</code>;</li>\n<li>从远程仓库中抓取本地仓库中没有的更新：<code>git fetch [remote-name]</code>，如<code>git fetch origin</code>;使用 fetch 只是将远端数据拉到本地仓库，并不自动合并到当前工作分支，只能人工合并。如果设置了某个分支关联到远程仓库的某个分支的话，可以使用<code>git pull</code>来拉去远程分支的数据，然后将远端分支自动合并到本地仓库中的当前分支；</li>\n<li>将本地仓库某分支推送到远程仓库上：<code>git push [remote-name] [branch-name]</code>，如<code>git push origin master</code>；如果想将本地分支推送到远程仓库的不同名分支：<code>git push :</code>，如<code>git push origin serverfix:awesomebranch</code>;如果想删除远程分支：<code>git push [romote-name] :</code>，如<code>git push origin :serverfix</code>。这里省略了本地分支，也就相当于将空白内容推送给远程分支，就等于删掉了远程分支。</li>\n<li>查看远程仓库的详细信息：<code>git remote show origin</code>；</li>\n<li>修改某个远程仓库在本地的简称：<code>git remote rename [old-name] [new-name]</code>，如<code>git remote rename origin org</code>；</li>\n<li>移除远程仓库：<code>git remote rm [remote-name]</code>；</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"拉取仓库\"><a href=\"#拉取仓库\" class=\"headerlink\" title=\"拉取仓库\"></a>拉取仓库</h3><h4 id=\"克隆仓库\"><a href=\"#克隆仓库\" class=\"headerlink\" title=\"克隆仓库\"></a>克隆仓库</h4><ul>\n<li>克隆远程仓库到本地：<code>git clone 仓库地址</code></li>\n</ul>\n<h4 id=\"拉取远程仓库中最新版本\"><a href=\"#拉取远程仓库中最新版本\" class=\"headerlink\" title=\"拉取远程仓库中最新版本\"></a>拉取远程仓库中最新版本</h4><ul>\n<li>拉取远程仓库最新版本到本地：<code> git pull 远程仓库地址 分支名称</code></li>\n</ul>\n<h3 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h3><p>多人开发同一个项目时，如果两个人修改了同一个文件同一个地方</p>\n<ol>\n<li><code> git pull</code></li>\n<li>手动解决冲突</li>\n<li><code> git push</code></li>\n</ol>\n<p><img src=\"/git_notes/20191115164339.png\"></p>\n<h3 id=\"跨团队协作\"><a href=\"#跨团队协作\" class=\"headerlink\" title=\"跨团队协作\"></a>跨团队协作</h3><ol>\n<li><code> fork</code>到自己的远程仓库</li>\n<li><code> clone</code>到本地进行修改</li>\n<li><code> push</code>到远程仓库</li>\n<li><code> pull request</code>发送给原作者</li>\n<li>原作者查看<code>commit</code> 审核</li>\n<li>原作者 <code> merge pull request</code></li>\n</ol>\n<h3 id=\"SSH-免密登录\"><a href=\"#SSH-免密登录\" class=\"headerlink\" title=\"SSH 免密登录\"></a>SSH 免密登录</h3><ol>\n<li><p>生成密钥：<code> ssh-keygen</code></p>\n<p>密匙储存目录：<code> C:\\User\\用户\\.ssh</code></p>\n<p>公钥名称：<code> id_rsa.pub</code></p>\n<p>私钥名称：<code> id_rsa</code></p>\n</li>\n<li><p>Github 添加公钥</p>\n</li>\n</ol>\n<p><img src=\"/git_notes/20191115165957.png\"></p>\n<ol start=\"3\">\n<li><p>复制 SSH 地址：</p>\n<p><img src=\"/git_notes/20191115170348.png\"></p>\n</li>\n<li><p>设置 ssh 别名：<code>$ git remote add origin_ssh SSH地址 </code></p>\n</li>\n<li><p>远程推送：<code> $ git push origin_ssh master</code></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000013154540\">ubuntu git 环境搭建以及通过 SSH 连接 Github（免密码）配置</a></p>\n</li>\n</ol>\n<h3 id=\"Git-忽略清单\"><a href=\"#Git-忽略清单\" class=\"headerlink\" title=\"Git 忽略清单\"></a>Git 忽略清单</h3><p>将不需要的文件名字添加到此文件中，执行 git 命令时就会忽略这些文件。</p>\n<ul>\n<li><p>git 忽略清单文件名称：<code>.gitignore</code></p>\n</li>\n<li><p>将工作目录所有文件添加到缓存区：<code> git add .</code></p>\n</li>\n<li><p>例子：</p>\n<pre class=\"line-numbers language-gitignore\"><code class=\"language-gitignore\"># 此为注释 – 将被 Git 忽略\n# 忽略所有 .a 结尾的文件\n*.a\n# 但 lib.a 除外\n!lib.a\n# 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\n/TODO\n# 忽略 build/ 目录下的所有文件\nbuild/\n# 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\ndoc/*.txt\n# 忽略 doc/ 目录下所有扩展名为 txt 的文件\ndoc/**/*.txt\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"为仓库添加说明\"><a href=\"#为仓库添加说明\" class=\"headerlink\" title=\"为仓库添加说明\"></a>为仓库添加说明</h3><p>在仓库根目录添加<code>readme.md</code>文件即可</p>\n<h2 id=\"（四）使用-SourceTree-管理-Git\"><a href=\"#（四）使用-SourceTree-管理-Git\" class=\"headerlink\" title=\"（四）使用 SourceTree 管理 Git\"></a>（四）使用 SourceTree 管理 Git</h2><blockquote>\n<p><a href=\"https://blog.csdn.net/u012230055/article/details/64125268\">https://blog.csdn.net/u012230055/article/details/64125268</a></p>\n</blockquote>\n<h3 id=\"一-、SourceTree-简介\"><a href=\"#一-、SourceTree-简介\" class=\"headerlink\" title=\"一 、SourceTree 简介\"></a>一 、SourceTree 简介</h3><p>SourceTree 是 Windows 和 Mac OS X 下免费的 <a href=\"http://lib.csdn.net/base/git\">Git</a> 和 Hg 客户端，拥有可视化界面，容易上手操作。同时它也是 Mercurial 和 Subversion<a href=\"http://lib.csdn.net/base/git\">版本控制</a>系统工具。支持创建、提交、clone、push、pull 和 merge 等操作。</p>\n<h3 id=\"二、下载安装-SourceTree-步骤\"><a href=\"#二、下载安装-SourceTree-步骤\" class=\"headerlink\" title=\"二、下载安装 SourceTree 步骤\"></a>二、下载安装 SourceTree 步骤</h3><ol>\n<li><p>下载地址：<a href=\"https://www.sourcetreeapp.com/%EF%BC%8C%E8%AF%A5%E7%89%88%E6%9C%AC%E6%98%AF%E4%B8%AD%E6%96%87%E7%9A%84%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%AE%8C%E6%88%90%E5%90%8E%E5%8F%AF%E4%BB%A5%E8%BF%9B%E8%A1%8C%E5%AE%89%E8%A3%85%E3%80%82\">https://www.sourcetreeapp.com/，该版本是中文的，下载完成后可以进行安装。</a></p>\n</li>\n<li><p>点击“install”，安装完成后，打开 sourcetree，点击“user an existing account”</p>\n</li>\n<li><p>注意：使用谷歌帐号登录即可，前提是你必须可以上谷歌才可以。</p>\n</li>\n<li><p>直接点击“跳过初始设置”即可。</p>\n</li>\n<li><p>登录注册成功后，弹出设置 puttykey 的界面，点击“取消”即可。</p>\n</li>\n<li><p>点击“取消”按钮，弹出如下提示框：<br><img src=\"https://img-blog.csdn.net/20170320145556338?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>此时进入到 sourcetree 的主界面，现在就可以使用 sourcetree 啦。</p>\n</li>\n</ol>\n<h3 id=\"三、集成文件对比插件\"><a href=\"#三、集成文件对比插件\" class=\"headerlink\" title=\"三、集成文件对比插件\"></a>三、集成文件对比插件</h3><p>安装对比插件</p>\n<p>Sourcetree 中集成 Beyond Compare 4，当文件冲突时可以很好的解决冲突。安装过程很简单，这里不再详述。</p>\n<p>Sourcetree 中配置 Beyond Compare 4</p>\n<p>菜单栏，“工具”——“选项”，如图所示：<br><img src=\"https://img-blog.csdn.net/20170320145615677?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>选择“比较”选项卡，然后将红色方框处的内容修改为如图所示：<br><img src=\"https://img-blog.csdn.net/20170320145628604?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h3 id=\"四、SourceTree-基本使用\"><a href=\"#四、SourceTree-基本使用\" class=\"headerlink\" title=\"四、SourceTree 基本使用\"></a>四、SourceTree 基本使用</h3><h4 id=\"（1）克隆\"><a href=\"#（1）克隆\" class=\"headerlink\" title=\"（1）克隆\"></a>（1）克隆</h4><p>点击克隆按钮，克隆项目：<br>既可以是本地已有的 git 项目，也可以是远程目录中的项目，<br><img src=\"https://img-blog.csdn.net/20170320145642692?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 本地存在的 git 项目，<br> 获取项目克隆地址，点击克隆按钮，如图所示：<br><img src=\"https://img-blog.csdn.net/20170320145732677?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 1、克隆项目的路径<br> 2、克隆项目存放的位置<br> 3、如果要下载特定的分支，可以按分支进行下载</p>\n<h4 id=\"（2）配置忽略文件\"><a href=\"#（2）配置忽略文件\" class=\"headerlink\" title=\"（2）配置忽略文件\"></a>（2）配置忽略文件</h4><p> 利用.gitignore 过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。<br> .gitignore 文件只对还没有加入版本管理的文件起作用，如果之前已经用 git 把这些文件纳入了版本库，就不起作用了<br> 使用 sourcetree 添加忽略文件的方法：<br> 正常情况下，管理员创建项目后需要直接将忽略文件创建好。创建方法如图：<br><img src=\"https://img-blog.csdn.net/20170320150016000?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>按照如上步骤操作即可编辑冲突文件。<br>冲突文件规则：<br>忽略文件夹（如：bin、obj）：<br>obj&#x2F;<br>bin&#x2F;<br>某目录下的所有.txt 文件，<br>obj&#x2F;*.txt<br>开发的过程中可能遇到一些忽略文件中未添加的文件，此时需要开发者自行添加忽略文件，添加方法如下：<br>之前已经介绍过未进行版本控制的或者受版本控制的文件，在 sourcetree 的“文件状态” 标签中查找，如图所示：<br><img src=\"https://img-blog.csdn.net/20170320150046235?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>鼠标右键要忽略的文件，点击“忽略”，选择忽略的模式，即可将文件进行忽略，如图所示：<br><img src=\"https://img-blog.csdn.net/20170320150104001?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h4 id=\"（3）tag-使用方法\"><a href=\"#（3）tag-使用方法\" class=\"headerlink\" title=\"（3）tag 使用方法\"></a>（3）tag 使用方法</h4><p> 打 tag 的目的是在代码的主要节点处有个标记，方便下次修改代码时可以准确的找到想要找的代码。而无需看着日志文件逐一回忆要找的代码位置。<br><img src=\"https://img-blog.csdn.net/20170320150324493?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h4 id=\"（4）分支管理与使用\"><a href=\"#（4）分支管理与使用\" class=\"headerlink\" title=\"（4）分支管理与使用\"></a>（4）分支管理与使用</h4><p> 使用 sourcetree 创建和使用分支是很方便的，不像之前使用的 TortoiseGit 只能在当前代码处创建分支，使用 sourcetree 的方便之处：<br> 1、可以选择特定的某版本创建分支<br> 2、代码检出时可以按照分支进行检出<br> 3、分支的添加很简单<br>分支添加：<br><img src=\"https://img-blog.csdn.net/20170320150335144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 1、可以在当前的版本下创建分支<br> 2、选择指定的提交创建分支<br> 3、点击“创建分支”<br>分支提交到服务器：<br> 在 sourcetree 右侧内容中的分支列表中，选中创建的分支，右键提交，如图所示：<br><img src=\"https://img-blog.csdn.net/20170320150351024?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>分支合并：<br>1、分支合并功能和分支添加功能类似，这里不再详述，需要注意的是首先要切换到被合并的分支上，再进行合并操作。<br>2、分支合并时，可以选择具体的某提交进行合并，同时主分支可以合并到子分支；子分支可以合并到主分支；子分支之间也可以进行合并。</p>\n<h4 id=\"（5）GIT-与-SVN-同步\"><a href=\"#（5）GIT-与-SVN-同步\" class=\"headerlink\" title=\"（5）GIT 与 SVN 同步\"></a>（5）GIT 与 SVN 同步</h4><p> git svn 工具集在当前不得不使用 Subversion 服务器或者开发环境要求使用 Subversion 服务器的时候格外有用。不妨把它看成一个跛脚的 Git，在实际使用中不推荐这样使用 GIT。</p>\n<h4 id=\"（6）基本步骤\"><a href=\"#（6）基本步骤\" class=\"headerlink\" title=\"（6）基本步骤\"></a>（6）基本步骤</h4><p>提交、拉取和推送<br>提交：<br>项目提交是为了维护本地版本库，如果本地有未提交的内容，则不允许拉取和推送；如图所示区域有内容时，则代表本地未提交的内容：<br><img src=\"https://img-blog.csdn.net/20170320150734479?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 点击 Stage All，填写提交信息既可以将本地内容（暂存区）提交到本地版本库，如图所示：<br><img src=\"https://img-blog.csdn.net/20170320150743869?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 1、将未暂存的文件进行暂存，如果有些文件不需要暂存，则可以进行删除，选中文件，右键“移除”即可。<br> 拉取：从远程将代码进行更新，相当于 SVN 的“更新”<br> 推送：将代码提交到远程。</p>\n<h4 id=\"（7）解决冲突\"><a href=\"#（7）解决冲突\" class=\"headerlink\" title=\"（7）解决冲突\"></a>（7）解决冲突</h4><p> 简单介绍<br><img src=\"https://img-blog.csdn.net/20170320150800182?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 1、冲突文件的符号为“感叹号”<br> 2、选中“冲突文件”，右键——点击”解决冲突“——点击”打开外部合并工具“（备注：才操作时已经安装外部合并工具，同时在 sourcetree 中已经进行配置，详见”集成文件对比插件“）</p>\n<p> 冲突界面</p>\n<p> 冲突解决界面如下：可以根据需要选择内容显示类型，只”显示更改“，”显示冲突“或者”全部“<br><img src=\"https://img-blog.csdn.net/20170320150910886?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 解决冲突</p>\n<p> 方法一：在相关的版本处，选中”冲突行”，合并区默认处于合并位置，鼠标右键，选择最终冲突地方留下的内容，如图：<br><img src=\"https://img-blog.csdn.net/20170320151133515?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 解决冲突之后效果图：<br><img src=\"https://img-blog.csdn.net/20170320151150544?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 1、冲突图标由”感叹号”——“省略号”。<br> 2、右侧显示修改后的代码进行查看。<br> 3、同时修改的冲突文件有相应的备份，大家可以下载到本地，方便冲突有问题再次修改文件。<br>备注：该文件下载之后请将版本库中的该文件删除，不要上传到版本库中。<br> 4、修改完冲突之后，需要再次提交，推送。大家养成提交时，提交有效的日志信息，不要将比如：123 之类的信息推送到服务器中。<br> 方法二：如果冲突非常少，可以直接在右侧栏中解决冲突，如图所示：<br><img src=\"https://img-blog.csdn.net/20170320151202374?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 1、点击未暂存区域的冲突文件。<br> 2、右侧列表中出现冲突的内容。<br> 3、选择冲突内容，解决冲突，如图所示：<br><img src=\"https://img-blog.csdn.net/20170320151244766?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 暂存行：表示保留该内容<br> 丢弃行：表示删除该内容<br> 备注：区分于第一种方式，使用第一种方法解决时，不要点击”未暂存文件”,否则可能无法打开冲突文件</p>\n<h4 id=\"（8）版本回退\"><a href=\"#（8）版本回退\" class=\"headerlink\" title=\"（8）版本回退\"></a>（8）版本回退</h4><p> 原则上，代码推送之前要保证本地的代码可运行，不要将不可运行或者有问题的代码推送到服务器上，如果由于误操作，将代码推送到了远程，想重新修改上传代码，此时，需要将版本进行回退，回 退方法如图：<br><img src=\"https://img-blog.csdn.net/20170320151400612?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 1、切换到日志&#x2F;历史标签<br> 2、选择要恢复到的版本，如图蓝色位置<br> 3、鼠标右键，选择“重置当前分支到此次提交”<br> 4、选择”重置模式”，如图所示<br><img src=\"https://img-blog.csdn.net/20170320151415795?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 5、弹出框中选择”Yes”<br><img src=\"https://img-blog.csdn.net/20170320151427565?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h4 id=\"（9）相关提示信息含义\"><a href=\"#（9）相关提示信息含义\" class=\"headerlink\" title=\"（9）相关提示信息含义\"></a>（9）相关提示信息含义</h4><p> 冲突信息<br><img src=\"https://img-blog.csdn.net/20170320151439378?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 先更新信息<br><img src=\"https://img-blog.csdn.net/20170320151450207?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br> 小窍门：<br><img src=\"https://img-blog.csdn.net/20170320151502061?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br> 如果推送时，拉取右上方显示数字，则需要先拉取再推送。</p>\n<h3 id=\"五、SourceTree-amp-Git-部分名词解释\"><a href=\"#五、SourceTree-amp-Git-部分名词解释\" class=\"headerlink\" title=\"五、SourceTree&amp;Git 部分名词解释\"></a>五、SourceTree&amp;Git 部分名词解释</h3><p>**克隆(clone)**：从远程仓库 URL 加载创建一个与远程仓库一样的本地仓库<br>**提交(commit)**：将暂存文件上传到本地仓库（我们在 Finder 中对本地仓库做修改后一般都得先提交一次，再推送）<br>**检出(checkout)**：切换不同分支<br><strong>添加（add）</strong>：添加文件到缓存区<br><strong>移除（remove）</strong>：移除文件至缓存区<br>**暂存(git stash)**：保存工作现场<br>**重置(reset)**：回到最近添加(add)&#x2F;提交(commit)状态<br>**合并(merge)**：将多个同名文件合并为一个文件，该文件包含多个同名文件的所有内容，相同内容抵消<br>**抓取(fetch)**：从远程仓库获取信息并同步至本地仓库<br>**拉取(pull)**：从远程仓库获取信息并同步至本地仓库，并且自动执行合并（merge）操作，即 pull&#x3D;fetch+merge<br>**推送(push)**：将本地仓库同步至远程仓库，一般推送（push）前先拉取（pull）一次，确保一致<br>**分支(branch)**：创建&#x2F;修改&#x2F;删除分枝<br><strong>标签(tag)</strong>:给项目增添标签<br><strong>工作流(Git Flow)</strong>:团队工作时，每个人创建属于自己的分枝（branch），确定无误后提交到 master 分枝<br><strong>终端(terminal)</strong>:可以输入 git 命令行</p>\n<h2 id=\"Git-设置，查看，取消代理\"><a href=\"#Git-设置，查看，取消代理\" class=\"headerlink\" title=\"Git 设置，查看，取消代理\"></a>Git 设置，查看，取消代理</h2><pre class=\"line-numbers language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># 设置代理</span>\n<span class=\"token function\">git</span> config --global http.proxy <span class=\"token string\">'http://127.0.0.1:7890'</span> <span class=\"token comment\" spellcheck=\"true\"># 这是设置的默认端口 7890</span>\n<span class=\"token function\">git</span> config --global https.proxy <span class=\"token string\">'http://127.0.0.1:7890'</span>\n<span class=\"token comment\" spellcheck=\"true\"># 查看代理</span>\n<span class=\"token function\">git</span> config --global --get http.proxy\n<span class=\"token function\">git</span> config --global --get https.proxy\n<span class=\"token comment\" spellcheck=\"true\"># 取消代理</span>\n<span class=\"token function\">git</span> config --global --unset http.proxy\n<span class=\"token function\">git</span> config --global --unset https.proxy\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<h1 id=\"Git-和-GitHub-详解\"><a href=\"#Git-和-GitHub-详解\" class=\"headerlink\" title=\"Git 和 GitHub 详解\"></a>Git 和 GitHub 详解</h1><h2 id=\"（一）Git-基础\"><a href=\"#（一）Git-基础\" class=\"headerlink\" title=\"（一）Git 基础\"></a>（一）Git 基础</h2><h3 id=\"Git-下载和安装\"><a href=\"#Git-下载和安装\" class=\"headerlink\" title=\"Git 下载和安装\"></a>Git 下载和安装</h3><ul>\n<li>下载地址： <a href=\"https://git-scm.com/downloads\">https://git-scm.com/downloads</a></li>\n<li>使用默认值安装</li>\n<li>资源管理器内单击鼠标右键选择 <code>Git Bash Here</code></li>\n<li>输入<code>git --version</code> 检查是否安装成功</li>\n</ul>\n<h3 id=\"Git-基本工作流程\"><a href=\"#Git-基本工作流程\" class=\"headerlink\" title=\"Git 基本工作流程\"></a>Git 基本工作流程</h3><blockquote>\n<p>主要涉及到四个关键点：</p>\n<ol>\n<li>工作区：本地电脑存放项目文件的地方，比如 learnGitProject 文件夹；</li>\n<li>暂存区（Index&#x2F;Stage）：在使用 git 管理项目文件的时候，其本地的项目文件会多出一个.git 的文件夹，将这个.git 文件夹称之为版本库。其中.git 文件夹中包含了两个部分，一个是暂存区（Index 或者 Stage）,顾名思义就是暂时存放文件的地方，通常使用 add 命令将工作区的文件添加到暂存区里；</li>\n<li>本地仓库：.git 文件夹里还包括 git 自动创建的 master 分支，并且将 HEAD 指针指向 master 分支。使用 commit 命令可以将暂存区中的文件添加到本地仓库中；</li>\n<li>远程仓库：不是在本地仓库中，项目代码在远程 git 服务器上，比如项目放在 github 上，就是一个远程仓库，通常使用 clone 命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；</li>\n</ol>\n<p>因此，经过这样的分析，git 命令可以分为这样的逻辑进行理解和记忆：</p>\n<ol>\n<li><p>git 管理配置的命令；</p>\n<p><strong>几个核心存储区的交互命令：</strong></p>\n</li>\n<li><p>工作区与暂存区的交互；</p>\n</li>\n<li><p>暂存区与本地仓库（分支）上的交互；</p>\n</li>\n<li><p>本地仓库与远程仓库的交互。</p>\n</li>\n</ol>\n<p>作者：你听___<br>链接：<a href=\"https://juejin.im/post/5ae072906fb9a07a9e4ce596\">https://juejin.im/post/5ae072906fb9a07a9e4ce596</a><br>来源：掘金</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>工作目录</th>\n<th>暂存区</th>\n<th>git 仓库</th>\n<th>远程仓库</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>被 Git 管理的项目</td>\n<td>临时存放被修改的文件</td>\n<td>目录用于存放提交记录</td>\n<td>远程代码仓库</td>\n</tr>\n<tr>\n<td><code>git init</code></td>\n<td><code>git add</code></td>\n<td><code>git commit</code></td>\n<td><code>git push</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"Git-使用前的配置命令\"><a href=\"#Git-使用前的配置命令\" class=\"headerlink\" title=\"Git 使用前的配置命令\"></a>Git 使用前的配置命令</h3><p>在使用前告诉 git 你是谁：</p>\n<ol>\n<li><p>第一次使用 git，配置用户信息</p>\n<ol>\n<li>配置用户名：<code>git config --global user.name &quot;your name&quot;</code>;</li>\n<li>配置用户邮箱：<code>git config --global user.email &quot;youremail@github.com&quot;</code>;</li>\n</ol>\n</li>\n<li><blockquote>\n<p>查询配置信息</p>\n</blockquote>\n<ol>\n<li>列出当前配置：<code>git config --list</code>;</li>\n<li>列出 repository 配置：<code>git config --local --list</code>;</li>\n<li>列出全局配置：<code>git config --global --list</code>;</li>\n<li>列出系统配置：<code>git config --system --list</code>;</li>\n</ol>\n</li>\n<li><blockquote>\n<p>其他配置</p>\n</blockquote>\n<ol>\n<li>配置解决冲突时使用哪种差异分析工具，比如要使用 vimdiff：<code>git config --global merge.tool vimdiff</code>;</li>\n<li>配置 git 命令输出为彩色的：<code>git config --global color.ui auto</code>;</li>\n<li>配置 git 使用的文本编辑器：<code>git config --global core.editor vi</code>;</li>\n</ol>\n</li>\n<li><blockquote>\n<p>注：</p>\n</blockquote>\n<ol>\n<li>更改–&gt;重复上述命令</li>\n<li>也可直接修改 <code>C:\\Users\\用户\\.gitconfig</code></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"工作区上的操作命令\"><a href=\"#工作区上的操作命令\" class=\"headerlink\" title=\"工作区上的操作命令\"></a>工作区上的操作命令</h3><h4 id=\"提交步骤\"><a href=\"#提交步骤\" class=\"headerlink\" title=\"提交步骤\"></a>提交步骤</h4><ol>\n<li><p><code>git init</code> 初始化 git 仓库</p>\n<blockquote>\n<blockquote>\n<p>新建仓库</p>\n</blockquote>\n<ol>\n<li>将工作区中的项目文件使用 git 进行管理，即创建一个新的本地仓库：<code>git init</code>；</li>\n<li>从远程 git 仓库复制项目：<code>git clone </code>; 克隆项目时如果想定义新的项目名，可以在 clone 命令后指定新的项目名：<code>git clone git://github.com/wasd/example.git NewName</code>；</li>\n</ol>\n</blockquote>\n</li>\n<li><p><code>git status</code> 查看文件状态</p>\n<blockquote>\n<blockquote>\n<p>查新信息</p>\n</blockquote>\n<ol>\n<li>查询当前工作区所有文件的状态：<code>git status</code>;</li>\n<li>比较工作区中当前文件和暂存区之间的差异，也就是修改之后还没有暂存的内容：git diff；指定文件在工作区和暂存区上差异比较：<code>git diff </code>;</li>\n</ol>\n</blockquote>\n</li>\n<li><p><code>git add 文件/文件列表</code> 提交到暂存区</p>\n<blockquote>\n<blockquote>\n<p>提交</p>\n</blockquote>\n<ol>\n<li>提交工作区所有文件到暂存区：<code>git add .</code></li>\n<li>提交工作区中指定文件到暂存区：<code>git add ...</code>;</li>\n<li>提交工作区中某个文件夹中所有文件到暂存区：<code>git add [dir]</code>;</li>\n</ol>\n</blockquote>\n</li>\n<li><p><code>git commit -m 提交信息</code> 向仓库提交代码</p>\n<blockquote>\n<blockquote>\n<p>提交文件到版本库</p>\n</blockquote>\n<ol>\n<li>将暂存区中的文件提交到本地仓库中，即打上新版本：<code>git commit -m &quot;commit_info&quot;</code>;</li>\n<li>将所有已经使用 git 管理过的文件暂存后一并提交，跳过 add 到暂存区的过程：<code>git commit -a -m &quot;commit_info&quot;</code>;</li>\n<li>提交文件时，发现漏掉几个文件，或者注释写错了，可以撤销上一次提交：<code>git commit --amend</code>;</li>\n</ol>\n</blockquote>\n</li>\n<li><p><code>git log</code> 查看提交记录</p>\n<blockquote>\n<blockquote>\n<p>查看信息</p>\n</blockquote>\n<ol>\n<li>比较暂存区与上一版本的差异：<code>git diff --cached</code>;</li>\n<li>指定文件在暂存区和本地仓库的不同：<code>git diff --cached</code>;</li>\n<li>查看提交历史：git log；参数<code>-p</code>展开每次提交的内容差异，用<code>-2</code>显示最近的两次更新，如<code>git log -p -2</code>;</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h4><ul>\n<li><p>用暂存区中的文件覆盖工作目录中的文件：<code>git checkout -- 文件名</code> 不加 <code>-- 文件名</code>则覆盖全部文件</p>\n</li>\n<li><p>将文件从暂存区中删除：<code>git rm --cached 文件名</code></p>\n</li>\n<li><p>将 git 仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录：<code> git reset --hard commitID</code></p>\n</li>\n<li><blockquote>\n<blockquote>\n<p>撤销</p>\n</blockquote>\n<ol>\n<li>删除工作区文件，并且也从暂存区删除对应文件的记录：<code>git rm </code>;</li>\n<li>从暂存区中删除文件，但是工作区依然还有该文件:<code>git rm --cached </code>;</li>\n<li>取消暂存区已经暂存的文件：<code>git reset HEAD ...</code>;</li>\n<li>撤销上一次对文件的操作：<code>git checkout --</code>。要确定上一次对文件的修改不再需要，如果想保留上一次的修改以备以后继续工作，可以使用 stashing 和分支来处理；</li>\n<li>隐藏当前变更，以便能够切换分支：<code>git stash</code>；</li>\n<li>查看当前所有的储藏：<code>git stash list</code>；</li>\n<li>应用最新的储藏：<code>git stash apply</code>，如果想应用更早的储藏：<code>git stash apply stash@&#123;2&#125;</code>；重新应用被暂存的变更，需要加上<code>--index</code>参数：<code>git stash apply --index</code>;</li>\n<li>使用 apply 命令只是应用储藏，而内容仍然还在栈上，需要移除指定的储藏：<code>git stash drop stash&#123;0&#125;</code>；如果使用 pop 命令不仅可以重新应用储藏，还可以立刻从堆栈中清除：<code>git stash pop</code>;</li>\n<li>在某些情况下，你可能想应用储藏的修改，在进行了一些其他的修改后，又要取消之前所应用储藏的修改。Git 没有提供类似于 stash unapply 的命令，但是可以通过取消该储藏的补丁达到同样的效果：<code>git stash show -p stash@&#123;0&#125; | git apply -R</code>；同样的，如果你沒有指定具体的某个储藏，Git 会选择最近的储藏：<code>git stash show -p | git apply -R</code>；</li>\n</ol>\n<blockquote>\n<p>更新文件</p>\n</blockquote>\n<ol>\n<li>重命名文件，并将已改名文件提交到暂存区：<code>git mv [file-original] [file-renamed]</code>;</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"（二）Git-进阶\"><a href=\"#（二）Git-进阶\" class=\"headerlink\" title=\"（二）Git 进阶\"></a>（二）Git 进阶</h2><h3 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h3><p>生成副本，避免影响开发主线</p>\n<h4 id=\"分支细分\"><a href=\"#分支细分\" class=\"headerlink\" title=\"分支细分\"></a>分支细分</h4><ol>\n<li>主分支（master）：第一次向 git 仓库提交更新记录时自动产生的一个分支。</li>\n<li>开发分支（develop）：作为开发的分支，基于 master 分支创建。</li>\n<li>功能分支（feature）：作为开发具体功能的分支基于开发分支创建。</li>\n</ol>\n<h4 id=\"分支命令\"><a href=\"#分支命令\" class=\"headerlink\" title=\"分支命令\"></a>分支命令</h4><ul>\n<li><code>git branch</code> 查看分支</li>\n<li><code>git branch 分支名称</code> 创建分支</li>\n<li><code>git checkout 分支名称</code> 切换分支</li>\n<li><code>git merge 来源分支</code> 合并分支</li>\n<li><code>git branch -d 分支名称</code> 删除分支（分支合并后才允许被删除）（-D 大写强制删除）<ul>\n<li><code>git push origin :branch-name</code> : 远程仓库同步删除掉的分支</li>\n</ul>\n</li>\n</ul>\n<p>注意：</p>\n<p> 开发分支文件后要 <code>commit</code> 后再切换主分支，否则分支文件会出现在主分支里面。</p>\n<blockquote>\n<blockquote>\n<p>分支管理</p>\n</blockquote>\n<ol>\n<li>创建分支：<code>git branch </code>，如<code>git branch testing</code>；</li>\n<li>从当前所处的分支切换到其他分支：<code>git checkout </code>，如<code>git checkout testing</code>；</li>\n<li>新建并切换到新建分支上：<code>git checkout -b </code>;</li>\n<li>删除分支：<code>git branch -d </code>；</li>\n<li>将当前分支与指定分支进行合并：<code>git merge </code>;</li>\n<li>显示本地仓库的所有分支：<code>git branch</code>;</li>\n<li>查看各个分支最后一个提交对象的信息：<code>git branch -v</code>;</li>\n<li>查看哪些分支已经合并到当前分支：<code>git branch --merged</code>;</li>\n<li>查看当前哪些分支还没有合并到当前分支：<code>git branch --no-merged</code>;</li>\n<li>把远程分支合并到当前分支：<code>git merge /</code>，如<code>git merge origin/serverfix</code>；如果是单线的历史分支不存在任何需要解决的分歧，只是简单的将 HEAD 指针前移，所以这种合并过程可以称为快进（Fast forward），而如果是历史分支是分叉的，会以当前分叉的两个分支作为两个祖先，创建新的提交对象；如果在合并分支时，遇到合并冲突需要人工解决后，再才能提交；</li>\n<li>在远程分支的基础上创建新的本地分支<code>：git checkout -b /</code>，如<code>git checkout -b serverfix origin/serverfix</code>;</li>\n<li>从远程分支 checkout 出来的本地分支，称之为跟踪分支。在跟踪分支上向远程分支上推送内容：<code>git push</code>。该命令会自动判断应该向远程仓库中的哪个分支推送数据；在跟踪分支上合并远程分支：<code>git pull</code>；</li>\n<li>将一个分支里提交的改变移到基底分支上重放一遍：<code>git rebase </code>，如<code>git rebase master server</code>，将特性分支 server 提交的改变在基底分支 master 上重演一遍；使用 rebase 操作最大的好处是像在单个分支上操作的，提交的修改历史也是一根线；如果想把基于一个特性分支上的另一个特性分支变基到其他分支上，可以使用<code>--onto</code>操作：<code>git rebase --onto </code>，如<code>git rebase --onto master server client</code>；使用 rebase 操作应该遵循的原则是：<strong>一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行 rebase 操作</strong>；</li>\n</ol>\n</blockquote>\n<h3 id=\"暂时保存更改\"><a href=\"#暂时保存更改\" class=\"headerlink\" title=\"暂时保存更改\"></a>暂时保存更改</h3><p>git 中可以不提交更改，只提取分支上所有改动并储存，让开发人员得到一个干净的副本，临时转向其它工作。复制到“剪切板”，可以“粘贴“到其它分支。</p>\n<p>场景：</p>\n<ul>\n<li>储存临时改动：<code>git stash</code></li>\n<li>恢复临时改动：<code>git stash pop</code></li>\n</ul>\n<h3 id=\"打标签\"><a href=\"#打标签\" class=\"headerlink\" title=\"打标签\"></a>打标签</h3><blockquote>\n<p>Git 使用的标签有两种类型：<strong>轻量级的（lightweight）和含附注的（annotated）</strong>。轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。</p>\n<ol>\n<li>列出现在所有的标签：<code>git tag</code>;</li>\n<li>使用特定的搜索模式列出符合条件的标签，例如只对 1.4.2 系列的版本感兴趣：<code>git tag -l &quot;v1.4.2.*&quot;</code>;</li>\n<li>创建一个含附注类型的标签，需要加<code>-a</code>参数，如<code>git tag -a v1.4 -m &quot;my version 1.4&quot;</code>;</li>\n<li>使用 git show 命令查看相应标签的版本信息，并连同显示打标签时的提交对象：<code>git show v1.4</code>;</li>\n<li>如果有自己的私钥，可以使用 GPG 来签署标签，只需要在命令中使用<code>-s</code>参数：<code>git tag -s v1.5 -m &quot;my signed 1.5 tag&quot;</code>;</li>\n<li>验证已签署的标签：git tag -v ，如<code>git tag -v v1.5</code>;</li>\n<li>创建一个轻量级标签的话，就直接使用 git tag 命令即可，连<code>-a</code>,<code>-s</code>以及<code>-m</code>选项都不需要，直接给出标签名字即可，如<code>git tag v1.5</code>;</li>\n<li>将标签推送到远程仓库中：git push origin ，如<code>git push origin v1.5</code>；</li>\n<li>将本地所有的标签全部推送到远程仓库中：<code>git push origin --tags</code>;</li>\n</ol>\n</blockquote>\n<h2 id=\"（三）Github\"><a href=\"#（三）Github\" class=\"headerlink\" title=\"（三）Github\"></a>（三）Github</h2><h3 id=\"注册-Github-账号\"><a href=\"#注册-Github-账号\" class=\"headerlink\" title=\"注册 Github 账号\"></a>注册 Github 账号</h3><p>略~</p>\n<h3 id=\"多人协作开发流程\"><a href=\"#多人协作开发流程\" class=\"headerlink\" title=\"多人协作开发流程\"></a>多人协作开发流程</h3><ul>\n<li>A 在自己的计算机中创建本地仓库</li>\n<li>A 在 GitHub 中创建远程仓库</li>\n<li>A 将本地仓库推送到远程仓库</li>\n<li>B 克隆远程仓库到本地进行开发</li>\n<li>B 将本地仓库开发内容推送到远程仓库</li>\n<li>A 将远程仓库中的最新内容拉去本地</li>\n</ul>\n<h3 id=\"创建远程仓库\"><a href=\"#创建远程仓库\" class=\"headerlink\" title=\"创建远程仓库\"></a>创建远程仓库</h3><p><img src=\"/git_notes/20191115154237.png\"></p>\n<h3 id=\"推送到远程仓库\"><a href=\"#推送到远程仓库\" class=\"headerlink\" title=\"推送到远程仓库\"></a>推送到远程仓库</h3><ol>\n<li><p><code>git push 远程仓库地址 分支名称</code></p>\n</li>\n<li><p><code>git push 远程仓库地址别名 分支名称</code></p>\n</li>\n<li><p><code>git push -u 远程仓库地址别名 分支名称</code></p>\n<p><code>-u</code> 记住推送地址和分支，下次只需要输入<code>git push</code></p>\n</li>\n<li><p><code>git remote add 远程仓库地址别名 远程仓库地址</code></p>\n</li>\n<li><p>删除别名：<code>git remote remove 远程仓库地址别名</code></p>\n</li>\n<li><p>第一次提交需要用户名和密码，电脑会记住密码在凭据管理器，第二次就不用了。</p>\n</li>\n<li><blockquote>\n<h3 id=\"本地仓库上的操作\"><a href=\"#本地仓库上的操作\" class=\"headerlink\" title=\"本地仓库上的操作\"></a>本地仓库上的操作</h3><ol>\n<li>查看本地仓库关联的远程仓库：<code>git remote</code>；在克隆完每个远程仓库后，远程仓库默认为<code>origin</code>;加上<code>-v</code>的参数后，会显示远程仓库的<code>url</code>地址；</li>\n<li>添加远程仓库，一般会取一个简短的别名：<code>git remote add [remote-name] [url]</code>，比如：<code>git remote add example git://github.com/example/example.git</code>;</li>\n<li>从远程仓库中抓取本地仓库中没有的更新：<code>git fetch [remote-name]</code>，如<code>git fetch origin</code>;使用 fetch 只是将远端数据拉到本地仓库，并不自动合并到当前工作分支，只能人工合并。如果设置了某个分支关联到远程仓库的某个分支的话，可以使用<code>git pull</code>来拉去远程分支的数据，然后将远端分支自动合并到本地仓库中的当前分支；</li>\n<li>将本地仓库某分支推送到远程仓库上：<code>git push [remote-name] [branch-name]</code>，如<code>git push origin master</code>；如果想将本地分支推送到远程仓库的不同名分支：<code>git push :</code>，如<code>git push origin serverfix:awesomebranch</code>;如果想删除远程分支：<code>git push [romote-name] :</code>，如<code>git push origin :serverfix</code>。这里省略了本地分支，也就相当于将空白内容推送给远程分支，就等于删掉了远程分支。</li>\n<li>查看远程仓库的详细信息：<code>git remote show origin</code>；</li>\n<li>修改某个远程仓库在本地的简称：<code>git remote rename [old-name] [new-name]</code>，如<code>git remote rename origin org</code>；</li>\n<li>移除远程仓库：<code>git remote rm [remote-name]</code>；</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"拉取仓库\"><a href=\"#拉取仓库\" class=\"headerlink\" title=\"拉取仓库\"></a>拉取仓库</h3><h4 id=\"克隆仓库\"><a href=\"#克隆仓库\" class=\"headerlink\" title=\"克隆仓库\"></a>克隆仓库</h4><ul>\n<li>克隆远程仓库到本地：<code>git clone 仓库地址</code></li>\n</ul>\n<h4 id=\"拉取远程仓库中最新版本\"><a href=\"#拉取远程仓库中最新版本\" class=\"headerlink\" title=\"拉取远程仓库中最新版本\"></a>拉取远程仓库中最新版本</h4><ul>\n<li>拉取远程仓库最新版本到本地：<code> git pull 远程仓库地址 分支名称</code></li>\n</ul>\n<h3 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h3><p>多人开发同一个项目时，如果两个人修改了同一个文件同一个地方</p>\n<ol>\n<li><code> git pull</code></li>\n<li>手动解决冲突</li>\n<li><code> git push</code></li>\n</ol>\n<p><img src=\"/git_notes/20191115164339.png\"></p>\n<h3 id=\"跨团队协作\"><a href=\"#跨团队协作\" class=\"headerlink\" title=\"跨团队协作\"></a>跨团队协作</h3><ol>\n<li><code> fork</code>到自己的远程仓库</li>\n<li><code> clone</code>到本地进行修改</li>\n<li><code> push</code>到远程仓库</li>\n<li><code> pull request</code>发送给原作者</li>\n<li>原作者查看<code>commit</code> 审核</li>\n<li>原作者 <code> merge pull request</code></li>\n</ol>\n<h3 id=\"SSH-免密登录\"><a href=\"#SSH-免密登录\" class=\"headerlink\" title=\"SSH 免密登录\"></a>SSH 免密登录</h3><ol>\n<li><p>生成密钥：<code> ssh-keygen</code></p>\n<p>密匙储存目录：<code> C:\\User\\用户\\.ssh</code></p>\n<p>公钥名称：<code> id_rsa.pub</code></p>\n<p>私钥名称：<code> id_rsa</code></p>\n</li>\n<li><p>Github 添加公钥</p>\n</li>\n</ol>\n<p><img src=\"/git_notes/20191115165957.png\"></p>\n<ol start=\"3\">\n<li><p>复制 SSH 地址：</p>\n<p><img src=\"/git_notes/20191115170348.png\"></p>\n</li>\n<li><p>设置 ssh 别名：<code>$ git remote add origin_ssh SSH地址 </code></p>\n</li>\n<li><p>远程推送：<code> $ git push origin_ssh master</code></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000013154540\">ubuntu git 环境搭建以及通过 SSH 连接 Github（免密码）配置</a></p>\n</li>\n</ol>\n<h3 id=\"Git-忽略清单\"><a href=\"#Git-忽略清单\" class=\"headerlink\" title=\"Git 忽略清单\"></a>Git 忽略清单</h3><p>将不需要的文件名字添加到此文件中，执行 git 命令时就会忽略这些文件。</p>\n<ul>\n<li><p>git 忽略清单文件名称：<code>.gitignore</code></p>\n</li>\n<li><p>将工作目录所有文件添加到缓存区：<code> git add .</code></p>\n</li>\n<li><p>例子：</p>\n<pre><code class=\"gitignore\"># 此为注释 – 将被 Git 忽略\n# 忽略所有 .a 结尾的文件\n*.a\n# 但 lib.a 除外\n!lib.a\n# 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\n/TODO\n# 忽略 build/ 目录下的所有文件\nbuild/\n# 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\ndoc/*.txt\n# 忽略 doc/ 目录下所有扩展名为 txt 的文件\ndoc/**/*.txt\n</code></pre>\n</li>\n</ul>\n<h3 id=\"为仓库添加说明\"><a href=\"#为仓库添加说明\" class=\"headerlink\" title=\"为仓库添加说明\"></a>为仓库添加说明</h3><p>在仓库根目录添加<code>readme.md</code>文件即可</p>\n<h2 id=\"（四）使用-SourceTree-管理-Git\"><a href=\"#（四）使用-SourceTree-管理-Git\" class=\"headerlink\" title=\"（四）使用 SourceTree 管理 Git\"></a>（四）使用 SourceTree 管理 Git</h2><blockquote>\n<p><a href=\"https://blog.csdn.net/u012230055/article/details/64125268\">https://blog.csdn.net/u012230055/article/details/64125268</a></p>\n</blockquote>\n<h3 id=\"一-、SourceTree-简介\"><a href=\"#一-、SourceTree-简介\" class=\"headerlink\" title=\"一 、SourceTree 简介\"></a>一 、SourceTree 简介</h3><p>SourceTree 是 Windows 和 Mac OS X 下免费的 <a href=\"http://lib.csdn.net/base/git\">Git</a> 和 Hg 客户端，拥有可视化界面，容易上手操作。同时它也是 Mercurial 和 Subversion<a href=\"http://lib.csdn.net/base/git\">版本控制</a>系统工具。支持创建、提交、clone、push、pull 和 merge 等操作。</p>\n<h3 id=\"二、下载安装-SourceTree-步骤\"><a href=\"#二、下载安装-SourceTree-步骤\" class=\"headerlink\" title=\"二、下载安装 SourceTree 步骤\"></a>二、下载安装 SourceTree 步骤</h3><ol>\n<li><p>下载地址：<a href=\"https://www.sourcetreeapp.com/%EF%BC%8C%E8%AF%A5%E7%89%88%E6%9C%AC%E6%98%AF%E4%B8%AD%E6%96%87%E7%9A%84%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%AE%8C%E6%88%90%E5%90%8E%E5%8F%AF%E4%BB%A5%E8%BF%9B%E8%A1%8C%E5%AE%89%E8%A3%85%E3%80%82\">https://www.sourcetreeapp.com/，该版本是中文的，下载完成后可以进行安装。</a></p>\n</li>\n<li><p>点击“install”，安装完成后，打开 sourcetree，点击“user an existing account”</p>\n</li>\n<li><p>注意：使用谷歌帐号登录即可，前提是你必须可以上谷歌才可以。</p>\n</li>\n<li><p>直接点击“跳过初始设置”即可。</p>\n</li>\n<li><p>登录注册成功后，弹出设置 puttykey 的界面，点击“取消”即可。</p>\n</li>\n<li><p>点击“取消”按钮，弹出如下提示框：<br><img src=\"https://img-blog.csdn.net/20170320145556338?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>此时进入到 sourcetree 的主界面，现在就可以使用 sourcetree 啦。</p>\n</li>\n</ol>\n<h3 id=\"三、集成文件对比插件\"><a href=\"#三、集成文件对比插件\" class=\"headerlink\" title=\"三、集成文件对比插件\"></a>三、集成文件对比插件</h3><p>安装对比插件</p>\n<p>Sourcetree 中集成 Beyond Compare 4，当文件冲突时可以很好的解决冲突。安装过程很简单，这里不再详述。</p>\n<p>Sourcetree 中配置 Beyond Compare 4</p>\n<p>菜单栏，“工具”——“选项”，如图所示：<br><img src=\"https://img-blog.csdn.net/20170320145615677?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>选择“比较”选项卡，然后将红色方框处的内容修改为如图所示：<br><img src=\"https://img-blog.csdn.net/20170320145628604?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h3 id=\"四、SourceTree-基本使用\"><a href=\"#四、SourceTree-基本使用\" class=\"headerlink\" title=\"四、SourceTree 基本使用\"></a>四、SourceTree 基本使用</h3><h4 id=\"（1）克隆\"><a href=\"#（1）克隆\" class=\"headerlink\" title=\"（1）克隆\"></a>（1）克隆</h4><p>点击克隆按钮，克隆项目：<br>既可以是本地已有的 git 项目，也可以是远程目录中的项目，<br><img src=\"https://img-blog.csdn.net/20170320145642692?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 本地存在的 git 项目，<br> 获取项目克隆地址，点击克隆按钮，如图所示：<br><img src=\"https://img-blog.csdn.net/20170320145732677?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 1、克隆项目的路径<br> 2、克隆项目存放的位置<br> 3、如果要下载特定的分支，可以按分支进行下载</p>\n<h4 id=\"（2）配置忽略文件\"><a href=\"#（2）配置忽略文件\" class=\"headerlink\" title=\"（2）配置忽略文件\"></a>（2）配置忽略文件</h4><p> 利用.gitignore 过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。<br> .gitignore 文件只对还没有加入版本管理的文件起作用，如果之前已经用 git 把这些文件纳入了版本库，就不起作用了<br> 使用 sourcetree 添加忽略文件的方法：<br> 正常情况下，管理员创建项目后需要直接将忽略文件创建好。创建方法如图：<br><img src=\"https://img-blog.csdn.net/20170320150016000?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>按照如上步骤操作即可编辑冲突文件。<br>冲突文件规则：<br>忽略文件夹（如：bin、obj）：<br>obj&#x2F;<br>bin&#x2F;<br>某目录下的所有.txt 文件，<br>obj&#x2F;*.txt<br>开发的过程中可能遇到一些忽略文件中未添加的文件，此时需要开发者自行添加忽略文件，添加方法如下：<br>之前已经介绍过未进行版本控制的或者受版本控制的文件，在 sourcetree 的“文件状态” 标签中查找，如图所示：<br><img src=\"https://img-blog.csdn.net/20170320150046235?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>鼠标右键要忽略的文件，点击“忽略”，选择忽略的模式，即可将文件进行忽略，如图所示：<br><img src=\"https://img-blog.csdn.net/20170320150104001?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h4 id=\"（3）tag-使用方法\"><a href=\"#（3）tag-使用方法\" class=\"headerlink\" title=\"（3）tag 使用方法\"></a>（3）tag 使用方法</h4><p> 打 tag 的目的是在代码的主要节点处有个标记，方便下次修改代码时可以准确的找到想要找的代码。而无需看着日志文件逐一回忆要找的代码位置。<br><img src=\"https://img-blog.csdn.net/20170320150324493?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h4 id=\"（4）分支管理与使用\"><a href=\"#（4）分支管理与使用\" class=\"headerlink\" title=\"（4）分支管理与使用\"></a>（4）分支管理与使用</h4><p> 使用 sourcetree 创建和使用分支是很方便的，不像之前使用的 TortoiseGit 只能在当前代码处创建分支，使用 sourcetree 的方便之处：<br> 1、可以选择特定的某版本创建分支<br> 2、代码检出时可以按照分支进行检出<br> 3、分支的添加很简单<br>分支添加：<br><img src=\"https://img-blog.csdn.net/20170320150335144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 1、可以在当前的版本下创建分支<br> 2、选择指定的提交创建分支<br> 3、点击“创建分支”<br>分支提交到服务器：<br> 在 sourcetree 右侧内容中的分支列表中，选中创建的分支，右键提交，如图所示：<br><img src=\"https://img-blog.csdn.net/20170320150351024?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>分支合并：<br>1、分支合并功能和分支添加功能类似，这里不再详述，需要注意的是首先要切换到被合并的分支上，再进行合并操作。<br>2、分支合并时，可以选择具体的某提交进行合并，同时主分支可以合并到子分支；子分支可以合并到主分支；子分支之间也可以进行合并。</p>\n<h4 id=\"（5）GIT-与-SVN-同步\"><a href=\"#（5）GIT-与-SVN-同步\" class=\"headerlink\" title=\"（5）GIT 与 SVN 同步\"></a>（5）GIT 与 SVN 同步</h4><p> git svn 工具集在当前不得不使用 Subversion 服务器或者开发环境要求使用 Subversion 服务器的时候格外有用。不妨把它看成一个跛脚的 Git，在实际使用中不推荐这样使用 GIT。</p>\n<h4 id=\"（6）基本步骤\"><a href=\"#（6）基本步骤\" class=\"headerlink\" title=\"（6）基本步骤\"></a>（6）基本步骤</h4><p>提交、拉取和推送<br>提交：<br>项目提交是为了维护本地版本库，如果本地有未提交的内容，则不允许拉取和推送；如图所示区域有内容时，则代表本地未提交的内容：<br><img src=\"https://img-blog.csdn.net/20170320150734479?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 点击 Stage All，填写提交信息既可以将本地内容（暂存区）提交到本地版本库，如图所示：<br><img src=\"https://img-blog.csdn.net/20170320150743869?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 1、将未暂存的文件进行暂存，如果有些文件不需要暂存，则可以进行删除，选中文件，右键“移除”即可。<br> 拉取：从远程将代码进行更新，相当于 SVN 的“更新”<br> 推送：将代码提交到远程。</p>\n<h4 id=\"（7）解决冲突\"><a href=\"#（7）解决冲突\" class=\"headerlink\" title=\"（7）解决冲突\"></a>（7）解决冲突</h4><p> 简单介绍<br><img src=\"https://img-blog.csdn.net/20170320150800182?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 1、冲突文件的符号为“感叹号”<br> 2、选中“冲突文件”，右键——点击”解决冲突“——点击”打开外部合并工具“（备注：才操作时已经安装外部合并工具，同时在 sourcetree 中已经进行配置，详见”集成文件对比插件“）</p>\n<p> 冲突界面</p>\n<p> 冲突解决界面如下：可以根据需要选择内容显示类型，只”显示更改“，”显示冲突“或者”全部“<br><img src=\"https://img-blog.csdn.net/20170320150910886?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 解决冲突</p>\n<p> 方法一：在相关的版本处，选中”冲突行”，合并区默认处于合并位置，鼠标右键，选择最终冲突地方留下的内容，如图：<br><img src=\"https://img-blog.csdn.net/20170320151133515?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 解决冲突之后效果图：<br><img src=\"https://img-blog.csdn.net/20170320151150544?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 1、冲突图标由”感叹号”——“省略号”。<br> 2、右侧显示修改后的代码进行查看。<br> 3、同时修改的冲突文件有相应的备份，大家可以下载到本地，方便冲突有问题再次修改文件。<br>备注：该文件下载之后请将版本库中的该文件删除，不要上传到版本库中。<br> 4、修改完冲突之后，需要再次提交，推送。大家养成提交时，提交有效的日志信息，不要将比如：123 之类的信息推送到服务器中。<br> 方法二：如果冲突非常少，可以直接在右侧栏中解决冲突，如图所示：<br><img src=\"https://img-blog.csdn.net/20170320151202374?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 1、点击未暂存区域的冲突文件。<br> 2、右侧列表中出现冲突的内容。<br> 3、选择冲突内容，解决冲突，如图所示：<br><img src=\"https://img-blog.csdn.net/20170320151244766?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 暂存行：表示保留该内容<br> 丢弃行：表示删除该内容<br> 备注：区分于第一种方式，使用第一种方法解决时，不要点击”未暂存文件”,否则可能无法打开冲突文件</p>\n<h4 id=\"（8）版本回退\"><a href=\"#（8）版本回退\" class=\"headerlink\" title=\"（8）版本回退\"></a>（8）版本回退</h4><p> 原则上，代码推送之前要保证本地的代码可运行，不要将不可运行或者有问题的代码推送到服务器上，如果由于误操作，将代码推送到了远程，想重新修改上传代码，此时，需要将版本进行回退，回 退方法如图：<br><img src=\"https://img-blog.csdn.net/20170320151400612?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 1、切换到日志&#x2F;历史标签<br> 2、选择要恢复到的版本，如图蓝色位置<br> 3、鼠标右键，选择“重置当前分支到此次提交”<br> 4、选择”重置模式”，如图所示<br><img src=\"https://img-blog.csdn.net/20170320151415795?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 5、弹出框中选择”Yes”<br><img src=\"https://img-blog.csdn.net/20170320151427565?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h4 id=\"（9）相关提示信息含义\"><a href=\"#（9）相关提示信息含义\" class=\"headerlink\" title=\"（9）相关提示信息含义\"></a>（9）相关提示信息含义</h4><p> 冲突信息<br><img src=\"https://img-blog.csdn.net/20170320151439378?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p> 先更新信息<br><img src=\"https://img-blog.csdn.net/20170320151450207?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br> 小窍门：<br><img src=\"https://img-blog.csdn.net/20170320151502061?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjIzMDA1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br> 如果推送时，拉取右上方显示数字，则需要先拉取再推送。</p>\n<h3 id=\"五、SourceTree-amp-Git-部分名词解释\"><a href=\"#五、SourceTree-amp-Git-部分名词解释\" class=\"headerlink\" title=\"五、SourceTree&amp;Git 部分名词解释\"></a>五、SourceTree&amp;Git 部分名词解释</h3><p>**克隆(clone)**：从远程仓库 URL 加载创建一个与远程仓库一样的本地仓库<br>**提交(commit)**：将暂存文件上传到本地仓库（我们在 Finder 中对本地仓库做修改后一般都得先提交一次，再推送）<br>**检出(checkout)**：切换不同分支<br><strong>添加（add）</strong>：添加文件到缓存区<br><strong>移除（remove）</strong>：移除文件至缓存区<br>**暂存(git stash)**：保存工作现场<br>**重置(reset)**：回到最近添加(add)&#x2F;提交(commit)状态<br>**合并(merge)**：将多个同名文件合并为一个文件，该文件包含多个同名文件的所有内容，相同内容抵消<br>**抓取(fetch)**：从远程仓库获取信息并同步至本地仓库<br>**拉取(pull)**：从远程仓库获取信息并同步至本地仓库，并且自动执行合并（merge）操作，即 pull&#x3D;fetch+merge<br>**推送(push)**：将本地仓库同步至远程仓库，一般推送（push）前先拉取（pull）一次，确保一致<br>**分支(branch)**：创建&#x2F;修改&#x2F;删除分枝<br><strong>标签(tag)</strong>:给项目增添标签<br><strong>工作流(Git Flow)</strong>:团队工作时，每个人创建属于自己的分枝（branch），确定无误后提交到 master 分枝<br><strong>终端(terminal)</strong>:可以输入 git 命令行</p>\n<h2 id=\"Git-设置，查看，取消代理\"><a href=\"#Git-设置，查看，取消代理\" class=\"headerlink\" title=\"Git 设置，查看，取消代理\"></a>Git 设置，查看，取消代理</h2><pre><code class=\"bash\"># 设置代理\ngit config --global http.proxy &#39;http://127.0.0.1:7890&#39; # 这是设置的默认端口 7890\ngit config --global https.proxy &#39;http://127.0.0.1:7890&#39;\n# 查看代理\ngit config --global --get http.proxy\ngit config --global --get https.proxy\n# 取消代理\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n</code></pre>\n"},{"title":"C++关键字","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-03-11T01:59:07.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## inline\n\n定义**内联函数**，该关键字是基于定义的。如果只在函数声明时给出inline，则函数不会被认为是内联函数，所以必须在函数定义的地方也加上inline。\n\n## const\n\n定义常量成员，包括const数据成员和const成员函数，const数据成员必须也只能通过构造函数的初始化列表进行初始化。 \nconst成员函数只能访问类的成员，不能进行修改，如果需要修改，则引入`mutable`关键字。\n\n1. const修饰普通变量（两种写法都类似）：\n\n   ```c++\n   const TYPE value; \n   TYPE const value;\n   ```\n\n2. const修饰指针 \n\n   指针本身是常量不可变：`(char*) const pContent;` \n   指针所指向的内容是常量不可变：`const (char) *pContent;`或`(char) const *pContent;` \n   两者都不可变：`const char* const pContent;`\n\n3. const修饰函数 \n\n   const修饰函数参数是它最广泛的一种用途，它表示在函数体中不能修改参数的值(包括参数本身的值或者参数其中包含的值)\n\n4. const修饰类对象/对象指针/对象引用 \n\n   const修饰类对象表示该对象为常量对象，其中的任何成员都不能被修改。对于对象指针和对象引用也是一样。const修饰的对象，该对象的任何非const成员函数都不能被调用，因为任何非const成员函数会有修改成员变量的企图。\n\n5. const修饰数据成员 \n\n   const数据成员只在某个对象生存期内是常量，而对于整个类而言却是可变的。因为类可以创建多个对象，不同的对象其const数据成员的值可以不同。所以不能在类声明中初始化const数据成员，因为类的对象未被创建时，编译器不知道const 数据成员的值是什么。\n   \n6. const修饰成员函数\n\n   const修饰类的成员函数，用const修饰的成员函数不能改变对象的成员变量。一般把const写在成员函数的最后。\n\n## static\n\n声明静态成员，包括静态数据成员和静态成员函数，它们被类的所有对象共享，静态数据成员在使用前必须初始化，而静态成员函数只能访问静态数据成员，不能访问非静态数据成员，因为该函数不含有this指针。、\n\n写在class内的东西都是声明而不是定义，因此对于静态成员需要在类外面给出其定义。静态成员在初始化时不能加static关键字，因为加了static关键字表明该变量只在当前文件内访问，而类设计时类中的成员变量是可能在其他文件中被访问的，两者相悖，因此这里不能加static关键字。\n\n当静态成员为public时对其的访问可用对象名加.符号进行访问，也可以用类名加：：作用域解析运算符进行访问。\n\n1. 面向过程的static关键字 \n   \n   （1）静态全局变量： \n全局变量前，加上关键字static，该变量就被定义成为一个静态全局变量。\n\t\n\t- 1、该变量在全局数据区分配内存；\n\t- 2、未经初始化的静态全局变量会被程序自动初始化为0；\n\t- 3、静态全局变量在声明它的整个文件都是可见的，而在文件之外是不可见的。其它文件中可以定义相同名字的变量，不会发生冲突。定义全局变量就可以实现变量在文件中的共享。\n\n   （2）静态局部变量： \n   在局部变量前，加上关键字static，该变量就被定义成为一个静态局部变量。 \n   静态局部变量保存在全局数据区，而不是保存在栈中，每次的值保持到下一次函数调用，直到下次赋新值。 \n   静态局部变量有以下特点：\n   \n   - 1、该变量在全局数据区分配内存；\n   - 2、静态局部变量在程序执行到该对象的声明处时被首次初始化，即以后的函数调用**不再进行初始化(跳过 `static int a = 4;`这一句，后面的赋值`a = 5`照常执行)**；\n   - 3、静态局部变量一般在声明处初始化，如果没有显式初始化，程序自动初始化为0；\n   - 4、它始终驻留在全局数据区，直到程序运行结束。但其作用域为局部作用域，当定义它的函数或语句块结束时，其作用域随之结束\n   \n   （3）静态函数：  \n   在函数的返回类型前加上static关键字，函数即被定义为静态函数。静态函数与普通函数不同，它只能在声明它的文件当中可见，不能被其它文件使用。其它文件中可以定义相同名字的函数，不会发生冲突。\n\n2. 面向对象的static关键字 \n（1）静态数据成员 \n在类内数据成员的声明前加上关键字static，该数据成员就是类内的静态数据成员。 \n对于非静态数据成员，每个类对象都有自己的拷贝。而静态数据成员被当作是类的成员。无论这个类的对象被定义了多少个，静态数据成员在程序中也只有一份拷贝，由该类型的所有对象共享访问。静态函数可以访问类的静态成员变量，且只能访问静态成员变量。调用时可以使用对象名加.符号进行调用，也可以使用类名加：：作用于解析运算符进行调用。因此静态函数中不能使用this指针访问静态成员，因为当使用：：进行**调用静态函数时，此时没有传入this指针，所以它访问的数据都不是自己的，而是类共有的，这个数据只能是类成员变量，即静态数据了。**\n\n- 1、对该类的多个对象来说，静态数据成员只分配一次内存，供所有对象共用。\n- 2、静态数据成员存储在全局数据区。静态数据成员定义时要分配空间，所以不能在类声明中定义。\n- 3、静态数据成员和普通数据成员一样遵从public,protected,private访问规则。\n- 4、静态数据成员在全局数据区分配内存，属于本类的所有对象共享，所以，它不属于特定的类对象。\n- 5、在没有产生类对象时其作用域就可见，即在没有产生类的实例时，我们就可以操作它；\n- 6、静态数据成员初始化与一般数据成员初始化不同。静态数据成员初始化的格式为： `＜数据类型＞＜类名＞::＜静态数据成员名＞=＜值＞`（前面不加`static`,否则就被锁定只能在这个文件使用了，这不是类想要的结果）\n- 7、类的静态数据成员有两种访问形式：`＜类对象名＞.＜静态数据成员名＞ 或 ＜类类型名＞::＜静态数据成员名＞`\n- 8、静态数据成员没有进入程序的全局名字空间，因此不存在与程序中其它全局名字冲突的可能性。\n\n（2）静态成员函数 \n与静态数据成员一样，我们也可以创建一个静态成员函数，它为类的全部服务而不是为某一个类的具体对象服务。静态成员函数与静态数据成员一样，都是类的内部实现，属于类定义的一部分。 \n普通的成员函数一般都隐含了一个this指针，this指针指向类的对象本身，因为普通成员函数总是具体的属于某个类的具体对象的。通常情况下，this是缺省的。但是与普通函数相比，静态成员函数由于不是与任何的对象相联系，因此它不具有this指针。从这个意义上讲，它无法访问属于类对象的非静态数据成员，也无法访问非静态成员函数，它只能调用其余的静态成员函数。下面举个静态成员函数的例子。 \n关于静态成员函数，可以总结为以下几点：\n\n- 1、出现在类体外的函数定义不能指定关键字static；\n- 2、静态成员之间可以相互访问，包括静态成员函数访问静态数据成员和访问静态成员函数；\n- 3、非静态成员函数可以任意地访问静态成员函数和静态数据成员；\n- 4、静态成员函数不能访问非静态成员函数和非静态数据成员；\n- 5、由于没有this指针的额外开销，因此静态成员函数与类的全局函数相比速度上会有少许的增长；\n- 6、调用静态成员函数，可以用成员访问操作符来调用静态成员函数，也可以直接使用如下格式： `＜类名＞::＜静态成员函数名＞（＜参数表＞）`\n\n## virtual\n\n声明虚函数，用于实现多态，该关键字是基于声明的。 \n所谓虚函数，虚就虚在“推迟联编”或者“动态联编”上，一个类函数的调用并不是在编译时刻被确定的，而是在运行时刻被确定的。 \n由于编写代码的时候并不能确定被调用的是基类的函数还是哪个派生类的函数，所以被称为“虚”函数。只要在基类中已声明为virtual，这里即使不使用virtual关键字，默认也是虚函数。同样，如果还有从子类派生的子类，对应的成员函数也是虚函数。\n\n1. 虚函数 \n虚函数只能借助于指针或者引用来达到多态的效果 \n通过这些手段，编译器在看到一个虚函数调用的时候，就将会在运行时刻决定调用哪个函数。虚函数必须要被定义。\n\n2. 虚析构函数 \n析构函数也可以是虚的，甚至是纯虚的。当一个类打算被用作其它类的基类时，它的析构函数必须是虚的。在实现多态时，当用基类操作派生类，在析构时防止只析构基类而不析构派生类的状况发生。而直接用继承类的指针去操作继承类的成员，却不会出现这种情况。\n\n3. 纯虚函数 \n如下声明表示一个函数为纯虚函数（纯虚函数也可以有定义）（如果一个类里面有一个或多个纯虚函数，这个类就是抽象类）。纯虚函数用来规范派生类的行为，实际上就是所谓的“接口”。它告诉使用者，我的派生类都会有这个函数。而试图创建一个抽象基类的独立类对象会导致编译时刻错误。 \n`virtual void foo()=0; // =0标志一个虚函数为纯虚函数`\n\n4. 构造函数和析构函数中的虚函数调用 \n一个类的虚函数在它自己的构造函数和析构函数中被调用的时候，它们就变成普通函数了。也就是说不能在构造函数和析构函数中让自己“多态”。这是因为派生类对象中构造函数的调用顺序是，先调用基类的构造函数，然后是派生类的构造函数。在基类析构函数中也是如此。\n\n5. 虚函数与纯虚函数的区别\n\n- 虚函数和纯虚函数可以定义在同一个类中，含有纯虚函数的类被称为抽象类，而只含有虚函数的类不能被称为抽象类。\n- 虚函数可以被直接使用（必须被定义），也可以被子类重载以后以多态的形式调用，而纯虚函数必须在子类中实现该函数才可以使用，因为纯虚函数在基类只有声明而没有定义。\n- 虚函数和纯虚函数都可以在子类中被重载，以多态的形式被调用。\n- 虚函数和纯虚函数通常存在于抽象基类之中，被继承的子类重载，目的是提供一个统一的接口。\n- 定义了纯虚函数的类称为抽象类，抽象类不能被实例化。\n\n## friend\n\n声明友元函数和友元类，该关键字也是基于声明的。 \n采用类的机制后实现了数据的隐藏与封装，类的数据成员一般定义为私有成员，成员函数一般定义为公有的，依此提供类与外界间的通信接口。\n\n1. 友元函数 \n有时需要定义一些函数，这些函数不是类的一部分（注意友元函数不是类的一部分），但又需要频繁地访问类的数据成员，这时可以将这些函数定义为该类的友元函数。 \n友元函数是可以直接访问类的私有成员的非成员函数。它是定义在类外的普通函数，它不属于任何类，但需要在类的定义中加以声明，声明时只需在友元的名称前加上关键字friend，其格式如下： \n`friend 类型 函数名(形式参数);`\n\n- 友元函数的声明可以放在类的私有部分，也可以放在公有部分，它们是没有区别的，都说明是该类的一个友元函数。\n- 一个函数可以是多个类的友元函数，只需要在各个类中分别声明。友元函数的调用与一般函数的调用方式和原理一致。\n- 友元函数并不是类的成员函数，因此在类外定义的时候不能加上`class::function name`\n\n2.友元类 \n除了友元函数外，还有友元类，两者统称为友元。友元的作用是提高了程序的运行效率（即减少了类型检查和安全性检查等都需要时间开销），但它破坏了类的封装性和隐藏性，使得非成员函数可以访问类的私有成员。同友元函数一样，其也需要在类中加上关键字friend声明。 \n友元类的所有成员函数都是类的友元函数，能存取类的私有成员和保护成员。\n\n- 友元关系不能被继承。\n- 友元关系是单向的，不具有交换性。若类B是类A的友元，类A不一定是类B的友元，要看在类中是否有相应的声明。\n- 友元关系不具有传递性。若类B是类A的友元，类C是B的友元，类C不一定是类A的友元，同样要看类中是否有相应的申明。\n\n## *_cast\n\n显式类型转换，C++延续了C风格的强制类型转换的语法。dynamic_cast是动态的，需要运行时支持；其它都是静态检查，相比C风格的类型转换更加细化，增强了类型安全性。C++支持四种关键字对不同形式的类型转换进行分别处理。使用格式： \n`转换关键字<类型>(表达式)`\n\n1、`static_cast`和C风格类型转换功能完全相同，它属于在编译时期静态的类型转换。如果把一个double类型转换为整形，形式如下： \n`static_cast<int>(0.1);` \n`static_cast`功能有所限制，比如不能转化struct类型到int，不能转化指针到double等。另外，它不能在转换中消除const和volatile属性。\n\n运算符 **`static_cast`** **可用于将指向基类的指针转换为指向派生类的指针等操作**。 此类转换并非始终安全。\n\n在下面的示例中，因为 `D* pd2 = static_cast<D*>(pb);` 可能有不在 `D` 内的字段和方法，所以行 `B` 不安全。 但是，因为 `B* pb2 = static_cast<B*>(pd);` 始终包含所有 `D`，所以行 `B` 是安全的转换。\n\n```c++\n// static_cast_Operator.cpp\n// compile with: /LD\nclass B {};\n\nclass D : public B {};\n\nvoid f(B* pb, D* pd) {\n   D* pd2 = static_cast<D*>(pb);   // Not safe, D can have fields\n                                   // and methods that are not in B.\n\n   B* pb2 = static_cast<B*>(pd);   // Safe conversion, D always\n                                   // contains all of B.\n}\n```\n\n与 [dynamic_cast相反](https://docs.microsoft.com/zh-cn/cpp/cpp/dynamic-cast-operator?view=msvc-170)，不会对 的转换进行运行时 检查 `pb`。 由 `pb` 指向的对象可能不是 `D` 类型的对象，在这种情况下使用 `*pd2` 会是灾难性的。 例如，调用 `D` 类（而非 `B` 类）的成员函数可能会导致访问冲突\n\n2、const_cast用于消除引用或者指针的const或者volatile属性。 \n`const int &ci=100;` \n`int &i=const_cast<int&>(ci);` \n通过这种方式，ci引用的内存单元虽然无法通过修改ci改变，但是可以修改i改变内存的值。这里是把const属性消除，这里想多说一点的是把const加上的问题。\n\n3、`dynamic_cast`一般出现在类到子类或兄弟类的转换，并要求基类有虚函数。而且它能提供转换后的结果和状态，一旦转换失败则返回空指针。如果没有继承关系的转换一般使用`static_cast`。\n\n4、`reinterpret_casts`一般用作函数指针的转换，而且使用它的代码可移植性很差，因为无法确定编译器的函数调用方式等。有可能会导致函数调用出错，一般不常用。\n\n## explicit\n\nexplicit关键字只能用于修饰只有一个参数的类构造函数，它的作用是表明该构造函数是显示的，而非隐式的，跟它相对应的另一个关键字是implicit，意思是隐藏的，类构造函数默认情况下即声明为implicit(隐式)。\n\nexplicit关键字只对有一个参数的类构造函数有效，如果类构造函数参数大于或等于两个时，是不会产生隐式转换的，所以explicit关键字也就无效了，而除了第一个参数以外的其他参数都有默认值的时候，explicit关键字依然有效。\n\n除非有心利用，隐式转换常常带来程序逻辑的错误，而且这种错误一旦发生是很难察觉的。原则上应该在所有的构造函数前加explicit关键字，当你有心利用隐式转换的时候再去解除explicit，这样可以大大减少错误的发生。\n\n隐式转换的含义：在C++中，如果的构造函数只有一个参数时，那么在编译的时候就会有一个缺省的转换操作：将该构造函数对应数据类型的数据转换为该类对象。也就是说`CxString string2 = 10;`这段代码，编译器自动将整型转换为CxString类对象，实际上等同于`CxString string2(10);`\n\n## extern\n\nextern意为“外来的”，是存储类声明修饰符。其有两个作用：\n\n- 当它与”C”一起连用时，如: `extern \"C\" void fun(int a, int b);`则告诉编译器在编译fun这个函数名时按着C的规则去翻译相应的函数名而不是C++的，C++的规则在翻译这个函数名时会把fun这个名字变得面目全非，可能是`fun@aBc_int_int#%$`也可能是别的，这要看编译器的”脾气”了(不同的编译器采用的方法不一样)，主要是因为C++支持函数的重载。\n- 当extern不与”C”在一起修饰变量或函数时，如在头文件中`: extern int g_Int;`它的作用就是声明函数或全局变量的作用范围的关键字，其声明的函数和变量可以在本模块引用其他模块中的定义，记住它是一个声明不是定义，仅仅是暗示这个函数可能在别的源文件里定义，没有其它作用。这样的用处还是有的，就是在程序中取代`include “*.h”`来声明函数，在一些复杂的项目中，我比较习惯在所有的函数声明前添加extern修饰。\n\n1、extern 和 static \n（1）extern 表明该变量在别的地方已经定义过了，在这里要使用那个变量。 \n（2）static 表示静态的变量，分配内存的时候，存储在静态区，不存储在栈上面。 \nstatic 作用范围是内部连接的关系, 和extern有点相反。static与extern是一对“水火不容”的家伙，也就是说extern和static不能同时修饰一个变量。\n\n2、extern 和const \nC++中const修饰的全局常量据有跟static相同的特性，即它们只能作用于本编译模块中，但是const可以与extern连用来声明该常量可以作用于其他编译模块中, 如`extern const char g_str[];`","source":"_posts/C关键字.md","raw":"---\ntitle: C++关键字\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-03-11 09:59:07\npassword:\nsummary:\ntags:\ncategories:\nkeywords:\ndescription:\n---\n\n## inline\n\n定义**内联函数**，该关键字是基于定义的。如果只在函数声明时给出inline，则函数不会被认为是内联函数，所以必须在函数定义的地方也加上inline。\n\n## const\n\n定义常量成员，包括const数据成员和const成员函数，const数据成员必须也只能通过构造函数的初始化列表进行初始化。 \nconst成员函数只能访问类的成员，不能进行修改，如果需要修改，则引入`mutable`关键字。\n\n1. const修饰普通变量（两种写法都类似）：\n\n   ```c++\n   const TYPE value; \n   TYPE const value;\n   ```\n\n2. const修饰指针 \n\n   指针本身是常量不可变：`(char*) const pContent;` \n   指针所指向的内容是常量不可变：`const (char) *pContent;`或`(char) const *pContent;` \n   两者都不可变：`const char* const pContent;`\n\n3. const修饰函数 \n\n   const修饰函数参数是它最广泛的一种用途，它表示在函数体中不能修改参数的值(包括参数本身的值或者参数其中包含的值)\n\n4. const修饰类对象/对象指针/对象引用 \n\n   const修饰类对象表示该对象为常量对象，其中的任何成员都不能被修改。对于对象指针和对象引用也是一样。const修饰的对象，该对象的任何非const成员函数都不能被调用，因为任何非const成员函数会有修改成员变量的企图。\n\n5. const修饰数据成员 \n\n   const数据成员只在某个对象生存期内是常量，而对于整个类而言却是可变的。因为类可以创建多个对象，不同的对象其const数据成员的值可以不同。所以不能在类声明中初始化const数据成员，因为类的对象未被创建时，编译器不知道const 数据成员的值是什么。\n   \n6. const修饰成员函数\n\n   const修饰类的成员函数，用const修饰的成员函数不能改变对象的成员变量。一般把const写在成员函数的最后。\n\n## static\n\n声明静态成员，包括静态数据成员和静态成员函数，它们被类的所有对象共享，静态数据成员在使用前必须初始化，而静态成员函数只能访问静态数据成员，不能访问非静态数据成员，因为该函数不含有this指针。、\n\n写在class内的东西都是声明而不是定义，因此对于静态成员需要在类外面给出其定义。静态成员在初始化时不能加static关键字，因为加了static关键字表明该变量只在当前文件内访问，而类设计时类中的成员变量是可能在其他文件中被访问的，两者相悖，因此这里不能加static关键字。\n\n当静态成员为public时对其的访问可用对象名加.符号进行访问，也可以用类名加：：作用域解析运算符进行访问。\n\n1. 面向过程的static关键字 \n   \n   （1）静态全局变量： \n全局变量前，加上关键字static，该变量就被定义成为一个静态全局变量。\n\t\n\t- 1、该变量在全局数据区分配内存；\n\t- 2、未经初始化的静态全局变量会被程序自动初始化为0；\n\t- 3、静态全局变量在声明它的整个文件都是可见的，而在文件之外是不可见的。其它文件中可以定义相同名字的变量，不会发生冲突。定义全局变量就可以实现变量在文件中的共享。\n\n   （2）静态局部变量： \n   在局部变量前，加上关键字static，该变量就被定义成为一个静态局部变量。 \n   静态局部变量保存在全局数据区，而不是保存在栈中，每次的值保持到下一次函数调用，直到下次赋新值。 \n   静态局部变量有以下特点：\n   \n   - 1、该变量在全局数据区分配内存；\n   - 2、静态局部变量在程序执行到该对象的声明处时被首次初始化，即以后的函数调用**不再进行初始化(跳过 `static int a = 4;`这一句，后面的赋值`a = 5`照常执行)**；\n   - 3、静态局部变量一般在声明处初始化，如果没有显式初始化，程序自动初始化为0；\n   - 4、它始终驻留在全局数据区，直到程序运行结束。但其作用域为局部作用域，当定义它的函数或语句块结束时，其作用域随之结束\n   \n   （3）静态函数：  \n   在函数的返回类型前加上static关键字，函数即被定义为静态函数。静态函数与普通函数不同，它只能在声明它的文件当中可见，不能被其它文件使用。其它文件中可以定义相同名字的函数，不会发生冲突。\n\n2. 面向对象的static关键字 \n（1）静态数据成员 \n在类内数据成员的声明前加上关键字static，该数据成员就是类内的静态数据成员。 \n对于非静态数据成员，每个类对象都有自己的拷贝。而静态数据成员被当作是类的成员。无论这个类的对象被定义了多少个，静态数据成员在程序中也只有一份拷贝，由该类型的所有对象共享访问。静态函数可以访问类的静态成员变量，且只能访问静态成员变量。调用时可以使用对象名加.符号进行调用，也可以使用类名加：：作用于解析运算符进行调用。因此静态函数中不能使用this指针访问静态成员，因为当使用：：进行**调用静态函数时，此时没有传入this指针，所以它访问的数据都不是自己的，而是类共有的，这个数据只能是类成员变量，即静态数据了。**\n\n- 1、对该类的多个对象来说，静态数据成员只分配一次内存，供所有对象共用。\n- 2、静态数据成员存储在全局数据区。静态数据成员定义时要分配空间，所以不能在类声明中定义。\n- 3、静态数据成员和普通数据成员一样遵从public,protected,private访问规则。\n- 4、静态数据成员在全局数据区分配内存，属于本类的所有对象共享，所以，它不属于特定的类对象。\n- 5、在没有产生类对象时其作用域就可见，即在没有产生类的实例时，我们就可以操作它；\n- 6、静态数据成员初始化与一般数据成员初始化不同。静态数据成员初始化的格式为： `＜数据类型＞＜类名＞::＜静态数据成员名＞=＜值＞`（前面不加`static`,否则就被锁定只能在这个文件使用了，这不是类想要的结果）\n- 7、类的静态数据成员有两种访问形式：`＜类对象名＞.＜静态数据成员名＞ 或 ＜类类型名＞::＜静态数据成员名＞`\n- 8、静态数据成员没有进入程序的全局名字空间，因此不存在与程序中其它全局名字冲突的可能性。\n\n（2）静态成员函数 \n与静态数据成员一样，我们也可以创建一个静态成员函数，它为类的全部服务而不是为某一个类的具体对象服务。静态成员函数与静态数据成员一样，都是类的内部实现，属于类定义的一部分。 \n普通的成员函数一般都隐含了一个this指针，this指针指向类的对象本身，因为普通成员函数总是具体的属于某个类的具体对象的。通常情况下，this是缺省的。但是与普通函数相比，静态成员函数由于不是与任何的对象相联系，因此它不具有this指针。从这个意义上讲，它无法访问属于类对象的非静态数据成员，也无法访问非静态成员函数，它只能调用其余的静态成员函数。下面举个静态成员函数的例子。 \n关于静态成员函数，可以总结为以下几点：\n\n- 1、出现在类体外的函数定义不能指定关键字static；\n- 2、静态成员之间可以相互访问，包括静态成员函数访问静态数据成员和访问静态成员函数；\n- 3、非静态成员函数可以任意地访问静态成员函数和静态数据成员；\n- 4、静态成员函数不能访问非静态成员函数和非静态数据成员；\n- 5、由于没有this指针的额外开销，因此静态成员函数与类的全局函数相比速度上会有少许的增长；\n- 6、调用静态成员函数，可以用成员访问操作符来调用静态成员函数，也可以直接使用如下格式： `＜类名＞::＜静态成员函数名＞（＜参数表＞）`\n\n## virtual\n\n声明虚函数，用于实现多态，该关键字是基于声明的。 \n所谓虚函数，虚就虚在“推迟联编”或者“动态联编”上，一个类函数的调用并不是在编译时刻被确定的，而是在运行时刻被确定的。 \n由于编写代码的时候并不能确定被调用的是基类的函数还是哪个派生类的函数，所以被称为“虚”函数。只要在基类中已声明为virtual，这里即使不使用virtual关键字，默认也是虚函数。同样，如果还有从子类派生的子类，对应的成员函数也是虚函数。\n\n1. 虚函数 \n虚函数只能借助于指针或者引用来达到多态的效果 \n通过这些手段，编译器在看到一个虚函数调用的时候，就将会在运行时刻决定调用哪个函数。虚函数必须要被定义。\n\n2. 虚析构函数 \n析构函数也可以是虚的，甚至是纯虚的。当一个类打算被用作其它类的基类时，它的析构函数必须是虚的。在实现多态时，当用基类操作派生类，在析构时防止只析构基类而不析构派生类的状况发生。而直接用继承类的指针去操作继承类的成员，却不会出现这种情况。\n\n3. 纯虚函数 \n如下声明表示一个函数为纯虚函数（纯虚函数也可以有定义）（如果一个类里面有一个或多个纯虚函数，这个类就是抽象类）。纯虚函数用来规范派生类的行为，实际上就是所谓的“接口”。它告诉使用者，我的派生类都会有这个函数。而试图创建一个抽象基类的独立类对象会导致编译时刻错误。 \n`virtual void foo()=0; // =0标志一个虚函数为纯虚函数`\n\n4. 构造函数和析构函数中的虚函数调用 \n一个类的虚函数在它自己的构造函数和析构函数中被调用的时候，它们就变成普通函数了。也就是说不能在构造函数和析构函数中让自己“多态”。这是因为派生类对象中构造函数的调用顺序是，先调用基类的构造函数，然后是派生类的构造函数。在基类析构函数中也是如此。\n\n5. 虚函数与纯虚函数的区别\n\n- 虚函数和纯虚函数可以定义在同一个类中，含有纯虚函数的类被称为抽象类，而只含有虚函数的类不能被称为抽象类。\n- 虚函数可以被直接使用（必须被定义），也可以被子类重载以后以多态的形式调用，而纯虚函数必须在子类中实现该函数才可以使用，因为纯虚函数在基类只有声明而没有定义。\n- 虚函数和纯虚函数都可以在子类中被重载，以多态的形式被调用。\n- 虚函数和纯虚函数通常存在于抽象基类之中，被继承的子类重载，目的是提供一个统一的接口。\n- 定义了纯虚函数的类称为抽象类，抽象类不能被实例化。\n\n## friend\n\n声明友元函数和友元类，该关键字也是基于声明的。 \n采用类的机制后实现了数据的隐藏与封装，类的数据成员一般定义为私有成员，成员函数一般定义为公有的，依此提供类与外界间的通信接口。\n\n1. 友元函数 \n有时需要定义一些函数，这些函数不是类的一部分（注意友元函数不是类的一部分），但又需要频繁地访问类的数据成员，这时可以将这些函数定义为该类的友元函数。 \n友元函数是可以直接访问类的私有成员的非成员函数。它是定义在类外的普通函数，它不属于任何类，但需要在类的定义中加以声明，声明时只需在友元的名称前加上关键字friend，其格式如下： \n`friend 类型 函数名(形式参数);`\n\n- 友元函数的声明可以放在类的私有部分，也可以放在公有部分，它们是没有区别的，都说明是该类的一个友元函数。\n- 一个函数可以是多个类的友元函数，只需要在各个类中分别声明。友元函数的调用与一般函数的调用方式和原理一致。\n- 友元函数并不是类的成员函数，因此在类外定义的时候不能加上`class::function name`\n\n2.友元类 \n除了友元函数外，还有友元类，两者统称为友元。友元的作用是提高了程序的运行效率（即减少了类型检查和安全性检查等都需要时间开销），但它破坏了类的封装性和隐藏性，使得非成员函数可以访问类的私有成员。同友元函数一样，其也需要在类中加上关键字friend声明。 \n友元类的所有成员函数都是类的友元函数，能存取类的私有成员和保护成员。\n\n- 友元关系不能被继承。\n- 友元关系是单向的，不具有交换性。若类B是类A的友元，类A不一定是类B的友元，要看在类中是否有相应的声明。\n- 友元关系不具有传递性。若类B是类A的友元，类C是B的友元，类C不一定是类A的友元，同样要看类中是否有相应的申明。\n\n## *_cast\n\n显式类型转换，C++延续了C风格的强制类型转换的语法。dynamic_cast是动态的，需要运行时支持；其它都是静态检查，相比C风格的类型转换更加细化，增强了类型安全性。C++支持四种关键字对不同形式的类型转换进行分别处理。使用格式： \n`转换关键字<类型>(表达式)`\n\n1、`static_cast`和C风格类型转换功能完全相同，它属于在编译时期静态的类型转换。如果把一个double类型转换为整形，形式如下： \n`static_cast<int>(0.1);` \n`static_cast`功能有所限制，比如不能转化struct类型到int，不能转化指针到double等。另外，它不能在转换中消除const和volatile属性。\n\n运算符 **`static_cast`** **可用于将指向基类的指针转换为指向派生类的指针等操作**。 此类转换并非始终安全。\n\n在下面的示例中，因为 `D* pd2 = static_cast<D*>(pb);` 可能有不在 `D` 内的字段和方法，所以行 `B` 不安全。 但是，因为 `B* pb2 = static_cast<B*>(pd);` 始终包含所有 `D`，所以行 `B` 是安全的转换。\n\n```c++\n// static_cast_Operator.cpp\n// compile with: /LD\nclass B {};\n\nclass D : public B {};\n\nvoid f(B* pb, D* pd) {\n   D* pd2 = static_cast<D*>(pb);   // Not safe, D can have fields\n                                   // and methods that are not in B.\n\n   B* pb2 = static_cast<B*>(pd);   // Safe conversion, D always\n                                   // contains all of B.\n}\n```\n\n与 [dynamic_cast相反](https://docs.microsoft.com/zh-cn/cpp/cpp/dynamic-cast-operator?view=msvc-170)，不会对 的转换进行运行时 检查 `pb`。 由 `pb` 指向的对象可能不是 `D` 类型的对象，在这种情况下使用 `*pd2` 会是灾难性的。 例如，调用 `D` 类（而非 `B` 类）的成员函数可能会导致访问冲突\n\n2、const_cast用于消除引用或者指针的const或者volatile属性。 \n`const int &ci=100;` \n`int &i=const_cast<int&>(ci);` \n通过这种方式，ci引用的内存单元虽然无法通过修改ci改变，但是可以修改i改变内存的值。这里是把const属性消除，这里想多说一点的是把const加上的问题。\n\n3、`dynamic_cast`一般出现在类到子类或兄弟类的转换，并要求基类有虚函数。而且它能提供转换后的结果和状态，一旦转换失败则返回空指针。如果没有继承关系的转换一般使用`static_cast`。\n\n4、`reinterpret_casts`一般用作函数指针的转换，而且使用它的代码可移植性很差，因为无法确定编译器的函数调用方式等。有可能会导致函数调用出错，一般不常用。\n\n## explicit\n\nexplicit关键字只能用于修饰只有一个参数的类构造函数，它的作用是表明该构造函数是显示的，而非隐式的，跟它相对应的另一个关键字是implicit，意思是隐藏的，类构造函数默认情况下即声明为implicit(隐式)。\n\nexplicit关键字只对有一个参数的类构造函数有效，如果类构造函数参数大于或等于两个时，是不会产生隐式转换的，所以explicit关键字也就无效了，而除了第一个参数以外的其他参数都有默认值的时候，explicit关键字依然有效。\n\n除非有心利用，隐式转换常常带来程序逻辑的错误，而且这种错误一旦发生是很难察觉的。原则上应该在所有的构造函数前加explicit关键字，当你有心利用隐式转换的时候再去解除explicit，这样可以大大减少错误的发生。\n\n隐式转换的含义：在C++中，如果的构造函数只有一个参数时，那么在编译的时候就会有一个缺省的转换操作：将该构造函数对应数据类型的数据转换为该类对象。也就是说`CxString string2 = 10;`这段代码，编译器自动将整型转换为CxString类对象，实际上等同于`CxString string2(10);`\n\n## extern\n\nextern意为“外来的”，是存储类声明修饰符。其有两个作用：\n\n- 当它与”C”一起连用时，如: `extern \"C\" void fun(int a, int b);`则告诉编译器在编译fun这个函数名时按着C的规则去翻译相应的函数名而不是C++的，C++的规则在翻译这个函数名时会把fun这个名字变得面目全非，可能是`fun@aBc_int_int#%$`也可能是别的，这要看编译器的”脾气”了(不同的编译器采用的方法不一样)，主要是因为C++支持函数的重载。\n- 当extern不与”C”在一起修饰变量或函数时，如在头文件中`: extern int g_Int;`它的作用就是声明函数或全局变量的作用范围的关键字，其声明的函数和变量可以在本模块引用其他模块中的定义，记住它是一个声明不是定义，仅仅是暗示这个函数可能在别的源文件里定义，没有其它作用。这样的用处还是有的，就是在程序中取代`include “*.h”`来声明函数，在一些复杂的项目中，我比较习惯在所有的函数声明前添加extern修饰。\n\n1、extern 和 static \n（1）extern 表明该变量在别的地方已经定义过了，在这里要使用那个变量。 \n（2）static 表示静态的变量，分配内存的时候，存储在静态区，不存储在栈上面。 \nstatic 作用范围是内部连接的关系, 和extern有点相反。static与extern是一对“水火不容”的家伙，也就是说extern和static不能同时修饰一个变量。\n\n2、extern 和const \nC++中const修饰的全局常量据有跟static相同的特性，即它们只能作用于本编译模块中，但是const可以与extern连用来声明该常量可以作用于其他编译模块中, 如`extern const char g_str[];`","slug":"C关键字","published":1,"updated":"2022-03-13T14:30:30.938Z","_id":"cl0lsyw69000090tph24u6re3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"inline\"><a href=\"#inline\" class=\"headerlink\" title=\"inline\"></a>inline</h2><p>定义<strong>内联函数</strong>，该关键字是基于定义的。如果只在函数声明时给出inline，则函数不会被认为是内联函数，所以必须在函数定义的地方也加上inline。</p>\n<h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><p>定义常量成员，包括const数据成员和const成员函数，const数据成员必须也只能通过构造函数的初始化列表进行初始化。<br>const成员函数只能访问类的成员，不能进行修改，如果需要修改，则引入<code>mutable</code>关键字。</p>\n<ol>\n<li><p>const修饰普通变量（两种写法都类似）：</p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">const TYPE value; \nTYPE const value;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>const修饰指针 </p>\n<p>指针本身是常量不可变：<code>(char*) const pContent;</code><br>指针所指向的内容是常量不可变：<code>const (char) *pContent;</code>或<code>(char) const *pContent;</code><br>两者都不可变：<code>const char* const pContent;</code></p>\n</li>\n<li><p>const修饰函数 </p>\n<p>const修饰函数参数是它最广泛的一种用途，它表示在函数体中不能修改参数的值(包括参数本身的值或者参数其中包含的值)</p>\n</li>\n<li><p>const修饰类对象&#x2F;对象指针&#x2F;对象引用 </p>\n<p>const修饰类对象表示该对象为常量对象，其中的任何成员都不能被修改。对于对象指针和对象引用也是一样。const修饰的对象，该对象的任何非const成员函数都不能被调用，因为任何非const成员函数会有修改成员变量的企图。</p>\n</li>\n<li><p>const修饰数据成员 </p>\n<p>const数据成员只在某个对象生存期内是常量，而对于整个类而言却是可变的。因为类可以创建多个对象，不同的对象其const数据成员的值可以不同。所以不能在类声明中初始化const数据成员，因为类的对象未被创建时，编译器不知道const 数据成员的值是什么。</p>\n</li>\n<li><p>const修饰成员函数</p>\n<p>const修饰类的成员函数，用const修饰的成员函数不能改变对象的成员变量。一般把const写在成员函数的最后。</p>\n</li>\n</ol>\n<h2 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h2><p>声明静态成员，包括静态数据成员和静态成员函数，它们被类的所有对象共享，静态数据成员在使用前必须初始化，而静态成员函数只能访问静态数据成员，不能访问非静态数据成员，因为该函数不含有this指针。、</p>\n<p>写在class内的东西都是声明而不是定义，因此对于静态成员需要在类外面给出其定义。静态成员在初始化时不能加static关键字，因为加了static关键字表明该变量只在当前文件内访问，而类设计时类中的成员变量是可能在其他文件中被访问的，两者相悖，因此这里不能加static关键字。</p>\n<p>当静态成员为public时对其的访问可用对象名加.符号进行访问，也可以用类名加：：作用域解析运算符进行访问。</p>\n<ol>\n<li><p>面向过程的static关键字 </p>\n<p>（1）静态全局变量：</p>\n</li>\n</ol>\n<p>全局变量前，加上关键字static，该变量就被定义成为一个静态全局变量。</p>\n<pre><code>- 1、该变量在全局数据区分配内存；\n- 2、未经初始化的静态全局变量会被程序自动初始化为0；\n- 3、静态全局变量在声明它的整个文件都是可见的，而在文件之外是不可见的。其它文件中可以定义相同名字的变量，不会发生冲突。定义全局变量就可以实现变量在文件中的共享。\n</code></pre>\n<p>   （2）静态局部变量：<br>   在局部变量前，加上关键字static，该变量就被定义成为一个静态局部变量。<br>   静态局部变量保存在全局数据区，而不是保存在栈中，每次的值保持到下一次函数调用，直到下次赋新值。<br>   静态局部变量有以下特点：</p>\n<ul>\n<li>1、该变量在全局数据区分配内存；</li>\n<li>2、静态局部变量在程序执行到该对象的声明处时被首次初始化，即以后的函数调用**不再进行初始化(跳过 <code>static int a = 4;</code>这一句，后面的赋值<code>a = 5</code>照常执行)**；</li>\n<li>3、静态局部变量一般在声明处初始化，如果没有显式初始化，程序自动初始化为0；</li>\n<li>4、它始终驻留在全局数据区，直到程序运行结束。但其作用域为局部作用域，当定义它的函数或语句块结束时，其作用域随之结束</li>\n</ul>\n<p>   （3）静态函数：<br>   在函数的返回类型前加上static关键字，函数即被定义为静态函数。静态函数与普通函数不同，它只能在声明它的文件当中可见，不能被其它文件使用。其它文件中可以定义相同名字的函数，不会发生冲突。</p>\n<ol start=\"2\">\n<li>面向对象的static关键字<br>（1）静态数据成员<br>在类内数据成员的声明前加上关键字static，该数据成员就是类内的静态数据成员。<br>对于非静态数据成员，每个类对象都有自己的拷贝。而静态数据成员被当作是类的成员。无论这个类的对象被定义了多少个，静态数据成员在程序中也只有一份拷贝，由该类型的所有对象共享访问。静态函数可以访问类的静态成员变量，且只能访问静态成员变量。调用时可以使用对象名加.符号进行调用，也可以使用类名加：：作用于解析运算符进行调用。因此静态函数中不能使用this指针访问静态成员，因为当使用：：进行<strong>调用静态函数时，此时没有传入this指针，所以它访问的数据都不是自己的，而是类共有的，这个数据只能是类成员变量，即静态数据了。</strong></li>\n</ol>\n<ul>\n<li>1、对该类的多个对象来说，静态数据成员只分配一次内存，供所有对象共用。</li>\n<li>2、静态数据成员存储在全局数据区。静态数据成员定义时要分配空间，所以不能在类声明中定义。</li>\n<li>3、静态数据成员和普通数据成员一样遵从public,protected,private访问规则。</li>\n<li>4、静态数据成员在全局数据区分配内存，属于本类的所有对象共享，所以，它不属于特定的类对象。</li>\n<li>5、在没有产生类对象时其作用域就可见，即在没有产生类的实例时，我们就可以操作它；</li>\n<li>6、静态数据成员初始化与一般数据成员初始化不同。静态数据成员初始化的格式为： <code>＜数据类型＞＜类名＞::＜静态数据成员名＞=＜值＞</code>（前面不加<code>static</code>,否则就被锁定只能在这个文件使用了，这不是类想要的结果）</li>\n<li>7、类的静态数据成员有两种访问形式：<code>＜类对象名＞.＜静态数据成员名＞ 或 ＜类类型名＞::＜静态数据成员名＞</code></li>\n<li>8、静态数据成员没有进入程序的全局名字空间，因此不存在与程序中其它全局名字冲突的可能性。</li>\n</ul>\n<p>（2）静态成员函数<br>与静态数据成员一样，我们也可以创建一个静态成员函数，它为类的全部服务而不是为某一个类的具体对象服务。静态成员函数与静态数据成员一样，都是类的内部实现，属于类定义的一部分。<br>普通的成员函数一般都隐含了一个this指针，this指针指向类的对象本身，因为普通成员函数总是具体的属于某个类的具体对象的。通常情况下，this是缺省的。但是与普通函数相比，静态成员函数由于不是与任何的对象相联系，因此它不具有this指针。从这个意义上讲，它无法访问属于类对象的非静态数据成员，也无法访问非静态成员函数，它只能调用其余的静态成员函数。下面举个静态成员函数的例子。<br>关于静态成员函数，可以总结为以下几点：</p>\n<ul>\n<li>1、出现在类体外的函数定义不能指定关键字static；</li>\n<li>2、静态成员之间可以相互访问，包括静态成员函数访问静态数据成员和访问静态成员函数；</li>\n<li>3、非静态成员函数可以任意地访问静态成员函数和静态数据成员；</li>\n<li>4、静态成员函数不能访问非静态成员函数和非静态数据成员；</li>\n<li>5、由于没有this指针的额外开销，因此静态成员函数与类的全局函数相比速度上会有少许的增长；</li>\n<li>6、调用静态成员函数，可以用成员访问操作符来调用静态成员函数，也可以直接使用如下格式： <code>＜类名＞::＜静态成员函数名＞（＜参数表＞）</code></li>\n</ul>\n<h2 id=\"virtual\"><a href=\"#virtual\" class=\"headerlink\" title=\"virtual\"></a>virtual</h2><p>声明虚函数，用于实现多态，该关键字是基于声明的。<br>所谓虚函数，虚就虚在“推迟联编”或者“动态联编”上，一个类函数的调用并不是在编译时刻被确定的，而是在运行时刻被确定的。<br>由于编写代码的时候并不能确定被调用的是基类的函数还是哪个派生类的函数，所以被称为“虚”函数。只要在基类中已声明为virtual，这里即使不使用virtual关键字，默认也是虚函数。同样，如果还有从子类派生的子类，对应的成员函数也是虚函数。</p>\n<ol>\n<li><p>虚函数<br>虚函数只能借助于指针或者引用来达到多态的效果<br>通过这些手段，编译器在看到一个虚函数调用的时候，就将会在运行时刻决定调用哪个函数。虚函数必须要被定义。</p>\n</li>\n<li><p>虚析构函数<br>析构函数也可以是虚的，甚至是纯虚的。当一个类打算被用作其它类的基类时，它的析构函数必须是虚的。在实现多态时，当用基类操作派生类，在析构时防止只析构基类而不析构派生类的状况发生。而直接用继承类的指针去操作继承类的成员，却不会出现这种情况。</p>\n</li>\n<li><p>纯虚函数<br>如下声明表示一个函数为纯虚函数（纯虚函数也可以有定义）（如果一个类里面有一个或多个纯虚函数，这个类就是抽象类）。纯虚函数用来规范派生类的行为，实际上就是所谓的“接口”。它告诉使用者，我的派生类都会有这个函数。而试图创建一个抽象基类的独立类对象会导致编译时刻错误。<br><code>virtual void foo()=0; // =0标志一个虚函数为纯虚函数</code></p>\n</li>\n<li><p>构造函数和析构函数中的虚函数调用<br>一个类的虚函数在它自己的构造函数和析构函数中被调用的时候，它们就变成普通函数了。也就是说不能在构造函数和析构函数中让自己“多态”。这是因为派生类对象中构造函数的调用顺序是，先调用基类的构造函数，然后是派生类的构造函数。在基类析构函数中也是如此。</p>\n</li>\n<li><p>虚函数与纯虚函数的区别</p>\n</li>\n</ol>\n<ul>\n<li>虚函数和纯虚函数可以定义在同一个类中，含有纯虚函数的类被称为抽象类，而只含有虚函数的类不能被称为抽象类。</li>\n<li>虚函数可以被直接使用（必须被定义），也可以被子类重载以后以多态的形式调用，而纯虚函数必须在子类中实现该函数才可以使用，因为纯虚函数在基类只有声明而没有定义。</li>\n<li>虚函数和纯虚函数都可以在子类中被重载，以多态的形式被调用。</li>\n<li>虚函数和纯虚函数通常存在于抽象基类之中，被继承的子类重载，目的是提供一个统一的接口。</li>\n<li>定义了纯虚函数的类称为抽象类，抽象类不能被实例化。</li>\n</ul>\n<h2 id=\"friend\"><a href=\"#friend\" class=\"headerlink\" title=\"friend\"></a>friend</h2><p>声明友元函数和友元类，该关键字也是基于声明的。<br>采用类的机制后实现了数据的隐藏与封装，类的数据成员一般定义为私有成员，成员函数一般定义为公有的，依此提供类与外界间的通信接口。</p>\n<ol>\n<li>友元函数<br>有时需要定义一些函数，这些函数不是类的一部分（注意友元函数不是类的一部分），但又需要频繁地访问类的数据成员，这时可以将这些函数定义为该类的友元函数。<br>友元函数是可以直接访问类的私有成员的非成员函数。它是定义在类外的普通函数，它不属于任何类，但需要在类的定义中加以声明，声明时只需在友元的名称前加上关键字friend，其格式如下：<br><code>friend 类型 函数名(形式参数);</code></li>\n</ol>\n<ul>\n<li>友元函数的声明可以放在类的私有部分，也可以放在公有部分，它们是没有区别的，都说明是该类的一个友元函数。</li>\n<li>一个函数可以是多个类的友元函数，只需要在各个类中分别声明。友元函数的调用与一般函数的调用方式和原理一致。</li>\n<li>友元函数并不是类的成员函数，因此在类外定义的时候不能加上<code>class::function name</code></li>\n</ul>\n<p>2.友元类<br>除了友元函数外，还有友元类，两者统称为友元。友元的作用是提高了程序的运行效率（即减少了类型检查和安全性检查等都需要时间开销），但它破坏了类的封装性和隐藏性，使得非成员函数可以访问类的私有成员。同友元函数一样，其也需要在类中加上关键字friend声明。<br>友元类的所有成员函数都是类的友元函数，能存取类的私有成员和保护成员。</p>\n<ul>\n<li>友元关系不能被继承。</li>\n<li>友元关系是单向的，不具有交换性。若类B是类A的友元，类A不一定是类B的友元，要看在类中是否有相应的声明。</li>\n<li>友元关系不具有传递性。若类B是类A的友元，类C是B的友元，类C不一定是类A的友元，同样要看类中是否有相应的申明。</li>\n</ul>\n<h2 id=\"cast\"><a href=\"#cast\" class=\"headerlink\" title=\"*_cast\"></a>*_cast</h2><p>显式类型转换，C++延续了C风格的强制类型转换的语法。dynamic_cast是动态的，需要运行时支持；其它都是静态检查，相比C风格的类型转换更加细化，增强了类型安全性。C++支持四种关键字对不同形式的类型转换进行分别处理。使用格式：<br><code>转换关键字&lt;类型&gt;(表达式)</code></p>\n<p>1、<code>static_cast</code>和C风格类型转换功能完全相同，它属于在编译时期静态的类型转换。如果把一个double类型转换为整形，形式如下：<br><code>static_cast&lt;int&gt;(0.1);</code><br><code>static_cast</code>功能有所限制，比如不能转化struct类型到int，不能转化指针到double等。另外，它不能在转换中消除const和volatile属性。</p>\n<p>运算符 <strong><code>static_cast</code></strong> <strong>可用于将指向基类的指针转换为指向派生类的指针等操作</strong>。 此类转换并非始终安全。</p>\n<p>在下面的示例中，因为 <code>D* pd2 = static_cast&lt;D*&gt;(pb);</code> 可能有不在 <code>D</code> 内的字段和方法，所以行 <code>B</code> 不安全。 但是，因为 <code>B* pb2 = static_cast&lt;B*&gt;(pd);</code> 始终包含所有 <code>D</code>，所以行 <code>B</code> 是安全的转换。</p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">// static_cast_Operator.cpp\n// compile with: /LD\nclass B &#123;&#125;;\n\nclass D : public B &#123;&#125;;\n\nvoid f(B* pb, D* pd) &#123;\n   D* pd2 = static_cast<D*>(pb);   // Not safe, D can have fields\n                                   // and methods that are not in B.\n\n   B* pb2 = static_cast<B*>(pd);   // Safe conversion, D always\n                                   // contains all of B.\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>与 <a href=\"https://docs.microsoft.com/zh-cn/cpp/cpp/dynamic-cast-operator?view=msvc-170\">dynamic_cast相反</a>，不会对 的转换进行运行时 检查 <code>pb</code>。 由 <code>pb</code> 指向的对象可能不是 <code>D</code> 类型的对象，在这种情况下使用 <code>*pd2</code> 会是灾难性的。 例如，调用 <code>D</code> 类（而非 <code>B</code> 类）的成员函数可能会导致访问冲突</p>\n<p>2、const_cast用于消除引用或者指针的const或者volatile属性。<br><code>const int &amp;ci=100;</code><br><code>int &amp;i=const_cast&lt;int&amp;&gt;(ci);</code><br>通过这种方式，ci引用的内存单元虽然无法通过修改ci改变，但是可以修改i改变内存的值。这里是把const属性消除，这里想多说一点的是把const加上的问题。</p>\n<p>3、<code>dynamic_cast</code>一般出现在类到子类或兄弟类的转换，并要求基类有虚函数。而且它能提供转换后的结果和状态，一旦转换失败则返回空指针。如果没有继承关系的转换一般使用<code>static_cast</code>。</p>\n<p>4、<code>reinterpret_casts</code>一般用作函数指针的转换，而且使用它的代码可移植性很差，因为无法确定编译器的函数调用方式等。有可能会导致函数调用出错，一般不常用。</p>\n<h2 id=\"explicit\"><a href=\"#explicit\" class=\"headerlink\" title=\"explicit\"></a>explicit</h2><p>explicit关键字只能用于修饰只有一个参数的类构造函数，它的作用是表明该构造函数是显示的，而非隐式的，跟它相对应的另一个关键字是implicit，意思是隐藏的，类构造函数默认情况下即声明为implicit(隐式)。</p>\n<p>explicit关键字只对有一个参数的类构造函数有效，如果类构造函数参数大于或等于两个时，是不会产生隐式转换的，所以explicit关键字也就无效了，而除了第一个参数以外的其他参数都有默认值的时候，explicit关键字依然有效。</p>\n<p>除非有心利用，隐式转换常常带来程序逻辑的错误，而且这种错误一旦发生是很难察觉的。原则上应该在所有的构造函数前加explicit关键字，当你有心利用隐式转换的时候再去解除explicit，这样可以大大减少错误的发生。</p>\n<p>隐式转换的含义：在C++中，如果的构造函数只有一个参数时，那么在编译的时候就会有一个缺省的转换操作：将该构造函数对应数据类型的数据转换为该类对象。也就是说<code>CxString string2 = 10;</code>这段代码，编译器自动将整型转换为CxString类对象，实际上等同于<code>CxString string2(10);</code></p>\n<h2 id=\"extern\"><a href=\"#extern\" class=\"headerlink\" title=\"extern\"></a>extern</h2><p>extern意为“外来的”，是存储类声明修饰符。其有两个作用：</p>\n<ul>\n<li>当它与”C”一起连用时，如: <code>extern &quot;C&quot; void fun(int a, int b);</code>则告诉编译器在编译fun这个函数名时按着C的规则去翻译相应的函数名而不是C++的，C++的规则在翻译这个函数名时会把fun这个名字变得面目全非，可能是<code>fun@aBc_int_int#%$</code>也可能是别的，这要看编译器的”脾气”了(不同的编译器采用的方法不一样)，主要是因为C++支持函数的重载。</li>\n<li>当extern不与”C”在一起修饰变量或函数时，如在头文件中<code>: extern int g_Int;</code>它的作用就是声明函数或全局变量的作用范围的关键字，其声明的函数和变量可以在本模块引用其他模块中的定义，记住它是一个声明不是定义，仅仅是暗示这个函数可能在别的源文件里定义，没有其它作用。这样的用处还是有的，就是在程序中取代<code>include “*.h”</code>来声明函数，在一些复杂的项目中，我比较习惯在所有的函数声明前添加extern修饰。</li>\n</ul>\n<p>1、extern 和 static<br>（1）extern 表明该变量在别的地方已经定义过了，在这里要使用那个变量。<br>（2）static 表示静态的变量，分配内存的时候，存储在静态区，不存储在栈上面。<br>static 作用范围是内部连接的关系, 和extern有点相反。static与extern是一对“水火不容”的家伙，也就是说extern和static不能同时修饰一个变量。</p>\n<p>2、extern 和const<br>C++中const修饰的全局常量据有跟static相同的特性，即它们只能作用于本编译模块中，但是const可以与extern连用来声明该常量可以作用于其他编译模块中, 如<code>extern const char g_str[];</code></p>\n","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<h2 id=\"inline\"><a href=\"#inline\" class=\"headerlink\" title=\"inline\"></a>inline</h2><p>定义<strong>内联函数</strong>，该关键字是基于定义的。如果只在函数声明时给出inline，则函数不会被认为是内联函数，所以必须在函数定义的地方也加上inline。</p>\n<h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><p>定义常量成员，包括const数据成员和const成员函数，const数据成员必须也只能通过构造函数的初始化列表进行初始化。<br>const成员函数只能访问类的成员，不能进行修改，如果需要修改，则引入<code>mutable</code>关键字。</p>\n<ol>\n<li><p>const修饰普通变量（两种写法都类似）：</p>\n<pre><code class=\"c++\">const TYPE value; \nTYPE const value;\n</code></pre>\n</li>\n<li><p>const修饰指针 </p>\n<p>指针本身是常量不可变：<code>(char*) const pContent;</code><br>指针所指向的内容是常量不可变：<code>const (char) *pContent;</code>或<code>(char) const *pContent;</code><br>两者都不可变：<code>const char* const pContent;</code></p>\n</li>\n<li><p>const修饰函数 </p>\n<p>const修饰函数参数是它最广泛的一种用途，它表示在函数体中不能修改参数的值(包括参数本身的值或者参数其中包含的值)</p>\n</li>\n<li><p>const修饰类对象&#x2F;对象指针&#x2F;对象引用 </p>\n<p>const修饰类对象表示该对象为常量对象，其中的任何成员都不能被修改。对于对象指针和对象引用也是一样。const修饰的对象，该对象的任何非const成员函数都不能被调用，因为任何非const成员函数会有修改成员变量的企图。</p>\n</li>\n<li><p>const修饰数据成员 </p>\n<p>const数据成员只在某个对象生存期内是常量，而对于整个类而言却是可变的。因为类可以创建多个对象，不同的对象其const数据成员的值可以不同。所以不能在类声明中初始化const数据成员，因为类的对象未被创建时，编译器不知道const 数据成员的值是什么。</p>\n</li>\n<li><p>const修饰成员函数</p>\n<p>const修饰类的成员函数，用const修饰的成员函数不能改变对象的成员变量。一般把const写在成员函数的最后。</p>\n</li>\n</ol>\n<h2 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h2><p>声明静态成员，包括静态数据成员和静态成员函数，它们被类的所有对象共享，静态数据成员在使用前必须初始化，而静态成员函数只能访问静态数据成员，不能访问非静态数据成员，因为该函数不含有this指针。、</p>\n<p>写在class内的东西都是声明而不是定义，因此对于静态成员需要在类外面给出其定义。静态成员在初始化时不能加static关键字，因为加了static关键字表明该变量只在当前文件内访问，而类设计时类中的成员变量是可能在其他文件中被访问的，两者相悖，因此这里不能加static关键字。</p>\n<p>当静态成员为public时对其的访问可用对象名加.符号进行访问，也可以用类名加：：作用域解析运算符进行访问。</p>\n<ol>\n<li><p>面向过程的static关键字 </p>\n<p>（1）静态全局变量：</p>\n</li>\n</ol>\n<p>全局变量前，加上关键字static，该变量就被定义成为一个静态全局变量。</p>\n<pre><code>- 1、该变量在全局数据区分配内存；\n- 2、未经初始化的静态全局变量会被程序自动初始化为0；\n- 3、静态全局变量在声明它的整个文件都是可见的，而在文件之外是不可见的。其它文件中可以定义相同名字的变量，不会发生冲突。定义全局变量就可以实现变量在文件中的共享。\n</code></pre>\n<p>   （2）静态局部变量：<br>   在局部变量前，加上关键字static，该变量就被定义成为一个静态局部变量。<br>   静态局部变量保存在全局数据区，而不是保存在栈中，每次的值保持到下一次函数调用，直到下次赋新值。<br>   静态局部变量有以下特点：</p>\n<ul>\n<li>1、该变量在全局数据区分配内存；</li>\n<li>2、静态局部变量在程序执行到该对象的声明处时被首次初始化，即以后的函数调用**不再进行初始化(跳过 <code>static int a = 4;</code>这一句，后面的赋值<code>a = 5</code>照常执行)**；</li>\n<li>3、静态局部变量一般在声明处初始化，如果没有显式初始化，程序自动初始化为0；</li>\n<li>4、它始终驻留在全局数据区，直到程序运行结束。但其作用域为局部作用域，当定义它的函数或语句块结束时，其作用域随之结束</li>\n</ul>\n<p>   （3）静态函数：<br>   在函数的返回类型前加上static关键字，函数即被定义为静态函数。静态函数与普通函数不同，它只能在声明它的文件当中可见，不能被其它文件使用。其它文件中可以定义相同名字的函数，不会发生冲突。</p>\n<ol start=\"2\">\n<li>面向对象的static关键字<br>（1）静态数据成员<br>在类内数据成员的声明前加上关键字static，该数据成员就是类内的静态数据成员。<br>对于非静态数据成员，每个类对象都有自己的拷贝。而静态数据成员被当作是类的成员。无论这个类的对象被定义了多少个，静态数据成员在程序中也只有一份拷贝，由该类型的所有对象共享访问。静态函数可以访问类的静态成员变量，且只能访问静态成员变量。调用时可以使用对象名加.符号进行调用，也可以使用类名加：：作用于解析运算符进行调用。因此静态函数中不能使用this指针访问静态成员，因为当使用：：进行<strong>调用静态函数时，此时没有传入this指针，所以它访问的数据都不是自己的，而是类共有的，这个数据只能是类成员变量，即静态数据了。</strong></li>\n</ol>\n<ul>\n<li>1、对该类的多个对象来说，静态数据成员只分配一次内存，供所有对象共用。</li>\n<li>2、静态数据成员存储在全局数据区。静态数据成员定义时要分配空间，所以不能在类声明中定义。</li>\n<li>3、静态数据成员和普通数据成员一样遵从public,protected,private访问规则。</li>\n<li>4、静态数据成员在全局数据区分配内存，属于本类的所有对象共享，所以，它不属于特定的类对象。</li>\n<li>5、在没有产生类对象时其作用域就可见，即在没有产生类的实例时，我们就可以操作它；</li>\n<li>6、静态数据成员初始化与一般数据成员初始化不同。静态数据成员初始化的格式为： <code>＜数据类型＞＜类名＞::＜静态数据成员名＞=＜值＞</code>（前面不加<code>static</code>,否则就被锁定只能在这个文件使用了，这不是类想要的结果）</li>\n<li>7、类的静态数据成员有两种访问形式：<code>＜类对象名＞.＜静态数据成员名＞ 或 ＜类类型名＞::＜静态数据成员名＞</code></li>\n<li>8、静态数据成员没有进入程序的全局名字空间，因此不存在与程序中其它全局名字冲突的可能性。</li>\n</ul>\n<p>（2）静态成员函数<br>与静态数据成员一样，我们也可以创建一个静态成员函数，它为类的全部服务而不是为某一个类的具体对象服务。静态成员函数与静态数据成员一样，都是类的内部实现，属于类定义的一部分。<br>普通的成员函数一般都隐含了一个this指针，this指针指向类的对象本身，因为普通成员函数总是具体的属于某个类的具体对象的。通常情况下，this是缺省的。但是与普通函数相比，静态成员函数由于不是与任何的对象相联系，因此它不具有this指针。从这个意义上讲，它无法访问属于类对象的非静态数据成员，也无法访问非静态成员函数，它只能调用其余的静态成员函数。下面举个静态成员函数的例子。<br>关于静态成员函数，可以总结为以下几点：</p>\n<ul>\n<li>1、出现在类体外的函数定义不能指定关键字static；</li>\n<li>2、静态成员之间可以相互访问，包括静态成员函数访问静态数据成员和访问静态成员函数；</li>\n<li>3、非静态成员函数可以任意地访问静态成员函数和静态数据成员；</li>\n<li>4、静态成员函数不能访问非静态成员函数和非静态数据成员；</li>\n<li>5、由于没有this指针的额外开销，因此静态成员函数与类的全局函数相比速度上会有少许的增长；</li>\n<li>6、调用静态成员函数，可以用成员访问操作符来调用静态成员函数，也可以直接使用如下格式： <code>＜类名＞::＜静态成员函数名＞（＜参数表＞）</code></li>\n</ul>\n<h2 id=\"virtual\"><a href=\"#virtual\" class=\"headerlink\" title=\"virtual\"></a>virtual</h2><p>声明虚函数，用于实现多态，该关键字是基于声明的。<br>所谓虚函数，虚就虚在“推迟联编”或者“动态联编”上，一个类函数的调用并不是在编译时刻被确定的，而是在运行时刻被确定的。<br>由于编写代码的时候并不能确定被调用的是基类的函数还是哪个派生类的函数，所以被称为“虚”函数。只要在基类中已声明为virtual，这里即使不使用virtual关键字，默认也是虚函数。同样，如果还有从子类派生的子类，对应的成员函数也是虚函数。</p>\n<ol>\n<li><p>虚函数<br>虚函数只能借助于指针或者引用来达到多态的效果<br>通过这些手段，编译器在看到一个虚函数调用的时候，就将会在运行时刻决定调用哪个函数。虚函数必须要被定义。</p>\n</li>\n<li><p>虚析构函数<br>析构函数也可以是虚的，甚至是纯虚的。当一个类打算被用作其它类的基类时，它的析构函数必须是虚的。在实现多态时，当用基类操作派生类，在析构时防止只析构基类而不析构派生类的状况发生。而直接用继承类的指针去操作继承类的成员，却不会出现这种情况。</p>\n</li>\n<li><p>纯虚函数<br>如下声明表示一个函数为纯虚函数（纯虚函数也可以有定义）（如果一个类里面有一个或多个纯虚函数，这个类就是抽象类）。纯虚函数用来规范派生类的行为，实际上就是所谓的“接口”。它告诉使用者，我的派生类都会有这个函数。而试图创建一个抽象基类的独立类对象会导致编译时刻错误。<br><code>virtual void foo()=0; // =0标志一个虚函数为纯虚函数</code></p>\n</li>\n<li><p>构造函数和析构函数中的虚函数调用<br>一个类的虚函数在它自己的构造函数和析构函数中被调用的时候，它们就变成普通函数了。也就是说不能在构造函数和析构函数中让自己“多态”。这是因为派生类对象中构造函数的调用顺序是，先调用基类的构造函数，然后是派生类的构造函数。在基类析构函数中也是如此。</p>\n</li>\n<li><p>虚函数与纯虚函数的区别</p>\n</li>\n</ol>\n<ul>\n<li>虚函数和纯虚函数可以定义在同一个类中，含有纯虚函数的类被称为抽象类，而只含有虚函数的类不能被称为抽象类。</li>\n<li>虚函数可以被直接使用（必须被定义），也可以被子类重载以后以多态的形式调用，而纯虚函数必须在子类中实现该函数才可以使用，因为纯虚函数在基类只有声明而没有定义。</li>\n<li>虚函数和纯虚函数都可以在子类中被重载，以多态的形式被调用。</li>\n<li>虚函数和纯虚函数通常存在于抽象基类之中，被继承的子类重载，目的是提供一个统一的接口。</li>\n<li>定义了纯虚函数的类称为抽象类，抽象类不能被实例化。</li>\n</ul>\n<h2 id=\"friend\"><a href=\"#friend\" class=\"headerlink\" title=\"friend\"></a>friend</h2><p>声明友元函数和友元类，该关键字也是基于声明的。<br>采用类的机制后实现了数据的隐藏与封装，类的数据成员一般定义为私有成员，成员函数一般定义为公有的，依此提供类与外界间的通信接口。</p>\n<ol>\n<li>友元函数<br>有时需要定义一些函数，这些函数不是类的一部分（注意友元函数不是类的一部分），但又需要频繁地访问类的数据成员，这时可以将这些函数定义为该类的友元函数。<br>友元函数是可以直接访问类的私有成员的非成员函数。它是定义在类外的普通函数，它不属于任何类，但需要在类的定义中加以声明，声明时只需在友元的名称前加上关键字friend，其格式如下：<br><code>friend 类型 函数名(形式参数);</code></li>\n</ol>\n<ul>\n<li>友元函数的声明可以放在类的私有部分，也可以放在公有部分，它们是没有区别的，都说明是该类的一个友元函数。</li>\n<li>一个函数可以是多个类的友元函数，只需要在各个类中分别声明。友元函数的调用与一般函数的调用方式和原理一致。</li>\n<li>友元函数并不是类的成员函数，因此在类外定义的时候不能加上<code>class::function name</code></li>\n</ul>\n<p>2.友元类<br>除了友元函数外，还有友元类，两者统称为友元。友元的作用是提高了程序的运行效率（即减少了类型检查和安全性检查等都需要时间开销），但它破坏了类的封装性和隐藏性，使得非成员函数可以访问类的私有成员。同友元函数一样，其也需要在类中加上关键字friend声明。<br>友元类的所有成员函数都是类的友元函数，能存取类的私有成员和保护成员。</p>\n<ul>\n<li>友元关系不能被继承。</li>\n<li>友元关系是单向的，不具有交换性。若类B是类A的友元，类A不一定是类B的友元，要看在类中是否有相应的声明。</li>\n<li>友元关系不具有传递性。若类B是类A的友元，类C是B的友元，类C不一定是类A的友元，同样要看类中是否有相应的申明。</li>\n</ul>\n<h2 id=\"cast\"><a href=\"#cast\" class=\"headerlink\" title=\"*_cast\"></a>*_cast</h2><p>显式类型转换，C++延续了C风格的强制类型转换的语法。dynamic_cast是动态的，需要运行时支持；其它都是静态检查，相比C风格的类型转换更加细化，增强了类型安全性。C++支持四种关键字对不同形式的类型转换进行分别处理。使用格式：<br><code>转换关键字&lt;类型&gt;(表达式)</code></p>\n<p>1、<code>static_cast</code>和C风格类型转换功能完全相同，它属于在编译时期静态的类型转换。如果把一个double类型转换为整形，形式如下：<br><code>static_cast&lt;int&gt;(0.1);</code><br><code>static_cast</code>功能有所限制，比如不能转化struct类型到int，不能转化指针到double等。另外，它不能在转换中消除const和volatile属性。</p>\n<p>运算符 <strong><code>static_cast</code></strong> <strong>可用于将指向基类的指针转换为指向派生类的指针等操作</strong>。 此类转换并非始终安全。</p>\n<p>在下面的示例中，因为 <code>D* pd2 = static_cast&lt;D*&gt;(pb);</code> 可能有不在 <code>D</code> 内的字段和方法，所以行 <code>B</code> 不安全。 但是，因为 <code>B* pb2 = static_cast&lt;B*&gt;(pd);</code> 始终包含所有 <code>D</code>，所以行 <code>B</code> 是安全的转换。</p>\n<pre><code class=\"c++\">// static_cast_Operator.cpp\n// compile with: /LD\nclass B &#123;&#125;;\n\nclass D : public B &#123;&#125;;\n\nvoid f(B* pb, D* pd) &#123;\n   D* pd2 = static_cast&lt;D*&gt;(pb);   // Not safe, D can have fields\n                                   // and methods that are not in B.\n\n   B* pb2 = static_cast&lt;B*&gt;(pd);   // Safe conversion, D always\n                                   // contains all of B.\n&#125;\n</code></pre>\n<p>与 <a href=\"https://docs.microsoft.com/zh-cn/cpp/cpp/dynamic-cast-operator?view=msvc-170\">dynamic_cast相反</a>，不会对 的转换进行运行时 检查 <code>pb</code>。 由 <code>pb</code> 指向的对象可能不是 <code>D</code> 类型的对象，在这种情况下使用 <code>*pd2</code> 会是灾难性的。 例如，调用 <code>D</code> 类（而非 <code>B</code> 类）的成员函数可能会导致访问冲突</p>\n<p>2、const_cast用于消除引用或者指针的const或者volatile属性。<br><code>const int &amp;ci=100;</code><br><code>int &amp;i=const_cast&lt;int&amp;&gt;(ci);</code><br>通过这种方式，ci引用的内存单元虽然无法通过修改ci改变，但是可以修改i改变内存的值。这里是把const属性消除，这里想多说一点的是把const加上的问题。</p>\n<p>3、<code>dynamic_cast</code>一般出现在类到子类或兄弟类的转换，并要求基类有虚函数。而且它能提供转换后的结果和状态，一旦转换失败则返回空指针。如果没有继承关系的转换一般使用<code>static_cast</code>。</p>\n<p>4、<code>reinterpret_casts</code>一般用作函数指针的转换，而且使用它的代码可移植性很差，因为无法确定编译器的函数调用方式等。有可能会导致函数调用出错，一般不常用。</p>\n<h2 id=\"explicit\"><a href=\"#explicit\" class=\"headerlink\" title=\"explicit\"></a>explicit</h2><p>explicit关键字只能用于修饰只有一个参数的类构造函数，它的作用是表明该构造函数是显示的，而非隐式的，跟它相对应的另一个关键字是implicit，意思是隐藏的，类构造函数默认情况下即声明为implicit(隐式)。</p>\n<p>explicit关键字只对有一个参数的类构造函数有效，如果类构造函数参数大于或等于两个时，是不会产生隐式转换的，所以explicit关键字也就无效了，而除了第一个参数以外的其他参数都有默认值的时候，explicit关键字依然有效。</p>\n<p>除非有心利用，隐式转换常常带来程序逻辑的错误，而且这种错误一旦发生是很难察觉的。原则上应该在所有的构造函数前加explicit关键字，当你有心利用隐式转换的时候再去解除explicit，这样可以大大减少错误的发生。</p>\n<p>隐式转换的含义：在C++中，如果的构造函数只有一个参数时，那么在编译的时候就会有一个缺省的转换操作：将该构造函数对应数据类型的数据转换为该类对象。也就是说<code>CxString string2 = 10;</code>这段代码，编译器自动将整型转换为CxString类对象，实际上等同于<code>CxString string2(10);</code></p>\n<h2 id=\"extern\"><a href=\"#extern\" class=\"headerlink\" title=\"extern\"></a>extern</h2><p>extern意为“外来的”，是存储类声明修饰符。其有两个作用：</p>\n<ul>\n<li>当它与”C”一起连用时，如: <code>extern &quot;C&quot; void fun(int a, int b);</code>则告诉编译器在编译fun这个函数名时按着C的规则去翻译相应的函数名而不是C++的，C++的规则在翻译这个函数名时会把fun这个名字变得面目全非，可能是<code>fun@aBc_int_int#%$</code>也可能是别的，这要看编译器的”脾气”了(不同的编译器采用的方法不一样)，主要是因为C++支持函数的重载。</li>\n<li>当extern不与”C”在一起修饰变量或函数时，如在头文件中<code>: extern int g_Int;</code>它的作用就是声明函数或全局变量的作用范围的关键字，其声明的函数和变量可以在本模块引用其他模块中的定义，记住它是一个声明不是定义，仅仅是暗示这个函数可能在别的源文件里定义，没有其它作用。这样的用处还是有的，就是在程序中取代<code>include “*.h”</code>来声明函数，在一些复杂的项目中，我比较习惯在所有的函数声明前添加extern修饰。</li>\n</ul>\n<p>1、extern 和 static<br>（1）extern 表明该变量在别的地方已经定义过了，在这里要使用那个变量。<br>（2）static 表示静态的变量，分配内存的时候，存储在静态区，不存储在栈上面。<br>static 作用范围是内部连接的关系, 和extern有点相反。static与extern是一对“水火不容”的家伙，也就是说extern和static不能同时修饰一个变量。</p>\n<p>2、extern 和const<br>C++中const修饰的全局常量据有跟static相同的特性，即它们只能作用于本编译模块中，但是const可以与extern连用来声明该常量可以作用于其他编译模块中, 如<code>extern const char g_str[];</code></p>\n"},{"title":"git","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-03-10T13:40:07.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 安装好Git后必须要设置的一步（设置用户名和邮箱）：\n\n```sh\ngit config --global user.name hpstu  \t\t\t\t\t\t # --global为可选项\ngit config --global user.email 571091694@qq.com\n#查看配置\ngit config --global --list                                  # --global可选\ngit config --system --list\n```\n\n## 创建项目\n\n```sh\n#在当前目录新建一个Git代码库\ngit init\n# or\ngit clone [url]\n```\n\n## 查看文件状态\n\n```sh\n# 查看指定文件状态\ngit status [filename]\n# 查看所有文件状态\ngit status\n# 添加所有文件到暂存区\ngit add .\n# 提交暂存区的内容到本地仓库，-m后面可以跟提交信息\ngit commit -m \"提交的信息\"\n```\n\n## 文件.gitignore\n\n有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等。\n在主目录下建立”.gitignore”文件，此文件有如下规则：\n\n1. \\# 表示注释\n2. 可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1，string2.…}）代表可选的字符串等。\n3. 如果名称的最前面有一个感叹号（！），表示例外规则，将不被忽略。\n4. 如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。\n5. 如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。\n\n## git分支\n\n```sh\n# 列出所有本地分支\ngit branch\n# 列出所有远程分支\ngit branch -r\n# 新建一个分支，但依然停留在当前分支\ngit branch [branch-name]\n# 新建一个分支，并切换到该分支\ngit checkout -b [branch-name]\n# 合并指定分支到当前分支\ngit merge [branch-name]\n# 删除分支\ngit branch -d [branch-name]\n# 删除远程分支\ngit push origin --delete [branch-name]\ngit branch -dr [remote/branch]\n```\n\n","source":"_posts/git2.md","raw":"---\ntitle: git\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-03-10 21:40:07\npassword:\nsummary:\ntags:\ncategories:\nkeywords:\ndescription:\n---\n\n## 安装好Git后必须要设置的一步（设置用户名和邮箱）：\n\n```sh\ngit config --global user.name hpstu  \t\t\t\t\t\t # --global为可选项\ngit config --global user.email 571091694@qq.com\n#查看配置\ngit config --global --list                                  # --global可选\ngit config --system --list\n```\n\n## 创建项目\n\n```sh\n#在当前目录新建一个Git代码库\ngit init\n# or\ngit clone [url]\n```\n\n## 查看文件状态\n\n```sh\n# 查看指定文件状态\ngit status [filename]\n# 查看所有文件状态\ngit status\n# 添加所有文件到暂存区\ngit add .\n# 提交暂存区的内容到本地仓库，-m后面可以跟提交信息\ngit commit -m \"提交的信息\"\n```\n\n## 文件.gitignore\n\n有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等。\n在主目录下建立”.gitignore”文件，此文件有如下规则：\n\n1. \\# 表示注释\n2. 可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1，string2.…}）代表可选的字符串等。\n3. 如果名称的最前面有一个感叹号（！），表示例外规则，将不被忽略。\n4. 如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。\n5. 如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。\n\n## git分支\n\n```sh\n# 列出所有本地分支\ngit branch\n# 列出所有远程分支\ngit branch -r\n# 新建一个分支，但依然停留在当前分支\ngit branch [branch-name]\n# 新建一个分支，并切换到该分支\ngit checkout -b [branch-name]\n# 合并指定分支到当前分支\ngit merge [branch-name]\n# 删除分支\ngit branch -d [branch-name]\n# 删除远程分支\ngit push origin --delete [branch-name]\ngit branch -dr [remote/branch]\n```\n\n","slug":"git2","published":1,"updated":"2022-03-10T14:32:14.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0lsyw6d000190tp5lqoca3m","content":"<h2 id=\"安装好Git后必须要设置的一步（设置用户名和邮箱）：\"><a href=\"#安装好Git后必须要设置的一步（设置用户名和邮箱）：\" class=\"headerlink\" title=\"安装好Git后必须要设置的一步（设置用户名和邮箱）：\"></a>安装好Git后必须要设置的一步（设置用户名和邮箱）：</h2><pre class=\"line-numbers language-sh\"><code class=\"language-sh\">git config --global user.name hpstu                           # --global为可选项\ngit config --global user.email 571091694@qq.com\n#查看配置\ngit config --global --list                                  # --global可选\ngit config --system --list\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#在当前目录新建一个Git代码库\ngit init\n# or\ngit clone [url]\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"查看文件状态\"><a href=\"#查看文件状态\" class=\"headerlink\" title=\"查看文件状态\"></a>查看文件状态</h2><pre class=\"line-numbers language-sh\"><code class=\"language-sh\"># 查看指定文件状态\ngit status [filename]\n# 查看所有文件状态\ngit status\n# 添加所有文件到暂存区\ngit add .\n# 提交暂存区的内容到本地仓库，-m后面可以跟提交信息\ngit commit -m \"提交的信息\"\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"文件-gitignore\"><a href=\"#文件-gitignore\" class=\"headerlink\" title=\"文件.gitignore\"></a>文件.gitignore</h2><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等。<br>在主目录下建立”.gitignore”文件，此文件有如下规则：</p>\n<ol>\n<li># 表示注释</li>\n<li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1，string2.…}）代表可选的字符串等。</li>\n<li>如果名称的最前面有一个感叹号（！），表示例外规则，将不被忽略。</li>\n<li>如果名称的最前面是一个路径分隔符（&#x2F;），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li>\n<li>如果名称的最后面是一个路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li>\n</ol>\n<h2 id=\"git分支\"><a href=\"#git分支\" class=\"headerlink\" title=\"git分支\"></a>git分支</h2><pre class=\"line-numbers language-sh\"><code class=\"language-sh\"># 列出所有本地分支\ngit branch\n# 列出所有远程分支\ngit branch -r\n# 新建一个分支，但依然停留在当前分支\ngit branch [branch-name]\n# 新建一个分支，并切换到该分支\ngit checkout -b [branch-name]\n# 合并指定分支到当前分支\ngit merge [branch-name]\n# 删除分支\ngit branch -d [branch-name]\n# 删除远程分支\ngit push origin --delete [branch-name]\ngit branch -dr [remote/branch]\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<h2 id=\"安装好Git后必须要设置的一步（设置用户名和邮箱）：\"><a href=\"#安装好Git后必须要设置的一步（设置用户名和邮箱）：\" class=\"headerlink\" title=\"安装好Git后必须要设置的一步（设置用户名和邮箱）：\"></a>安装好Git后必须要设置的一步（设置用户名和邮箱）：</h2><pre><code class=\"sh\">git config --global user.name hpstu                           # --global为可选项\ngit config --global user.email 571091694@qq.com\n#查看配置\ngit config --global --list                                  # --global可选\ngit config --system --list\n</code></pre>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><pre><code class=\"sh\">#在当前目录新建一个Git代码库\ngit init\n# or\ngit clone [url]\n</code></pre>\n<h2 id=\"查看文件状态\"><a href=\"#查看文件状态\" class=\"headerlink\" title=\"查看文件状态\"></a>查看文件状态</h2><pre><code class=\"sh\"># 查看指定文件状态\ngit status [filename]\n# 查看所有文件状态\ngit status\n# 添加所有文件到暂存区\ngit add .\n# 提交暂存区的内容到本地仓库，-m后面可以跟提交信息\ngit commit -m &quot;提交的信息&quot;\n</code></pre>\n<h2 id=\"文件-gitignore\"><a href=\"#文件-gitignore\" class=\"headerlink\" title=\"文件.gitignore\"></a>文件.gitignore</h2><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等。<br>在主目录下建立”.gitignore”文件，此文件有如下规则：</p>\n<ol>\n<li># 表示注释</li>\n<li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1，string2.…}）代表可选的字符串等。</li>\n<li>如果名称的最前面有一个感叹号（！），表示例外规则，将不被忽略。</li>\n<li>如果名称的最前面是一个路径分隔符（&#x2F;），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li>\n<li>如果名称的最后面是一个路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li>\n</ol>\n<h2 id=\"git分支\"><a href=\"#git分支\" class=\"headerlink\" title=\"git分支\"></a>git分支</h2><pre><code class=\"sh\"># 列出所有本地分支\ngit branch\n# 列出所有远程分支\ngit branch -r\n# 新建一个分支，但依然停留在当前分支\ngit branch [branch-name]\n# 新建一个分支，并切换到该分支\ngit checkout -b [branch-name]\n# 合并指定分支到当前分支\ngit merge [branch-name]\n# 删除分支\ngit branch -d [branch-name]\n# 删除远程分支\ngit push origin --delete [branch-name]\ngit branch -dr [remote/branch]\n</code></pre>\n"},{"title":"hexo","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-03-10T13:35:48.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"","source":"_posts/hexo.md","raw":"---\ntitle: hexo\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-03-10 21:35:48\npassword:\nsummary:\ntags:\ncategories:\nkeywords:\ndescription:\n---\n","slug":"hexo","published":1,"updated":"2022-03-10T13:35:48.329Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0lsyw6e000290tp7eg3346k","content":"","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":""},{"title":"C++面向对象","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-03-11T02:39:35.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n# Object Oriented\n\n## Header(头文件)布局\n\n```c++\n#ifndef __COMPLEX__\n#define __COMPLEX__\n\n#include <cmath>\n\nclass ostream;          // forward declarations\nclass complex;\t\t\t// 前置声明\n\ncomplex&\n__doapl (complex* ths, const complex& r);\n\nclass complex\t\t\t// class declarations\n{\t\t\t\t\t\t// 类-声明\n...\n};\ncomplex::function ...\t// class definition\n    \t\t\t\t\t// 类-定义\n\n#endif\n```\n\n## 构造函数\n\n构造函数不能带返回值，函数名必须与类名一致，可以列表初始化：\n\n```c++\nclass complex\n{\npublic:\ncomplex (double r = 0, double i = 0)\n: re (r), im (i)\t\t\t\t\t\t// initialization list\n{ }\n    \n// assignments 赋值\n complex (double r = 0, double i = 0)\n{ re = r; im = i; }\n\ncomplex& operator += (const complex&);\ndouble real () const { return re; }\ndouble imag () const { return im; }\nprivate:\ndouble re, im;\nfriend complex& __doapl (complex*, const complex&); \n};\n\n```\n\n```c++\n// 以下两种创建对象方式没有区别\ncomplex c1\ncomplex c2()\n// 因此，不能出现以下方式的两种构造函数，会发生歧义    \ncomplex (double r = 0, double i = 0)\n: re (r), im (i) \n{ }\ncomplex () : re(0), im(0) { }\n```\n\n## const\n\n```c++\ndouble real () const { return re; }\n// const 放在这个位置表示他不会改变{}中引进来的数据，也就是不会改变对象中的数据re.(如果你真的不会改变对象中的数据，那你最好一定要加const,防止外部调用时出错)\n// eg. 如果real()声明时没加const，下面就会报错\nconst complex c1(1,3);\ncout << c1.real();\n```\n\n## pass by reference & return by reference\n\n传递参数尽量都传递引用，如果不想改变该参数，就加`const`修饰。\n\n返回值也尽量传递引用（如果可以的话）。\n\n**参数传递和返回其实相当于赋值（也即复制），以什么方式递出去，以什么方式接收是各自的事情。**\n\n`return  xx`  和实参相当于是传递者，返回值 和形参相当于是接收者**即赋值操作：**（  接收 =  传递）\n\n- 函数的返回值用于初始化在调用函数时创建的临时对象(temporary object)，如果返回类型不是引用，在调用函数的地方会将函数返回值复制给临时对象。\n\n- 当函数返回非引用类型时，其返回值既可以是局部对象\n\n- 千万不要返回局部对象的引用！千万不要返回指向局部对象的指针！\n\n```c++\nint& abc(int a, int& result)\t\t// result接收的是该参数的引用。\n\n{\n     result = a;\n     return result;\t\t\t\t\t// 返回的是值，单以引用方式接收\n}\n```\n\n## 操作符重载（操作符也相当于是函数）\n\n 所有的成员函数隐藏了一个`this`参数（即对象的地址指针），在声明函数的时候**不能**显式声明，但可以显式调用\n\n# Object  Based\n\n ## Big Three 三个特殊函数（class with pointer members 必须有copy ctor 和 copy op  )\n\n```c++\nclass String\n{\npublic:\nString(const char* cstr = 0); \nString(const String& str); \t\t\t\t// 1. 拷贝构造函数，参数为相同对象\nString& operator=(const String& str); \t// 2. 拷贝赋值函数，参数为相同对象\n~String(); \t\t\t\t\t\t // 3. 析构函数，当对象死亡时自动调用它，并不是它让对象死亡\nchar* get_c_str() const { return m_data; }\nprivate:\nchar* m_data;\n};\n```\n\n```c++\nComplex* pc = new Complex(1,2);\n...\ndelete pc;\n// 编译器转化为：\n//Complex::~Complex(pc); // 析构函数\n//operator delete(pc); // 释放内存，其内部调用 free(pc)\n```\n\n\n\n","source":"_posts/C面向对象.md","raw":"---\ntitle: C++面向对象\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-03-11 10:39:35\npassword:\nsummary:\ntags:\ncategories:\nkeywords:\ndescription:\n---\n\n# Object Oriented\n\n## Header(头文件)布局\n\n```c++\n#ifndef __COMPLEX__\n#define __COMPLEX__\n\n#include <cmath>\n\nclass ostream;          // forward declarations\nclass complex;\t\t\t// 前置声明\n\ncomplex&\n__doapl (complex* ths, const complex& r);\n\nclass complex\t\t\t// class declarations\n{\t\t\t\t\t\t// 类-声明\n...\n};\ncomplex::function ...\t// class definition\n    \t\t\t\t\t// 类-定义\n\n#endif\n```\n\n## 构造函数\n\n构造函数不能带返回值，函数名必须与类名一致，可以列表初始化：\n\n```c++\nclass complex\n{\npublic:\ncomplex (double r = 0, double i = 0)\n: re (r), im (i)\t\t\t\t\t\t// initialization list\n{ }\n    \n// assignments 赋值\n complex (double r = 0, double i = 0)\n{ re = r; im = i; }\n\ncomplex& operator += (const complex&);\ndouble real () const { return re; }\ndouble imag () const { return im; }\nprivate:\ndouble re, im;\nfriend complex& __doapl (complex*, const complex&); \n};\n\n```\n\n```c++\n// 以下两种创建对象方式没有区别\ncomplex c1\ncomplex c2()\n// 因此，不能出现以下方式的两种构造函数，会发生歧义    \ncomplex (double r = 0, double i = 0)\n: re (r), im (i) \n{ }\ncomplex () : re(0), im(0) { }\n```\n\n## const\n\n```c++\ndouble real () const { return re; }\n// const 放在这个位置表示他不会改变{}中引进来的数据，也就是不会改变对象中的数据re.(如果你真的不会改变对象中的数据，那你最好一定要加const,防止外部调用时出错)\n// eg. 如果real()声明时没加const，下面就会报错\nconst complex c1(1,3);\ncout << c1.real();\n```\n\n## pass by reference & return by reference\n\n传递参数尽量都传递引用，如果不想改变该参数，就加`const`修饰。\n\n返回值也尽量传递引用（如果可以的话）。\n\n**参数传递和返回其实相当于赋值（也即复制），以什么方式递出去，以什么方式接收是各自的事情。**\n\n`return  xx`  和实参相当于是传递者，返回值 和形参相当于是接收者**即赋值操作：**（  接收 =  传递）\n\n- 函数的返回值用于初始化在调用函数时创建的临时对象(temporary object)，如果返回类型不是引用，在调用函数的地方会将函数返回值复制给临时对象。\n\n- 当函数返回非引用类型时，其返回值既可以是局部对象\n\n- 千万不要返回局部对象的引用！千万不要返回指向局部对象的指针！\n\n```c++\nint& abc(int a, int& result)\t\t// result接收的是该参数的引用。\n\n{\n     result = a;\n     return result;\t\t\t\t\t// 返回的是值，单以引用方式接收\n}\n```\n\n## 操作符重载（操作符也相当于是函数）\n\n 所有的成员函数隐藏了一个`this`参数（即对象的地址指针），在声明函数的时候**不能**显式声明，但可以显式调用\n\n# Object  Based\n\n ## Big Three 三个特殊函数（class with pointer members 必须有copy ctor 和 copy op  )\n\n```c++\nclass String\n{\npublic:\nString(const char* cstr = 0); \nString(const String& str); \t\t\t\t// 1. 拷贝构造函数，参数为相同对象\nString& operator=(const String& str); \t// 2. 拷贝赋值函数，参数为相同对象\n~String(); \t\t\t\t\t\t // 3. 析构函数，当对象死亡时自动调用它，并不是它让对象死亡\nchar* get_c_str() const { return m_data; }\nprivate:\nchar* m_data;\n};\n```\n\n```c++\nComplex* pc = new Complex(1,2);\n...\ndelete pc;\n// 编译器转化为：\n//Complex::~Complex(pc); // 析构函数\n//operator delete(pc); // 释放内存，其内部调用 free(pc)\n```\n\n\n\n","slug":"C面向对象","published":1,"updated":"2022-03-11T05:29:38.312Z","_id":"cl0lyul8r0000k8tp43jm4vfr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Object-Oriented\"><a href=\"#Object-Oriented\" class=\"headerlink\" title=\"Object Oriented\"></a>Object Oriented</h1><h2 id=\"Header-头文件-布局\"><a href=\"#Header-头文件-布局\" class=\"headerlink\" title=\"Header(头文件)布局\"></a>Header(头文件)布局</h2><pre class=\"line-numbers language-c++\"><code class=\"language-c++\">#ifndef __COMPLEX__\n#define __COMPLEX__\n\n#include <cmath>\n\nclass ostream;          // forward declarations\nclass complex;            // 前置声明\n\ncomplex&\n__doapl (complex* ths, const complex& r);\n\nclass complex            // class declarations\n&#123;                        // 类-声明\n...\n&#125;;\ncomplex::function ...    // class definition\n                        // 类-定义\n\n#endif\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>构造函数不能带返回值，函数名必须与类名一致，可以列表初始化：</p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">class complex\n&#123;\npublic:\ncomplex (double r = 0, double i = 0)\n: re (r), im (i)                        // initialization list\n&#123; &#125;\n    \n// assignments 赋值\n complex (double r = 0, double i = 0)\n&#123; re = r; im = i; &#125;\n\ncomplex& operator += (const complex&);\ndouble real () const &#123; return re; &#125;\ndouble imag () const &#123; return im; &#125;\nprivate:\ndouble re, im;\nfriend complex& __doapl (complex*, const complex&); \n&#125;;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">// 以下两种创建对象方式没有区别\ncomplex c1\ncomplex c2()\n// 因此，不能出现以下方式的两种构造函数，会发生歧义    \ncomplex (double r = 0, double i = 0)\n: re (r), im (i) \n&#123; &#125;\ncomplex () : re(0), im(0) &#123; &#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><pre class=\"line-numbers language-c++\"><code class=\"language-c++\">double real () const &#123; return re; &#125;\n// const 放在这个位置表示他不会改变&#123;&#125;中引进来的数据，也就是不会改变对象中的数据re.(如果你真的不会改变对象中的数据，那你最好一定要加const,防止外部调用时出错)\n// eg. 如果real()声明时没加const，下面就会报错\nconst complex c1(1,3);\ncout << c1.real();\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"pass-by-reference-amp-return-by-reference\"><a href=\"#pass-by-reference-amp-return-by-reference\" class=\"headerlink\" title=\"pass by reference &amp; return by reference\"></a>pass by reference &amp; return by reference</h2><p>传递参数尽量都传递引用，如果不想改变该参数，就加<code>const</code>修饰。</p>\n<p>返回值也尽量传递引用（如果可以的话）。</p>\n<p><strong>参数传递和返回其实相当于赋值（也即复制），以什么方式递出去，以什么方式接收是各自的事情。</strong></p>\n<p><code>return  xx</code>  和实参相当于是传递者，返回值 和形参相当于是接收者<strong>即赋值操作：</strong>（  接收 &#x3D;  传递）</p>\n<ul>\n<li><p>函数的返回值用于初始化在调用函数时创建的临时对象(temporary object)，如果返回类型不是引用，在调用函数的地方会将函数返回值复制给临时对象。</p>\n</li>\n<li><p>当函数返回非引用类型时，其返回值既可以是局部对象</p>\n</li>\n<li><p>千万不要返回局部对象的引用！千万不要返回指向局部对象的指针！</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">int& abc(int a, int& result)        // result接收的是该参数的引用。\n\n&#123;\n     result = a;\n     return result;                    // 返回的是值，单以引用方式接收\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"操作符重载（操作符也相当于是函数）\"><a href=\"#操作符重载（操作符也相当于是函数）\" class=\"headerlink\" title=\"操作符重载（操作符也相当于是函数）\"></a>操作符重载（操作符也相当于是函数）</h2><p> 所有的成员函数隐藏了一个<code>this</code>参数（即对象的地址指针），在声明函数的时候<strong>不能</strong>显式声明，但可以显式调用</p>\n<h1 id=\"Object-Based\"><a href=\"#Object-Based\" class=\"headerlink\" title=\"Object  Based\"></a>Object  Based</h1><h2 id=\"Big-Three-三个特殊函数（class-with-pointer-members-必须有copy-ctor-和-copy-op\"><a href=\"#Big-Three-三个特殊函数（class-with-pointer-members-必须有copy-ctor-和-copy-op\" class=\"headerlink\" title=\"Big Three 三个特殊函数（class with pointer members 必须有copy ctor 和 copy op  )\"></a>Big Three 三个特殊函数（class with pointer members 必须有copy ctor 和 copy op  )</h2><pre class=\"line-numbers language-c++\"><code class=\"language-c++\">class String\n&#123;\npublic:\nString(const char* cstr = 0); \nString(const String& str);                 // 1. 拷贝构造函数，参数为相同对象\nString& operator=(const String& str);     // 2. 拷贝赋值函数，参数为相同对象\n~String();                          // 3. 析构函数，当对象死亡时自动调用它，并不是它让对象死亡\nchar* get_c_str() const &#123; return m_data; &#125;\nprivate:\nchar* m_data;\n&#125;;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">Complex* pc = new Complex(1,2);\n...\ndelete pc;\n// 编译器转化为：\n//Complex::~Complex(pc); // 析构函数\n//operator delete(pc); // 释放内存，其内部调用 free(pc)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<h1 id=\"Object-Oriented\"><a href=\"#Object-Oriented\" class=\"headerlink\" title=\"Object Oriented\"></a>Object Oriented</h1><h2 id=\"Header-头文件-布局\"><a href=\"#Header-头文件-布局\" class=\"headerlink\" title=\"Header(头文件)布局\"></a>Header(头文件)布局</h2><pre><code class=\"c++\">#ifndef __COMPLEX__\n#define __COMPLEX__\n\n#include &lt;cmath&gt;\n\nclass ostream;          // forward declarations\nclass complex;            // 前置声明\n\ncomplex&amp;\n__doapl (complex* ths, const complex&amp; r);\n\nclass complex            // class declarations\n&#123;                        // 类-声明\n...\n&#125;;\ncomplex::function ...    // class definition\n                        // 类-定义\n\n#endif\n</code></pre>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>构造函数不能带返回值，函数名必须与类名一致，可以列表初始化：</p>\n<pre><code class=\"c++\">class complex\n&#123;\npublic:\ncomplex (double r = 0, double i = 0)\n: re (r), im (i)                        // initialization list\n&#123; &#125;\n    \n// assignments 赋值\n complex (double r = 0, double i = 0)\n&#123; re = r; im = i; &#125;\n\ncomplex&amp; operator += (const complex&amp;);\ndouble real () const &#123; return re; &#125;\ndouble imag () const &#123; return im; &#125;\nprivate:\ndouble re, im;\nfriend complex&amp; __doapl (complex*, const complex&amp;); \n&#125;;\n</code></pre>\n<pre><code class=\"c++\">// 以下两种创建对象方式没有区别\ncomplex c1\ncomplex c2()\n// 因此，不能出现以下方式的两种构造函数，会发生歧义    \ncomplex (double r = 0, double i = 0)\n: re (r), im (i) \n&#123; &#125;\ncomplex () : re(0), im(0) &#123; &#125;\n</code></pre>\n<h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><pre><code class=\"c++\">double real () const &#123; return re; &#125;\n// const 放在这个位置表示他不会改变&#123;&#125;中引进来的数据，也就是不会改变对象中的数据re.(如果你真的不会改变对象中的数据，那你最好一定要加const,防止外部调用时出错)\n// eg. 如果real()声明时没加const，下面就会报错\nconst complex c1(1,3);\ncout &lt;&lt; c1.real();\n</code></pre>\n<h2 id=\"pass-by-reference-amp-return-by-reference\"><a href=\"#pass-by-reference-amp-return-by-reference\" class=\"headerlink\" title=\"pass by reference &amp; return by reference\"></a>pass by reference &amp; return by reference</h2><p>传递参数尽量都传递引用，如果不想改变该参数，就加<code>const</code>修饰。</p>\n<p>返回值也尽量传递引用（如果可以的话）。</p>\n<p><strong>参数传递和返回其实相当于赋值（也即复制），以什么方式递出去，以什么方式接收是各自的事情。</strong></p>\n<p><code>return  xx</code>  和实参相当于是传递者，返回值 和形参相当于是接收者<strong>即赋值操作：</strong>（  接收 &#x3D;  传递）</p>\n<ul>\n<li><p>函数的返回值用于初始化在调用函数时创建的临时对象(temporary object)，如果返回类型不是引用，在调用函数的地方会将函数返回值复制给临时对象。</p>\n</li>\n<li><p>当函数返回非引用类型时，其返回值既可以是局部对象</p>\n</li>\n<li><p>千万不要返回局部对象的引用！千万不要返回指向局部对象的指针！</p>\n</li>\n</ul>\n<pre><code class=\"c++\">int&amp; abc(int a, int&amp; result)        // result接收的是该参数的引用。\n\n&#123;\n     result = a;\n     return result;                    // 返回的是值，单以引用方式接收\n&#125;\n</code></pre>\n<h2 id=\"操作符重载（操作符也相当于是函数）\"><a href=\"#操作符重载（操作符也相当于是函数）\" class=\"headerlink\" title=\"操作符重载（操作符也相当于是函数）\"></a>操作符重载（操作符也相当于是函数）</h2><p> 所有的成员函数隐藏了一个<code>this</code>参数（即对象的地址指针），在声明函数的时候<strong>不能</strong>显式声明，但可以显式调用</p>\n<h1 id=\"Object-Based\"><a href=\"#Object-Based\" class=\"headerlink\" title=\"Object  Based\"></a>Object  Based</h1><h2 id=\"Big-Three-三个特殊函数（class-with-pointer-members-必须有copy-ctor-和-copy-op\"><a href=\"#Big-Three-三个特殊函数（class-with-pointer-members-必须有copy-ctor-和-copy-op\" class=\"headerlink\" title=\"Big Three 三个特殊函数（class with pointer members 必须有copy ctor 和 copy op  )\"></a>Big Three 三个特殊函数（class with pointer members 必须有copy ctor 和 copy op  )</h2><pre><code class=\"c++\">class String\n&#123;\npublic:\nString(const char* cstr = 0); \nString(const String&amp; str);                 // 1. 拷贝构造函数，参数为相同对象\nString&amp; operator=(const String&amp; str);     // 2. 拷贝赋值函数，参数为相同对象\n~String();                          // 3. 析构函数，当对象死亡时自动调用它，并不是它让对象死亡\nchar* get_c_str() const &#123; return m_data; &#125;\nprivate:\nchar* m_data;\n&#125;;\n</code></pre>\n<pre><code class=\"c++\">Complex* pc = new Complex(1,2);\n...\ndelete pc;\n// 编译器转化为：\n//Complex::~Complex(pc); // 析构函数\n//operator delete(pc); // 释放内存，其内部调用 free(pc)\n</code></pre>\n"},{"title":"Eigen","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-03-13T12:03:14.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n# Eigen\n\n\n\n```c++\na = a.transpose(); // !!! do NOT do this !!!\n// For in-place transposition, as for instance in a = a.transpose(), simply use the transposeInPlace() function:\na.transposeInPlace();\n//  Eigen treats matrix multiplication as a special case and takes care of introducing a temporary here, so it will compile m=m*m as:\n// tmp = m*m;\n// m = tmp;\n\n```\n\n```C++\n#include <iostream>\n#include <Eigen/Dense>\n \nusing namespace std;\nint main()\n{\n  Eigen::Matrix2d mat;\n  mat << 1, 2,\n         3, 4;\n  cout << \"Here is mat.sum():       \" << mat.sum()       << endl;\n  cout << \"Here is mat.prod():      \" << mat.prod()      << endl;\n  cout << \"Here is mat.mean():      \" << mat.mean()      << endl;\n  cout << \"Here is mat.minCoeff():  \" << mat.minCoeff()  << endl;\n  cout << \"Here is mat.maxCoeff():  \" << mat.maxCoeff()  << endl;\n  cout << \"Here is mat.trace():     \" << mat.trace()     << endl;\n}\n/*\nHere is mat.sum():       10\nHere is mat.prod():      24\nHere is mat.mean():      2.5\nHere is mat.minCoeff():  1\nHere is mat.maxCoeff():  4\nHere is mat.trace():     5\n*/\n\n```\n\n","source":"_posts/Eigen.md","raw":"---\ntitle: Eigen\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-03-13 20:03:14\npassword:\nsummary:\ntags:\ncategories:\nkeywords:\ndescription:\n---\n\n# Eigen\n\n\n\n```c++\na = a.transpose(); // !!! do NOT do this !!!\n// For in-place transposition, as for instance in a = a.transpose(), simply use the transposeInPlace() function:\na.transposeInPlace();\n//  Eigen treats matrix multiplication as a special case and takes care of introducing a temporary here, so it will compile m=m*m as:\n// tmp = m*m;\n// m = tmp;\n\n```\n\n```C++\n#include <iostream>\n#include <Eigen/Dense>\n \nusing namespace std;\nint main()\n{\n  Eigen::Matrix2d mat;\n  mat << 1, 2,\n         3, 4;\n  cout << \"Here is mat.sum():       \" << mat.sum()       << endl;\n  cout << \"Here is mat.prod():      \" << mat.prod()      << endl;\n  cout << \"Here is mat.mean():      \" << mat.mean()      << endl;\n  cout << \"Here is mat.minCoeff():  \" << mat.minCoeff()  << endl;\n  cout << \"Here is mat.maxCoeff():  \" << mat.maxCoeff()  << endl;\n  cout << \"Here is mat.trace():     \" << mat.trace()     << endl;\n}\n/*\nHere is mat.sum():       10\nHere is mat.prod():      24\nHere is mat.mean():      2.5\nHere is mat.minCoeff():  1\nHere is mat.maxCoeff():  4\nHere is mat.trace():     5\n*/\n\n```\n\n","slug":"Eigen","published":1,"updated":"2022-03-13T12:18:03.238Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0pdjok20000zotp2rd6cj04","content":"<h1 id=\"Eigen\"><a href=\"#Eigen\" class=\"headerlink\" title=\"Eigen\"></a>Eigen</h1><pre class=\"line-numbers language-c++\"><code class=\"language-c++\">a = a.transpose(); // !!! do NOT do this !!!\n// For in-place transposition, as for instance in a = a.transpose(), simply use the transposeInPlace() function:\na.transposeInPlace();\n//  Eigen treats matrix multiplication as a special case and takes care of introducing a temporary here, so it will compile m=m*m as:\n// tmp = m*m;\n// m = tmp;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-C++\"><code class=\"language-C++\">#include <iostream>\n#include <Eigen/Dense>\n \nusing namespace std;\nint main()\n&#123;\n  Eigen::Matrix2d mat;\n  mat << 1, 2,\n         3, 4;\n  cout << \"Here is mat.sum():       \" << mat.sum()       << endl;\n  cout << \"Here is mat.prod():      \" << mat.prod()      << endl;\n  cout << \"Here is mat.mean():      \" << mat.mean()      << endl;\n  cout << \"Here is mat.minCoeff():  \" << mat.minCoeff()  << endl;\n  cout << \"Here is mat.maxCoeff():  \" << mat.maxCoeff()  << endl;\n  cout << \"Here is mat.trace():     \" << mat.trace()     << endl;\n&#125;\n/*\nHere is mat.sum():       10\nHere is mat.prod():      24\nHere is mat.mean():      2.5\nHere is mat.minCoeff():  1\nHere is mat.maxCoeff():  4\nHere is mat.trace():     5\n*/\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<h1 id=\"Eigen\"><a href=\"#Eigen\" class=\"headerlink\" title=\"Eigen\"></a>Eigen</h1><pre><code class=\"c++\">a = a.transpose(); // !!! do NOT do this !!!\n// For in-place transposition, as for instance in a = a.transpose(), simply use the transposeInPlace() function:\na.transposeInPlace();\n//  Eigen treats matrix multiplication as a special case and takes care of introducing a temporary here, so it will compile m=m*m as:\n// tmp = m*m;\n// m = tmp;\n</code></pre>\n<pre><code class=\"C++\">#include &lt;iostream&gt;\n#include &lt;Eigen/Dense&gt;\n \nusing namespace std;\nint main()\n&#123;\n  Eigen::Matrix2d mat;\n  mat &lt;&lt; 1, 2,\n         3, 4;\n  cout &lt;&lt; &quot;Here is mat.sum():       &quot; &lt;&lt; mat.sum()       &lt;&lt; endl;\n  cout &lt;&lt; &quot;Here is mat.prod():      &quot; &lt;&lt; mat.prod()      &lt;&lt; endl;\n  cout &lt;&lt; &quot;Here is mat.mean():      &quot; &lt;&lt; mat.mean()      &lt;&lt; endl;\n  cout &lt;&lt; &quot;Here is mat.minCoeff():  &quot; &lt;&lt; mat.minCoeff()  &lt;&lt; endl;\n  cout &lt;&lt; &quot;Here is mat.maxCoeff():  &quot; &lt;&lt; mat.maxCoeff()  &lt;&lt; endl;\n  cout &lt;&lt; &quot;Here is mat.trace():     &quot; &lt;&lt; mat.trace()     &lt;&lt; endl;\n&#125;\n/*\nHere is mat.sum():       10\nHere is mat.prod():      24\nHere is mat.mean():      2.5\nHere is mat.minCoeff():  1\nHere is mat.maxCoeff():  4\nHere is mat.trace():     5\n*/\n</code></pre>\n"},{"title":"c++多线程","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-03-12T07:17:55.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n# C++多线程\n\n引入头文件：\n\n```c++\n#include <thread>  \n```\n\n链接库：\n\n```cmake\ntarget_link_libraries(xxx pthread)\n```\n**线程**\n• 进程可以包含多个线程\n• 主线程：从main函数开始，main函数执行完，主线程结束，进程结束\n• 其他线程：需要我们自己创建，入口可以是函数、类、lambda表达式\n• 进程是否执行完毕的标志是：主线程是否执行完，如果主线程执行完毕了，就代表整个进程执行完\n了，一般来说，此时如果其他子线程还没有执行完，也会被强行终止\n\n## 创建子线程\n\n```c++\nstd::thread\t// 多线程类\n```\n\n```c++\nint main(){\n    \n    thrad th1(xx);\t\t// 使用其创建子线程对象的时候，子线程就直接运行了。\n    ...\n\tth1.join();\t\t\t// 汇合，表示等待子线程运行完，主线程再接着运行。（小溪汇入大河）\n}\n```\n\n```c++\nint main(){\n    \n    thrad th2(xx);\t\t// 使用其创建子线程对象的时候，子线程就直接运行了。\n    ...\n\tth2.detach();\t\t// 分离，表示子线程脱离子线程，各走各的，互不相关（分流了），注意，此时如果主线程运行完毕，则直接关闭所有线程，子线程没运行完也停止运行。（夭折了），少用。\n    \n    th2.joinable()\t\t// joinable()判断是否可以成功使用join()或者detach(),如果返回true，证明可以调用join()或者detach(),如果返回false，证明调用过join()或者detach()，join()和detach()都不能再调用了\n}\n\n```\n\n查看线程ID:\n\n```c++\n this_thread::get_id()\t//  this_thread是一个namespace,\n```\n## 进程间安全（防止读写冲突，就给它上锁）\n```c++\n#include <mutex>  // 互斥锁头文件 ，mutex也是一个对象，相当于一把锁。\n```\n\n使用方法：\n\n先创建一个锁对象：\n\n```c++\nmutex myMutex;\n```\n\n上锁是防止多个线程**同时**对**同一个数据快**进行读写，造成冲突，（也就是前一个线程刚写入一半数据，你就过来读了），正确姿势是等他写完你再读，或读完你再写。所以，当其中一个线程拿到一把锁时：\n\n```c++\n// 线程1\nmyMutex.lock();\t\t\t\ncout << \"putInData 子线程：放入一个数据\" << i << endl;\ndataQuene.push_back(i);\nmyMutex.unlock();\n```\n\n```C++\n// 线程2\nmyMutex.lock();\t\t\t\ncout << \"takeOutData 子线程：取出一个数据\" << dataQuene.front() << endl;\ndataQuene.pop_front();\nmyMutex.unlock();\n```\n\n这两个线程为互斥关系，各自当执行到`myMutex.lock()`时，必须等一个拿到锁的代码快完整执行到释放锁`myMutex.unlock()`了，另一个才可能拿到锁继续执行。\n\n> 注意：`lock()`与`unlock()`必须成对出现\n\n**lock_guard**\n\n- 内部构造时相当于执行了lock，析构时相当于执行unlock\n- 简单但不如lock()和unlock()灵活，通过大括号来实现，控制生命周期\n\n```c++\nmutex myMutex;\n\n{\n    lock_guard<mutex> dataGuard(myMutex);\t\t// lock_guard<mutex>创建对象，参数为锁对象\n\t...\n    ...    \n}\n```\n\n**unique_lock**\n\nstd::unique_lock要比std::lock_guard功能更多，有更多的成员函数，更灵活,但是更灵活的代价是占用空间相对更大一点且相对更慢一点\n\n```\nmutex myMutex;\n\n{\n    unique_lock<mutex> dataOutUnique(myMutex);\t// unique_lock<mutex>创建对象，参数为锁对象\n\t...\n    ...    \n}\n```\n\n**死锁产生原因及防止方法**\n\n当两个线程同时拿着两把及以上的相同的锁时，上锁的顺序必须要一致，否则会发生死锁。","source":"_posts/c多线程.md","raw":"---\ntitle: c++多线程\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-03-12 15:17:55\npassword:\nsummary:\ntags:\ncategories:\nkeywords:\ndescription:\n---\n\n# C++多线程\n\n引入头文件：\n\n```c++\n#include <thread>  \n```\n\n链接库：\n\n```cmake\ntarget_link_libraries(xxx pthread)\n```\n**线程**\n• 进程可以包含多个线程\n• 主线程：从main函数开始，main函数执行完，主线程结束，进程结束\n• 其他线程：需要我们自己创建，入口可以是函数、类、lambda表达式\n• 进程是否执行完毕的标志是：主线程是否执行完，如果主线程执行完毕了，就代表整个进程执行完\n了，一般来说，此时如果其他子线程还没有执行完，也会被强行终止\n\n## 创建子线程\n\n```c++\nstd::thread\t// 多线程类\n```\n\n```c++\nint main(){\n    \n    thrad th1(xx);\t\t// 使用其创建子线程对象的时候，子线程就直接运行了。\n    ...\n\tth1.join();\t\t\t// 汇合，表示等待子线程运行完，主线程再接着运行。（小溪汇入大河）\n}\n```\n\n```c++\nint main(){\n    \n    thrad th2(xx);\t\t// 使用其创建子线程对象的时候，子线程就直接运行了。\n    ...\n\tth2.detach();\t\t// 分离，表示子线程脱离子线程，各走各的，互不相关（分流了），注意，此时如果主线程运行完毕，则直接关闭所有线程，子线程没运行完也停止运行。（夭折了），少用。\n    \n    th2.joinable()\t\t// joinable()判断是否可以成功使用join()或者detach(),如果返回true，证明可以调用join()或者detach(),如果返回false，证明调用过join()或者detach()，join()和detach()都不能再调用了\n}\n\n```\n\n查看线程ID:\n\n```c++\n this_thread::get_id()\t//  this_thread是一个namespace,\n```\n## 进程间安全（防止读写冲突，就给它上锁）\n```c++\n#include <mutex>  // 互斥锁头文件 ，mutex也是一个对象，相当于一把锁。\n```\n\n使用方法：\n\n先创建一个锁对象：\n\n```c++\nmutex myMutex;\n```\n\n上锁是防止多个线程**同时**对**同一个数据快**进行读写，造成冲突，（也就是前一个线程刚写入一半数据，你就过来读了），正确姿势是等他写完你再读，或读完你再写。所以，当其中一个线程拿到一把锁时：\n\n```c++\n// 线程1\nmyMutex.lock();\t\t\t\ncout << \"putInData 子线程：放入一个数据\" << i << endl;\ndataQuene.push_back(i);\nmyMutex.unlock();\n```\n\n```C++\n// 线程2\nmyMutex.lock();\t\t\t\ncout << \"takeOutData 子线程：取出一个数据\" << dataQuene.front() << endl;\ndataQuene.pop_front();\nmyMutex.unlock();\n```\n\n这两个线程为互斥关系，各自当执行到`myMutex.lock()`时，必须等一个拿到锁的代码快完整执行到释放锁`myMutex.unlock()`了，另一个才可能拿到锁继续执行。\n\n> 注意：`lock()`与`unlock()`必须成对出现\n\n**lock_guard**\n\n- 内部构造时相当于执行了lock，析构时相当于执行unlock\n- 简单但不如lock()和unlock()灵活，通过大括号来实现，控制生命周期\n\n```c++\nmutex myMutex;\n\n{\n    lock_guard<mutex> dataGuard(myMutex);\t\t// lock_guard<mutex>创建对象，参数为锁对象\n\t...\n    ...    \n}\n```\n\n**unique_lock**\n\nstd::unique_lock要比std::lock_guard功能更多，有更多的成员函数，更灵活,但是更灵活的代价是占用空间相对更大一点且相对更慢一点\n\n```\nmutex myMutex;\n\n{\n    unique_lock<mutex> dataOutUnique(myMutex);\t// unique_lock<mutex>创建对象，参数为锁对象\n\t...\n    ...    \n}\n```\n\n**死锁产生原因及防止方法**\n\n当两个线程同时拿着两把及以上的相同的锁时，上锁的顺序必须要一致，否则会发生死锁。","slug":"c多线程","published":1,"updated":"2022-03-12T10:41:48.431Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0pdjok30001zotp3i1jhc70","content":"<h1 id=\"C-多线程\"><a href=\"#C-多线程\" class=\"headerlink\" title=\"C++多线程\"></a>C++多线程</h1><p>引入头文件：</p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">#include <thread>  \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>链接库：</p>\n<pre class=\"line-numbers language-cmake\"><code class=\"language-cmake\">target_link_libraries(xxx pthread)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>线程</strong><br>• 进程可以包含多个线程<br>• 主线程：从main函数开始，main函数执行完，主线程结束，进程结束<br>• 其他线程：需要我们自己创建，入口可以是函数、类、lambda表达式<br>• 进程是否执行完毕的标志是：主线程是否执行完，如果主线程执行完毕了，就代表整个进程执行完<br>了，一般来说，此时如果其他子线程还没有执行完，也会被强行终止</p>\n<h2 id=\"创建子线程\"><a href=\"#创建子线程\" class=\"headerlink\" title=\"创建子线程\"></a>创建子线程</h2><pre class=\"line-numbers language-c++\"><code class=\"language-c++\">std::thread    // 多线程类\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">int main()&#123;\n    \n    thrad th1(xx);        // 使用其创建子线程对象的时候，子线程就直接运行了。\n    ...\n    th1.join();            // 汇合，表示等待子线程运行完，主线程再接着运行。（小溪汇入大河）\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">int main()&#123;\n    \n    thrad th2(xx);        // 使用其创建子线程对象的时候，子线程就直接运行了。\n    ...\n    th2.detach();        // 分离，表示子线程脱离子线程，各走各的，互不相关（分流了），注意，此时如果主线程运行完毕，则直接关闭所有线程，子线程没运行完也停止运行。（夭折了），少用。\n    \n    th2.joinable()        // joinable()判断是否可以成功使用join()或者detach(),如果返回true，证明可以调用join()或者detach(),如果返回false，证明调用过join()或者detach()，join()和detach()都不能再调用了\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查看线程ID:</p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\"> this_thread::get_id()    //  this_thread是一个namespace,\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"进程间安全（防止读写冲突，就给它上锁）\"><a href=\"#进程间安全（防止读写冲突，就给它上锁）\" class=\"headerlink\" title=\"进程间安全（防止读写冲突，就给它上锁）\"></a>进程间安全（防止读写冲突，就给它上锁）</h2><pre class=\"line-numbers language-c++\"><code class=\"language-c++\">#include <mutex>  // 互斥锁头文件 ，mutex也是一个对象，相当于一把锁。\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>使用方法：</p>\n<p>先创建一个锁对象：</p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">mutex myMutex;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>上锁是防止多个线程<strong>同时</strong>对<strong>同一个数据快</strong>进行读写，造成冲突，（也就是前一个线程刚写入一半数据，你就过来读了），正确姿势是等他写完你再读，或读完你再写。所以，当其中一个线程拿到一把锁时：</p>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">// 线程1\nmyMutex.lock();            \ncout << \"putInData 子线程：放入一个数据\" << i << endl;\ndataQuene.push_back(i);\nmyMutex.unlock();\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-C++\"><code class=\"language-C++\">// 线程2\nmyMutex.lock();            \ncout << \"takeOutData 子线程：取出一个数据\" << dataQuene.front() << endl;\ndataQuene.pop_front();\nmyMutex.unlock();\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这两个线程为互斥关系，各自当执行到<code>myMutex.lock()</code>时，必须等一个拿到锁的代码快完整执行到释放锁<code>myMutex.unlock()</code>了，另一个才可能拿到锁继续执行。</p>\n<blockquote>\n<p>注意：<code>lock()</code>与<code>unlock()</code>必须成对出现</p>\n</blockquote>\n<p><strong>lock_guard</strong></p>\n<ul>\n<li>内部构造时相当于执行了lock，析构时相当于执行unlock</li>\n<li>简单但不如lock()和unlock()灵活，通过大括号来实现，控制生命周期</li>\n</ul>\n<pre class=\"line-numbers language-c++\"><code class=\"language-c++\">mutex myMutex;\n\n&#123;\n    lock_guard<mutex> dataGuard(myMutex);        // lock_guard<mutex>创建对象，参数为锁对象\n    ...\n    ...    \n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>unique_lock</strong></p>\n<p>std::unique_lock要比std::lock_guard功能更多，有更多的成员函数，更灵活,但是更灵活的代价是占用空间相对更大一点且相对更慢一点</p>\n<pre><code>mutex myMutex;\n\n&#123;\n    unique_lock&lt;mutex&gt; dataOutUnique(myMutex);    // unique_lock&lt;mutex&gt;创建对象，参数为锁对象\n    ...\n    ...    \n&#125;\n</code></pre>\n<p><strong>死锁产生原因及防止方法</strong></p>\n<p>当两个线程同时拿着两把及以上的相同的锁时，上锁的顺序必须要一致，否则会发生死锁。</p>\n","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<h1 id=\"C-多线程\"><a href=\"#C-多线程\" class=\"headerlink\" title=\"C++多线程\"></a>C++多线程</h1><p>引入头文件：</p>\n<pre><code class=\"c++\">#include &lt;thread&gt;  \n</code></pre>\n<p>链接库：</p>\n<pre><code class=\"cmake\">target_link_libraries(xxx pthread)\n</code></pre>\n<p><strong>线程</strong><br>• 进程可以包含多个线程<br>• 主线程：从main函数开始，main函数执行完，主线程结束，进程结束<br>• 其他线程：需要我们自己创建，入口可以是函数、类、lambda表达式<br>• 进程是否执行完毕的标志是：主线程是否执行完，如果主线程执行完毕了，就代表整个进程执行完<br>了，一般来说，此时如果其他子线程还没有执行完，也会被强行终止</p>\n<h2 id=\"创建子线程\"><a href=\"#创建子线程\" class=\"headerlink\" title=\"创建子线程\"></a>创建子线程</h2><pre><code class=\"c++\">std::thread    // 多线程类\n</code></pre>\n<pre><code class=\"c++\">int main()&#123;\n    \n    thrad th1(xx);        // 使用其创建子线程对象的时候，子线程就直接运行了。\n    ...\n    th1.join();            // 汇合，表示等待子线程运行完，主线程再接着运行。（小溪汇入大河）\n&#125;\n</code></pre>\n<pre><code class=\"c++\">int main()&#123;\n    \n    thrad th2(xx);        // 使用其创建子线程对象的时候，子线程就直接运行了。\n    ...\n    th2.detach();        // 分离，表示子线程脱离子线程，各走各的，互不相关（分流了），注意，此时如果主线程运行完毕，则直接关闭所有线程，子线程没运行完也停止运行。（夭折了），少用。\n    \n    th2.joinable()        // joinable()判断是否可以成功使用join()或者detach(),如果返回true，证明可以调用join()或者detach(),如果返回false，证明调用过join()或者detach()，join()和detach()都不能再调用了\n&#125;\n</code></pre>\n<p>查看线程ID:</p>\n<pre><code class=\"c++\"> this_thread::get_id()    //  this_thread是一个namespace,\n</code></pre>\n<h2 id=\"进程间安全（防止读写冲突，就给它上锁）\"><a href=\"#进程间安全（防止读写冲突，就给它上锁）\" class=\"headerlink\" title=\"进程间安全（防止读写冲突，就给它上锁）\"></a>进程间安全（防止读写冲突，就给它上锁）</h2><pre><code class=\"c++\">#include &lt;mutex&gt;  // 互斥锁头文件 ，mutex也是一个对象，相当于一把锁。\n</code></pre>\n<p>使用方法：</p>\n<p>先创建一个锁对象：</p>\n<pre><code class=\"c++\">mutex myMutex;\n</code></pre>\n<p>上锁是防止多个线程<strong>同时</strong>对<strong>同一个数据快</strong>进行读写，造成冲突，（也就是前一个线程刚写入一半数据，你就过来读了），正确姿势是等他写完你再读，或读完你再写。所以，当其中一个线程拿到一把锁时：</p>\n<pre><code class=\"c++\">// 线程1\nmyMutex.lock();            \ncout &lt;&lt; &quot;putInData 子线程：放入一个数据&quot; &lt;&lt; i &lt;&lt; endl;\ndataQuene.push_back(i);\nmyMutex.unlock();\n</code></pre>\n<pre><code class=\"C++\">// 线程2\nmyMutex.lock();            \ncout &lt;&lt; &quot;takeOutData 子线程：取出一个数据&quot; &lt;&lt; dataQuene.front() &lt;&lt; endl;\ndataQuene.pop_front();\nmyMutex.unlock();\n</code></pre>\n<p>这两个线程为互斥关系，各自当执行到<code>myMutex.lock()</code>时，必须等一个拿到锁的代码快完整执行到释放锁<code>myMutex.unlock()</code>了，另一个才可能拿到锁继续执行。</p>\n<blockquote>\n<p>注意：<code>lock()</code>与<code>unlock()</code>必须成对出现</p>\n</blockquote>\n<p><strong>lock_guard</strong></p>\n<ul>\n<li>内部构造时相当于执行了lock，析构时相当于执行unlock</li>\n<li>简单但不如lock()和unlock()灵活，通过大括号来实现，控制生命周期</li>\n</ul>\n<pre><code class=\"c++\">mutex myMutex;\n\n&#123;\n    lock_guard&lt;mutex&gt; dataGuard(myMutex);        // lock_guard&lt;mutex&gt;创建对象，参数为锁对象\n    ...\n    ...    \n&#125;\n</code></pre>\n<p><strong>unique_lock</strong></p>\n<p>std::unique_lock要比std::lock_guard功能更多，有更多的成员函数，更灵活,但是更灵活的代价是占用空间相对更大一点且相对更慢一点</p>\n<pre><code>mutex myMutex;\n\n&#123;\n    unique_lock&lt;mutex&gt; dataOutUnique(myMutex);    // unique_lock&lt;mutex&gt;创建对象，参数为锁对象\n    ...\n    ...    \n&#125;\n</code></pre>\n<p><strong>死锁产生原因及防止方法</strong></p>\n<p>当两个线程同时拿着两把及以上的相同的锁时，上锁的顺序必须要一致，否则会发生死锁。</p>\n"},{"title":"Markdown语法","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-03-14T01:26:34.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n# Markdown格式\n\n## 标题\n\n使用 **#** 号可表示 1-6 级标题，一级标题对应一个 **#** 号，二级标题对应两个 **#** 号，以此类推。\n\n```sh\n# 一级标题\n## 二级标题\n### 三级标题\n```\n\n显示效果：\n\n> # 一级标题\n> ## 二级标题\n> ### 三级标题\n\n\n## 段落\n\n编辑模式下可以在段落后面使用一个空行来表示重新开始一个段落。\n\n```sh\nchapter1\n\nchapter2\n```\n\n\n\n### 字体\n\n可以使用以下几种字体：\n\n```sh\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n```\n\n显示效果：\n\n> *斜体文本*\n> _斜体文本_\n> **粗体文本**\n> __粗体文本__\n> ***粗斜体文本***\n> ___粗斜体文本___\n\n### 分隔线\n\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。\n\n```\n***\n---\n___\n```\n\n显示效果：\n\n> ***\n>\n> ---\n>\n> ___\n\n### 删除线\n\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 **~~** 即可\n\n```\n~~haha~~\n```\n\n显示效果：\n\n> ~~haha~~\n\n### 下划线\n\n下划线可以通过 HTML 的 **<u>** 标签来实现：\n\n```html\n<u>带下划线文本</u>\n```\n\n显示效果：\n\n> <u>带下划线文本</u>\n\n## 列表\n\n支持有序列表和无序列表。\n\n无序列表使用星号(*****)、加号(**+**)或是减号(**-**)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：\n\n```sh\n* 第一项\n\n+ 第一项\n\n- 第一项\n```\n\n有序列表使用数字并加上`.`号来表示\n\n### 列表嵌套\n\n列表嵌套只需在子列表中的选项前面添加四个空格即可：\n\n## 区块\n\n区块引用是在段落开头使用 `>` 符号 ，然后后面紧跟一个**空格**符号：\n\n```\n> 区块引用\n```\n\n显示结果：\n\n> 区块引用\n\n另外区块是可以嵌套的，一个`>` 符号是最外层，两个 `>` 符号是第一层嵌套，以此类推：\n\n```\n> 最外层\n> > 第一层嵌套\n> > > 第二层嵌套\n```\n\n> 最外层\n> >  第一层嵌套\n> >\n> >  > 第二层嵌套\n\n另外，在区块中可以保持其他语法的格式效果\n\n## 代码\n\n```\n使用 ``` 表示 或者 ` 表示\n```\n\n## 链接\n\n```sh\n[链接名称](链接地址)\n\n或者\n\n<链接地址>\n```\n\n[这是一个链接](http://hpstu.github.io)\n\n## 图片\n\n- 开头一个感叹号 !\n- 接着一个方括号，里面放上图片的替代文字\n- 接着一个普通括号，里面放上图片的网址（或者文件地址，最好使用相对地址），最后还可以用引号包住并加上选择性的 'title' 属性的文字。\n\n```\n![alt 属性文本](图片地址)\n\n![alt 属性文本](图片地址 \"可选标题\")\n```\n\n 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。\n\n```\n<img src=\"http://static.runoob.com/images/runoob-logo.png\" width=\"50%\">\n```\n\n## 表格\n\n制作表格使用 **|** 来分隔不同的单元格，使用 **-** 来分隔表头和其他行。\n\n```sh\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n```\n\n**我们可以设置表格的对齐方式：**\n\n- **-:** 设置内容和标题栏居右对齐。\n- **:-** 设置内容和标题栏居左对齐。\n- **:-:** 设置内容和标题栏居中对齐。\n\n```\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n```\n\n## 支持的 HTML 元素\n\n不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。\n\n目前支持的 HTML 元素有：`<kbd> <b> <i> <em> <sup> <sub> <br>`等 \n\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑\n\n## 转义\n\n使用反斜杠转义特殊字符：\n\n```\n\\\n```\n\n## 公式\n\n待更...","source":"_posts/Markdown语法.md","raw":"---\ntitle: Markdown语法\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-03-14 09:26:34\npassword:\nsummary:\ntags:\ncategories:\nkeywords:\ndescription:\n---\n\n# Markdown格式\n\n## 标题\n\n使用 **#** 号可表示 1-6 级标题，一级标题对应一个 **#** 号，二级标题对应两个 **#** 号，以此类推。\n\n```sh\n# 一级标题\n## 二级标题\n### 三级标题\n```\n\n显示效果：\n\n> # 一级标题\n> ## 二级标题\n> ### 三级标题\n\n\n## 段落\n\n编辑模式下可以在段落后面使用一个空行来表示重新开始一个段落。\n\n```sh\nchapter1\n\nchapter2\n```\n\n\n\n### 字体\n\n可以使用以下几种字体：\n\n```sh\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n```\n\n显示效果：\n\n> *斜体文本*\n> _斜体文本_\n> **粗体文本**\n> __粗体文本__\n> ***粗斜体文本***\n> ___粗斜体文本___\n\n### 分隔线\n\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。\n\n```\n***\n---\n___\n```\n\n显示效果：\n\n> ***\n>\n> ---\n>\n> ___\n\n### 删除线\n\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 **~~** 即可\n\n```\n~~haha~~\n```\n\n显示效果：\n\n> ~~haha~~\n\n### 下划线\n\n下划线可以通过 HTML 的 **<u>** 标签来实现：\n\n```html\n<u>带下划线文本</u>\n```\n\n显示效果：\n\n> <u>带下划线文本</u>\n\n## 列表\n\n支持有序列表和无序列表。\n\n无序列表使用星号(*****)、加号(**+**)或是减号(**-**)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：\n\n```sh\n* 第一项\n\n+ 第一项\n\n- 第一项\n```\n\n有序列表使用数字并加上`.`号来表示\n\n### 列表嵌套\n\n列表嵌套只需在子列表中的选项前面添加四个空格即可：\n\n## 区块\n\n区块引用是在段落开头使用 `>` 符号 ，然后后面紧跟一个**空格**符号：\n\n```\n> 区块引用\n```\n\n显示结果：\n\n> 区块引用\n\n另外区块是可以嵌套的，一个`>` 符号是最外层，两个 `>` 符号是第一层嵌套，以此类推：\n\n```\n> 最外层\n> > 第一层嵌套\n> > > 第二层嵌套\n```\n\n> 最外层\n> >  第一层嵌套\n> >\n> >  > 第二层嵌套\n\n另外，在区块中可以保持其他语法的格式效果\n\n## 代码\n\n```\n使用 ``` 表示 或者 ` 表示\n```\n\n## 链接\n\n```sh\n[链接名称](链接地址)\n\n或者\n\n<链接地址>\n```\n\n[这是一个链接](http://hpstu.github.io)\n\n## 图片\n\n- 开头一个感叹号 !\n- 接着一个方括号，里面放上图片的替代文字\n- 接着一个普通括号，里面放上图片的网址（或者文件地址，最好使用相对地址），最后还可以用引号包住并加上选择性的 'title' 属性的文字。\n\n```\n![alt 属性文本](图片地址)\n\n![alt 属性文本](图片地址 \"可选标题\")\n```\n\n 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。\n\n```\n<img src=\"http://static.runoob.com/images/runoob-logo.png\" width=\"50%\">\n```\n\n## 表格\n\n制作表格使用 **|** 来分隔不同的单元格，使用 **-** 来分隔表头和其他行。\n\n```sh\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n```\n\n**我们可以设置表格的对齐方式：**\n\n- **-:** 设置内容和标题栏居右对齐。\n- **:-** 设置内容和标题栏居左对齐。\n- **:-:** 设置内容和标题栏居中对齐。\n\n```\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n```\n\n## 支持的 HTML 元素\n\n不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。\n\n目前支持的 HTML 元素有：`<kbd> <b> <i> <em> <sup> <sub> <br>`等 \n\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑\n\n## 转义\n\n使用反斜杠转义特殊字符：\n\n```\n\\\n```\n\n## 公式\n\n待更...","slug":"Markdown语法","published":1,"updated":"2022-03-14T02:16:59.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0q2s5rw0000wgtpbfub3lpc","content":"<h1 id=\"Markdown格式\"><a href=\"#Markdown格式\" class=\"headerlink\" title=\"Markdown格式\"></a>Markdown格式</h1><h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><p>使用 <strong>#</strong> 号可表示 1-6 级标题，一级标题对应一个 <strong>#</strong> 号，二级标题对应两个 <strong>#</strong> 号，以此类推。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\"># 一级标题\n## 二级标题\n### 三级标题\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>显示效果：</p>\n<blockquote>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3></blockquote>\n<h2 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h2><p>编辑模式下可以在段落后面使用一个空行来表示重新开始一个段落。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">chapter1\n\nchapter2\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h3><p>可以使用以下几种字体：</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>显示效果：</p>\n<blockquote>\n<p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><em><strong>粗斜体文本</strong></em><br><em><strong>粗斜体文本</strong></em></p>\n</blockquote>\n<h3 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。</p>\n<pre><code>***\n---\n___\n</code></pre>\n<p>显示效果：</p>\n<blockquote>\n<hr>\n<hr>\n<hr>\n</blockquote>\n<h3 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h3><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <strong>~~</strong> 即可</p>\n<pre><code>~~haha~~\n</code></pre>\n<p>显示效果：</p>\n<blockquote>\n<p><del>haha</del></p>\n</blockquote>\n<h3 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h3><p>下划线可以通过 HTML 的 <strong><u></strong> 标签来实现：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>u</span><span class=\"token punctuation\">></span></span>带下划线文本<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>u</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>显示效果：</p>\n<blockquote>\n<p><u>带下划线文本</u></p>\n</blockquote>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p>支持有序列表和无序列表。</p>\n<p>无序列表使用星号(<em>****)、加号(<strong>+</strong>)或是减号(</em>*-**)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">* 第一项\n\n+ 第一项\n\n- 第一项\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>有序列表使用数字并加上<code>.</code>号来表示</p>\n<h3 id=\"列表嵌套\"><a href=\"#列表嵌套\" class=\"headerlink\" title=\"列表嵌套\"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p>\n<h2 id=\"区块\"><a href=\"#区块\" class=\"headerlink\" title=\"区块\"></a>区块</h2><p>区块引用是在段落开头使用 <code>&gt;</code> 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p>\n<pre><code>&gt; 区块引用\n</code></pre>\n<p>显示结果：</p>\n<blockquote>\n<p>区块引用</p>\n</blockquote>\n<p>另外区块是可以嵌套的，一个<code>&gt;</code> 符号是最外层，两个 <code>&gt;</code> 符号是第一层嵌套，以此类推：</p>\n<pre><code>&gt; 最外层\n&gt; &gt; 第一层嵌套\n&gt; &gt; &gt; 第二层嵌套\n</code></pre>\n<blockquote>\n<p>最外层</p>\n<blockquote>\n<p> 第一层嵌套</p>\n<blockquote>\n<p>第二层嵌套</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>另外，在区块中可以保持其他语法的格式效果</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code>使用 ``` 表示 或者 ` 表示\n</code></pre>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[链接名称](链接地址)\n\n或者\n\n<链接地址>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"http://hpstu.github.io/\">这是一个链接</a></p>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><ul>\n<li>开头一个感叹号 !</li>\n<li>接着一个方括号，里面放上图片的替代文字</li>\n<li>接着一个普通括号，里面放上图片的网址（或者文件地址，最好使用相对地址），最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li>\n</ul>\n<pre><code>![alt 属性文本](图片地址)\n\n![alt 属性文本](图片地址 &quot;可选标题&quot;)\n</code></pre>\n<p> 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p>\n<pre><code>&lt;img src=&quot;http://static.runoob.com/images/runoob-logo.png&quot; width=&quot;50%&quot;&gt;\n</code></pre>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><p>制作表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>我们可以设置表格的对齐方式：</strong></p>\n<ul>\n<li><strong>-:</strong> 设置内容和标题栏居右对齐。</li>\n<li><strong>:-</strong> 设置内容和标题栏居左对齐。</li>\n<li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li>\n</ul>\n<pre><code>| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n</code></pre>\n<h2 id=\"支持的-HTML-元素\"><a href=\"#支持的-HTML-元素\" class=\"headerlink\" title=\"支持的 HTML 元素\"></a>支持的 HTML 元素</h2><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p>\n<p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 </p>\n<p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p>\n<h2 id=\"转义\"><a href=\"#转义\" class=\"headerlink\" title=\"转义\"></a>转义</h2><p>使用反斜杠转义特殊字符：</p>\n<pre><code>\\\n</code></pre>\n<h2 id=\"公式\"><a href=\"#公式\" class=\"headerlink\" title=\"公式\"></a>公式</h2><p>待更…</p>\n","site":{"data":{"friends":[{"name":"Hexo博客搭建","url":"https://zhuanlan.zhihu.com/c_1215655729367113728","title":"访问主页","introduction":"我的知乎博客搭建专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"godxiaolong","url":"https://blog.csdn.net/weixin_45682081","title":"访问主页","introduction":"我的CSDN主页，欢迎大家关注！","avatar":"/medias/avatars/csdn.ico"},{"name":"陈YF的博客","url":"https://blog.cyfan.top","title":"访问主页","introduction":"一个在互联网角落挣扎的小小博客，很小很小。","avatar":"https://blog.cyfan.top/pic/BLOGER.jpg"},{"name":"DylanLi","url":"https://cloudguest.cn","title":"前去学习","introduction":"人在少年，梦中不觉，醒后要归去。","avatar":"https://my-markdown-picbed.oss-cn-qingdao.aliyuncs.com/DylanBlog/logo2.jpg"},{"name":"框架师","url":"https://www.mobaijun.com","title":"前去学习","introduction":"墨白","avatar":"https://www.mobaijun.com/medias/avatar.jpg"}],"musics":[{"name":"总有一个人要先走","artist":"佚名","url":"/medias/music/总有一个人要先走.mp3","cover":"/medias/music/avatars/总有一个人要先走.jpg"},{"name":"Stay Alive","artist":"José González","url":"/medias/music/Stay Alive.mp3","cover":"/medias/music/avatars/Stay Alive.jpg"},{"name":"Like Real People Do","artist":"Hozier","url":"/medias/music/Like Real People Do.mp3","cover":"/medias/music/avatars/Like Real People Do.jpg"}]}},"excerpt":"","more":"<h1 id=\"Markdown格式\"><a href=\"#Markdown格式\" class=\"headerlink\" title=\"Markdown格式\"></a>Markdown格式</h1><h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><p>使用 <strong>#</strong> 号可表示 1-6 级标题，一级标题对应一个 <strong>#</strong> 号，二级标题对应两个 <strong>#</strong> 号，以此类推。</p>\n<pre><code class=\"sh\"># 一级标题\n## 二级标题\n### 三级标题\n</code></pre>\n<p>显示效果：</p>\n<blockquote>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3></blockquote>\n<h2 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h2><p>编辑模式下可以在段落后面使用一个空行来表示重新开始一个段落。</p>\n<pre><code class=\"sh\">chapter1\n\nchapter2\n</code></pre>\n<h3 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h3><p>可以使用以下几种字体：</p>\n<pre><code class=\"sh\">*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n</code></pre>\n<p>显示效果：</p>\n<blockquote>\n<p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><em><strong>粗斜体文本</strong></em><br><em><strong>粗斜体文本</strong></em></p>\n</blockquote>\n<h3 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。</p>\n<pre><code>***\n---\n___\n</code></pre>\n<p>显示效果：</p>\n<blockquote>\n<hr>\n<hr>\n<hr>\n</blockquote>\n<h3 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h3><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <strong>~~</strong> 即可</p>\n<pre><code>~~haha~~\n</code></pre>\n<p>显示效果：</p>\n<blockquote>\n<p><del>haha</del></p>\n</blockquote>\n<h3 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h3><p>下划线可以通过 HTML 的 <strong><u></strong> 标签来实现：</p>\n<pre><code class=\"html\">&lt;u&gt;带下划线文本&lt;/u&gt;\n</code></pre>\n<p>显示效果：</p>\n<blockquote>\n<p><u>带下划线文本</u></p>\n</blockquote>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p>支持有序列表和无序列表。</p>\n<p>无序列表使用星号(<em>****)、加号(<strong>+</strong>)或是减号(</em>*-**)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p>\n<pre><code class=\"sh\">* 第一项\n\n+ 第一项\n\n- 第一项\n</code></pre>\n<p>有序列表使用数字并加上<code>.</code>号来表示</p>\n<h3 id=\"列表嵌套\"><a href=\"#列表嵌套\" class=\"headerlink\" title=\"列表嵌套\"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p>\n<h2 id=\"区块\"><a href=\"#区块\" class=\"headerlink\" title=\"区块\"></a>区块</h2><p>区块引用是在段落开头使用 <code>&gt;</code> 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p>\n<pre><code>&gt; 区块引用\n</code></pre>\n<p>显示结果：</p>\n<blockquote>\n<p>区块引用</p>\n</blockquote>\n<p>另外区块是可以嵌套的，一个<code>&gt;</code> 符号是最外层，两个 <code>&gt;</code> 符号是第一层嵌套，以此类推：</p>\n<pre><code>&gt; 最外层\n&gt; &gt; 第一层嵌套\n&gt; &gt; &gt; 第二层嵌套\n</code></pre>\n<blockquote>\n<p>最外层</p>\n<blockquote>\n<p> 第一层嵌套</p>\n<blockquote>\n<p>第二层嵌套</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>另外，在区块中可以保持其他语法的格式效果</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre><code>使用 ``` 表示 或者 ` 表示\n</code></pre>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><pre><code class=\"sh\">[链接名称](链接地址)\n\n或者\n\n&lt;链接地址&gt;\n</code></pre>\n<p><a href=\"http://hpstu.github.io/\">这是一个链接</a></p>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><ul>\n<li>开头一个感叹号 !</li>\n<li>接着一个方括号，里面放上图片的替代文字</li>\n<li>接着一个普通括号，里面放上图片的网址（或者文件地址，最好使用相对地址），最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li>\n</ul>\n<pre><code>![alt 属性文本](图片地址)\n\n![alt 属性文本](图片地址 &quot;可选标题&quot;)\n</code></pre>\n<p> 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p>\n<pre><code>&lt;img src=&quot;http://static.runoob.com/images/runoob-logo.png&quot; width=&quot;50%&quot;&gt;\n</code></pre>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><p>制作表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p>\n<pre><code class=\"sh\">|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n</code></pre>\n<p><strong>我们可以设置表格的对齐方式：</strong></p>\n<ul>\n<li><strong>-:</strong> 设置内容和标题栏居右对齐。</li>\n<li><strong>:-</strong> 设置内容和标题栏居左对齐。</li>\n<li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li>\n</ul>\n<pre><code>| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n</code></pre>\n<h2 id=\"支持的-HTML-元素\"><a href=\"#支持的-HTML-元素\" class=\"headerlink\" title=\"支持的 HTML 元素\"></a>支持的 HTML 元素</h2><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p>\n<p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 </p>\n<p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p>\n<h2 id=\"转义\"><a href=\"#转义\" class=\"headerlink\" title=\"转义\"></a>转义</h2><p>使用反斜杠转义特殊字符：</p>\n<pre><code>\\\n</code></pre>\n<h2 id=\"公式\"><a href=\"#公式\" class=\"headerlink\" title=\"公式\"></a>公式</h2><p>待更…</p>\n"}],"PostAsset":[{"_id":"source/_posts/git2/git1.png","slug":"git1.png","post":"cl0lsyw6d000190tp5lqoca3m","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cl0du52rj0001fie9brtw7j1z","category_id":"cl0du52rn0003fie943e0dbva","_id":"cl0du52rr000bfie914dkau3y"}],"PostTag":[{"post_id":"cl0du52rj0001fie9brtw7j1z","tag_id":"cl0du52ro0004fie9cjxydvlg","_id":"cl0du52rr000dfie90in08y23"},{"post_id":"cl0du52rj0001fie9brtw7j1z","tag_id":"cl0du52rq0008fie93q9pf83k","_id":"cl0du52rs000efie90qnkfxo6"},{"post_id":"cl0du52rj0001fie9brtw7j1z","tag_id":"cl0du52rr000cfie9ejrral5z","_id":"cl0du52rs000ffie910jeepcs"},{"post_id":"cl0dvrsoy0007rme9czfd9h3p","tag_id":"cl0eongl600003ae96q7ce8vj","_id":"cl0eongl900013ae9em1hgwdz"},{"post_id":"cl0l0zbi90000jctpcn2kagsu","tag_id":"cl0l0zbib0001jctpebp5hz97","_id":"cl0l0zbid0002jctp3m8x6rw2"},{"post_id":"cl0l0zbid0003jctp2i7u0peb","tag_id":"cl0l0zbie0004jctpc26kedj0","_id":"cl0l0zbif0005jctpcvooekft"}],"Tag":[{"name":"Github","_id":"cl0du52ro0004fie9cjxydvlg"},{"name":"Hexo","_id":"cl0du52rq0008fie93q9pf83k"},{"name":"博客搭建","_id":"cl0du52rr000cfie9ejrral5z"},{"name":"ubuntu","_id":"cl0eongl600003ae96q7ce8vj"},{"name":"bash","_id":"cl0l0zbib0001jctpebp5hz97"},{"name":"git","_id":"cl0l0zbie0004jctpc26kedj0"}]}}